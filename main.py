import os
from datetime import date, datetime
from dotenv import load_dotenv
from fastapi import FastAPI, Depends, HTTPException, status, Query
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy import create_engine, func, or_, String, cast, Date as SQLDate
from sqlalchemy.orm import sessionmaker, Session, joinedload
from pydantic import BaseModel
from typing import List, Optional
import asyncio
import telegram

# --- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –í–°–ï –º–æ–¥–µ–ª–∏ –û–î–ò–ù –†–ê–ó ---
from models import (
    Base, Client, Order, Role, Permission, Employee,
    ExpenseType, Shift, Expense, Setting
)

# --- 1. –ù–ê–°–¢–†–û–ô–ö–ê ---
load_dotenv()
DATABASE_URL = os.getenv("DATABASE_URL")
# --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ‚Ññ2: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN") 

if not DATABASE_URL:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª—é—á DATABASE_URL –≤ —Ñ–∞–π–ª–µ .env")

engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
app = FastAPI(title="Cargo CRM API")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

ORDER_STATUSES = ["–í –æ–±—Ä–∞–±–æ—Ç–∫–µ", "–û–∂–∏–¥–∞–µ—Ç –≤—ã–∫—É–ø–∞", "–í—ã–∫—É–ø–ª–µ–Ω", "–ù–∞ —Å–∫–ª–∞–¥–µ –≤ –ö–∏—Ç–∞–µ", "–í –ø—É—Ç–∏", "–ù–∞ —Å–∫–ª–∞–¥–µ –≤ –ö–†", "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ", "–í—ã–¥–∞–Ω"]
WIPE_PASSWORD = "baha_555999_"
CONFIG = {
    "price_per_kg_usd": 5.5,
    "exchange_rate_usd": 87.5,
    "card_payment_types": ["MBank", "Optima", "DemirBank", "–î—Ä—É–≥–æ–µ"]
}

async def send_telegram_message(chat_id: str, text: str):
    if not TELEGRAM_BOT_TOKEN:
        print("WARNING: Telegram bot token –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    try:
        bot = telegram.Bot(token=TELEGRAM_BOT_TOKEN)
        await bot.send_message(chat_id=chat_id, text=text, parse_mode='HTML')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

async def generate_and_send_notification(db: Session, client: Client, new_status: str, track_codes: List[str]):
    # --- –ë–ª–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ chat_id –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤ ---
    if not client.telegram_chat_id:
        return
    track_codes_str = "\n".join([f"<code>{code}</code>" for code in track_codes])

    # --- –ë–ª–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –õ–ö ---
    address_setting = db.query(Setting).filter(Setting.key == 'bishkek_office_address').first()
    phone_setting = db.query(Setting).filter(Setting.key == 'contact_phone').first()
    address = address_setting.value if address_setting and address_setting.value else "4-–π –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω, 7/2"
    phone = phone_setting.value if phone_setting and phone_setting.value else "+996 555 36-63-86"
    secret_token = f"CLIENT-{client.id}-SECRET"
    base_url_setting = os.getenv("ADMIN_API_URL", "http://127.0.0.1:8000")
    try:
        base_domain = base_url_setting.split(":")[0] + ":" + base_url_setting.split(":")[1]
        # –ü–†–ï–î–ü–û–õ–û–ñ–ï–ù–ò–ï: –ï—Å–ª–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–∞ Netlify, –∑–∞–º–µ–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ –≤–∞—à URL
        lk_site_url = base_domain.replace(":8000", ":5500") # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–º–µ–Ω–∏—Ç—å –ø–æ—Ä—Ç 8000 –Ω–∞ 5500
    except:
        lk_site_url = "http://127.0.0.1:5500" # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    lk_link = f"{lk_site_url}/lk.html?token={secret_token}"
    # --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ –õ–ö ---

    # --- –ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ---
    message = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{client.full_name}</b>! üëã\n\n"

    # --- –£–ª—É—á—à–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤–µ—Å–æ–º –∏ —Å—É–º–º–æ–π ---
    if new_status == "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ":
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑—ã –≤ –ë–î –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–µ—Å–∞ –∏ —Å—É–º–º—ã
        orders_in_db = db.query(Order).filter(
            Order.client_id == client.id,
            Order.track_code.in_(track_codes)
        ).all()
        total_cost = 0
        total_weight = 0 # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ—Å
        for order in orders_in_db:
            total_cost += order.calculated_final_cost_som or 0
            total_weight += order.calculated_weight_kg or 0 # –°—É–º–º–∏—Ä—É–µ–º –≤–µ—Å

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ (–ø–æ—è–≤—è—Ç—Å—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è > 0)
        cost_str = f"–ö –æ–ø–ª–∞—Ç–µ: <b>{total_cost:.2f} —Å–æ–º</b> üí∞\n\n" if total_cost > 0 else ""
        weight_str = f"–û–±—â–∏–π –≤–µ—Å: <b>{total_weight:.3f} –∫–≥</b> ‚öñÔ∏è\n\n" if total_weight > 0 else "" # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞

        # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message += (
            f"–£—Ä–∞! –ï—Å—Ç—å –æ—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –≤–∞—à–∏–º –∑–∞–∫–∞–∑–∞–º! üì¶‚ú®\n\n"
            f"–í–∞—à–∏ –ø–æ—Å—ã–ª–∫–∏ —Å —Ç—Ä–µ–∫-–∫–æ–¥–∞–º–∏:\n{track_codes_str}\n\n"
            f"...—É–∂–µ –ø—Ä–∏–µ—Ö–∞–ª–∏ –∏ –æ—á–µ–Ω—å –∂–¥—É—Ç –≤–∞—Å! –ò—Ö —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞: ‚úÖ <b>–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ</b> ‚úÖ\n\n"
            f"{weight_str}" # –î–æ–±–∞–≤–∏–ª–∏ –≤–µ—Å
            f"{cost_str}" # –î–æ–±–∞–≤–∏–ª–∏ —Å—É–º–º—É
            f"<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>\n\n"
            f"üìç <b>–ó–∞–±—Ä–∞—Ç—å –ª–∏—á–Ω–æ:</b> –ñ–¥—ë–º –≤–∞—Å –≤ –Ω–∞—à–µ–º –æ—Ñ–∏—Å–µ –ø–æ –∞–¥—Ä–µ—Å—É:\n{address}\n\n"
            f"üìû <b>–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã?</b> –°–º–µ–ª–æ –∑–≤–æ–Ω–∏—Ç–µ:\n<code>{phone}</code>\n\n"
            f"üíª <b>–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ:</b> <a href='{lk_link}'>–ü–µ—Ä–µ–π—Ç–∏ –≤ –õ–ö</a>"
        )
    elif new_status == "–í –ø—É—Ç–∏":
        message += (
            f"–í–∞—à–∏ –∑–∞–∫–∞–∑—ã —É–∂–µ –≤ –¥–æ—Ä–æ–≥–µ! üööüí®\n\n"
            f"–°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π:\n{track_codes_str}\n\n"
            f"...–∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞: ‚û°Ô∏è <b>{new_status}</b>\n\n"
            f"–û–∂–∏–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π! –°–ª–µ–¥–∏—Ç—å –∑–∞ –∑–∞–∫–∞–∑–∞–º–∏ –º–æ–∂–Ω–æ –≤ <a href='{lk_link}'>–ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ</a>."
        )
    elif new_status == "–ù–∞ —Å–∫–ª–∞–¥–µ –≤ –ö–†":
        message += (
            f"–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! üéâ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã –ø—Ä–∏–±—ã–ª–∏ –Ω–∞ –Ω–∞—à —Å–∫–ª–∞–¥ –≤ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–µ!\n\n"
            f"–°—Ç–∞—Ç—É—Å –ø–æ—Å—ã–ª–æ–∫:\n{track_codes_str}\n\n"
            f"...–∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞: üá∞üá¨ <b>{new_status}</b>\n\n"
            f"–°–∫–æ—Ä–æ –æ–Ω–∏ –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã –∫ –≤—ã–¥–∞—á–µ! –ú—ã —Å–æ–æ–±—â–∏–º üòâ\n"
            f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ <a href='{lk_link}'>–ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ</a>."
        )
    # –î–æ–±–∞–≤—å –∑–¥–µ—Å—å –¥—Ä—É–≥–∏–µ elif –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ "–í—ã–∫—É–ø–ª–µ–Ω", "–ù–∞ —Å–∫–ª–∞–¥–µ –≤ –ö–∏—Ç–∞–µ" –∏ —Ç.–¥.
    else: # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
        message += (
            f"–ï—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –≤–∞—à–∏–º –∑–∞–∫–∞–∑–∞–º! üìÑ\n\n"
            f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ—Å—ã–ª–æ–∫:\n{track_codes_str}\n\n"
            f"‚û°Ô∏è <b>{new_status}</b>\n\n"
            f"–í—Å–µ –¥–µ—Ç–∞–ª–∏ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ <a href='{lk_link}'>–ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ</a>."
        )
    # --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ ---

    # --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ---
    await send_telegram_message(chat_id=client.telegram_chat_id, text=message)

# --- 2. DEPENDENCY ---
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# --- 3. Pydantic –ú–û–î–ï–õ–ò ---
# (–≠—Ç–æ—Ç –±–ª–æ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
class ClientCreate(BaseModel): full_name: str; phone: str; client_code_prefix: Optional[str] = None
class ClientUpdate(BaseModel): full_name: Optional[str] = None; phone: Optional[str] = None; client_code_prefix: Optional[str] = None; client_code_num: Optional[int] = None; status: Optional[str] = None
class BulkClientItem(BaseModel): full_name: str; phone: str; client_code: Optional[str] = None
class WipePayload(BaseModel): password: str
class OrderCreate(BaseModel):
    track_code: str
    purchase_type: str
    client_id: int
    comment: Optional[str] = None
    buyout_item_cost_cny: Optional[float] = None
    buyout_rate_for_client: Optional[float] = None
    buyout_commission_percent: Optional[float] = None
class OrderStatusUpdate(BaseModel): status: str
class BulkOrderItem(BaseModel):
    track_code: str
    client_code: Optional[str] = None
    phone: Optional[str] = None
    comment: Optional[str] = None
class BulkOrderImportPayload(BaseModel): orders_data: List[BulkOrderItem]; party_date: Optional[date] = None
class OrderActionPayload(BaseModel): password: str; reason: Optional[str] = None
class BulkActionPayload(BaseModel): action: str; order_ids: List[int]; new_status: Optional[str] = None; password: Optional[str] = None; new_party_date: Optional[date] = None; buyout_actual_rate: Optional[float] = None
class IssueOrderItem(BaseModel): order_id: int; weight_kg: float
class IssuePayload(BaseModel): orders: List[IssueOrderItem]; price_per_kg_usd: float; exchange_rate_usd: float; paid_cash: float; paid_card: float; card_payment_type: Optional[str] = None
class OrderPartyDateUpdate(BaseModel): party_date: date; password: str
class LoginPayload(BaseModel): password: str
class EmployeeCreate(BaseModel): full_name: str; password: str; role_id: int
class EmployeeUpdate(BaseModel): full_name: Optional[str] = None; password: Optional[str] = None; role_id: Optional[int] = None; is_active: Optional[bool] = None
class RoleCreate(BaseModel): name: str
class RolePermissionsUpdate(BaseModel): permission_ids: List[int]
class OrderUpdate(BaseModel):
    track_code: Optional[str] = None
    buyout_actual_rate: Optional[float] = None
    client_id: Optional[int] = None
class ExpenseCreate(BaseModel):
    expense_type_id: int
    amount: float
    notes: Optional[str] = None
class ExpenseUpdate(BaseModel):
    expense_type_id: Optional[int] = None
    amount: Optional[float] = None
    notes: Optional[str] = None
class ShiftOpenPayload(BaseModel):
    employee_id: int
    starting_cash: float
    exchange_rate_usd: float
    price_per_kg_usd: float
class ShiftClosePayload(BaseModel):
    closing_cash: float
# –ú–æ–¥–µ–ª—å –¥–ª—è –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞ (–≤–µ—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞)
class CalculateOrderItem(BaseModel):
    order_id: int
    weight_kg: float

# –ú–æ–¥–µ–ª—å –¥–ª—è –≤—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–∞—Å—á–µ—Ç
class CalculatePayload(BaseModel):
    orders: List[CalculateOrderItem] # –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å –∏—Ö –≤–µ—Å–æ–º
    price_per_kg_usd: float
    exchange_rate_usd: float
    new_status: Optional[str] = None # –°—Ç–∞—Ç—É—Å –º–æ–∂–Ω–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å


# --- 4. API-–≠–ù–î–ü–û–ò–ù–¢–´ ---
# (–í–µ—Å—å —ç—Ç–æ—Ç –±–ª–æ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–∞–∫ –∫–∞–∫ –æ—à–∏–±–∫–∞ –±—ã–ª–∞ –≤ –∏–º–ø–æ—Ä—Ç–∞—Ö –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)

# --- –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –ò –ù–ê–°–¢–†–û–ô–ö–ê ---
@app.post("/login", tags=["–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"])
def login(payload: LoginPayload, db: Session = Depends(get_db)):
    employee = db.query(Employee).options(
        joinedload(Employee.role).joinedload(Role.permissions)
    ).filter(Employee.password == payload.password, Employee.is_active == True).first()

    if not employee:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
    permissions = [p.codename for p in employee.role.permissions]
    return {"status": "ok", "employee": {"id": employee.id, "full_name": employee.full_name, "role": employee.role.name, "permissions": permissions}}

# --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ï–†–°–û–ù–ê–õ–û–ú (–î–õ–Ø –í–õ–ê–î–ï–õ–¨–¶–ê) ---
@app.get("/employees", tags=["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º"])
def get_employees(db: Session = Depends(get_db)):
    employees = db.query(Employee).options(joinedload(Employee.role)).order_by(Employee.full_name).all()
    return {"status": "ok", "employees": employees}

@app.get("/roles", tags=["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º"])
def get_roles(db: Session = Depends(get_db)):
    roles = db.query(Role).order_by(Role.name).all()
    return {"status": "ok", "roles": roles}

@app.post("/employees", tags=["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º"])
def create_employee(employee_data: EmployeeCreate, db: Session = Depends(get_db)):
    new_employee = Employee(**employee_data.dict())
    db.add(new_employee)
    db.commit()
    db.refresh(new_employee)
    return {"status": "ok", "message": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.", "employee": new_employee}

@app.patch("/employees/{employee_id}", tags=["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º"])
def update_employee(employee_id: int, employee_data: EmployeeUpdate, db: Session = Depends(get_db)):
    employee = db.query(Employee).filter(Employee.id == employee_id).first()
    if not employee:
        raise HTTPException(status_code=404, detail="–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    update_data = employee_data.dict(exclude_unset=True)
    if 'is_active' in update_data and not update_data['is_active']:
        if employee.role.name == '–í–ª–∞–¥–µ–ª–µ—Ü' and db.query(Employee).filter(Employee.role.has(name='–í–ª–∞–¥–µ–ª–µ—Ü'), Employee.is_active == True).count() <= 1:
            raise HTTPException(status_code=400, detail="–ù–µ–ª—å–∑—è —É–≤–æ–ª–∏—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞.")

    for key, value in update_data.items():
        setattr(employee, key, value)
    
    db.commit()
    db.refresh(employee)
    return {"status": "ok", "message": "–î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã."}

# --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–û–õ–Ø–ú–ò –ò –î–û–°–¢–£–ü–ê–ú–ò ---
@app.post("/roles", tags=["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –∏ –¥–æ—Å—Ç—É–ø–∞–º–∏"])
def create_role(role_data: RoleCreate, db: Session = Depends(get_db)):
    if db.query(Role).filter(Role.name == role_data.name).first():
        raise HTTPException(status_code=400, detail="–î–æ–ª–∂–Ω–æ—Å—Ç—å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    new_role = Role(name=role_data.name)
    db.add(new_role); db.commit(); db.refresh(new_role)
    return {"status": "ok", "message": "–ù–æ–≤–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∞.", "role": new_role}

@app.delete("/roles/{role_id}", tags=["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –∏ –¥–æ—Å—Ç—É–ø–∞–º–∏"])
def delete_role(role_id: int, db: Session = Depends(get_db)):
    role = db.query(Role).filter(Role.id == role_id).first()
    if not role: raise HTTPException(status_code=404, detail="–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    if role.name == "–í–ª–∞–¥–µ–ª–µ—Ü": raise HTTPException(status_code=400, detail="–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å '–í–ª–∞–¥–µ–ª–µ—Ü'.")
    if db.query(Employee).filter(Employee.role_id == role_id).count() > 0:
        raise HTTPException(status_code=400, detail="–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å, —Ç–∞–∫ –∫–∞–∫ –∫ –Ω–µ–π –ø—Ä–∏–≤—è–∑–∞–Ω—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏.")
    db.delete(role); db.commit()
    return {"status": "ok", "message": "–î–æ–ª–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞."}

@app.get("/permissions", tags=["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –∏ –¥–æ—Å—Ç—É–ø–∞–º–∏"])
def get_permissions(db: Session = Depends(get_db)):
    permissions = db.query(Permission).order_by(Permission.description).all()
    return {"status": "ok", "permissions": permissions}

@app.get("/roles/{role_id}/permissions", tags=["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –∏ –¥–æ—Å—Ç—É–ø–∞–º–∏"])
def get_role_permissions(role_id: int, db: Session = Depends(get_db)):
    role = db.query(Role).options(joinedload(Role.permissions)).filter(Role.id == role_id).first()
    if not role: raise HTTPException(status_code=404, detail="–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    permission_ids = [p.id for p in role.permissions]
    return {"status": "ok", "permission_ids": permission_ids}

@app.put("/roles/{role_id}/permissions", tags=["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –∏ –¥–æ—Å—Ç—É–ø–∞–º–∏"])
def update_role_permissions(role_id: int, payload: RolePermissionsUpdate, db: Session = Depends(get_db)):
    role = db.query(Role).filter(Role.id == role_id).first()
    if not role: raise HTTPException(status_code=404, detail="–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    new_permissions = db.query(Permission).filter(Permission.id.in_(payload.permission_ids)).all()
    role.permissions = new_permissions
    db.commit()
    return {"status": "ok", "message": f"–î–æ—Å—Ç—É–ø—ã –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ '{role.name}' –æ–±–Ω–æ–≤–ª–µ–Ω—ã."}

# --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ú–ï–ù–ê–ú–ò ---
@app.get("/shifts/active", tags=["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω–∞–º–∏"])
def get_active_shift(db: Session = Depends(get_db)):
    active_shift = db.query(Shift).options(joinedload(Shift.employee)).filter(Shift.end_time == None).first()
    if not active_shift:
        raise HTTPException(status_code=404, detail="–ê–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    return {"status": "ok", "shift": active_shift}

@app.post("/shifts/open", tags=["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω–∞–º–∏"])
def open_shift(payload: ShiftOpenPayload, db: Session = Depends(get_db)):
    if db.query(Shift).filter(Shift.end_time == None).first():
        raise HTTPException(status_code=400, detail="–ù–µ–ª—å–∑—è –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é —Å–º–µ–Ω—É, –ø–æ–∫–∞ –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è.")

    new_shift = Shift(**payload.dict())
    db.add(new_shift)
    db.commit()
    return {"status": "ok", "message": "–°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞."}

@app.post("/shifts/close", tags=["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω–∞–º–∏"])
def close_shift(payload: ShiftClosePayload, db: Session = Depends(get_db)):
    active_shift = db.query(Shift).filter(Shift.end_time == None).first()
    if not active_shift:
        raise HTTPException(status_code=404, detail="–ê–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    active_shift.end_time = datetime.utcnow()
    active_shift.closing_cash = payload.closing_cash
    db.commit()
    return {"status": "ok", "message": "–°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞."}

# --- –û–¢–ß–ï–¢–´ ---
@app.get("/shifts/report/current", tags=["–û—Ç—á–µ—Ç—ã"])
def get_current_shift_report(db: Session = Depends(get_db)):
    active_shift = db.query(Shift).filter(Shift.end_time == None).first()
    if not active_shift:
        raise HTTPException(status_code=404, detail="–ê–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    start_time = active_shift.start_time
    issued_orders_in_shift = db.query(Order).filter(Order.shift_id == active_shift.id, Order.status == "–í—ã–¥–∞–Ω").all()
    total_cash_income = sum(o.paid_cash_som for o in issued_orders_in_shift if o.paid_cash_som)
    total_card_income = sum(o.paid_card_som for o in issued_orders_in_shift if o.paid_card_som)
    expenses_in_shift = db.query(Expense).join(ExpenseType).filter(Expense.shift_id == active_shift.id, ExpenseType.name.notin_(['–ó–∞—Ä–ø–ª–∞—Ç–∞', '–ê–≤–∞–Ω—Å'])).all()
    total_expenses = sum(exp.amount for exp in expenses_in_shift)
    reverted_orders = db.query(Order).filter(Order.reverted_at >= start_time).all()
    total_returns = sum((o.paid_cash_som or 0) + (o.paid_card_som or 0) for o in reverted_orders)
    calculated_cash = active_shift.starting_cash + total_cash_income - total_expenses - total_returns

    report = {
        "shift_start_time": active_shift.start_time,
        "employee_name": active_shift.employee.full_name,
        "starting_cash": active_shift.starting_cash,
        "cash_income": total_cash_income,
        "card_income": total_card_income,
        "total_expenses": total_expenses,
        "total_returns": total_returns,
        "calculated_cash": calculated_cash
    }
    return {"status": "ok", "report": report}

@app.get("/reports/summary", tags=["–û—Ç—á–µ—Ç—ã"])
def get_summary_report(start_date: date, end_date: date, db: Session = Depends(get_db)):
    issued_orders = db.query(Order).filter(
        Order.status == "–í—ã–¥–∞–Ω",
        cast(Order.issued_at, SQLDate) >= start_date,
        cast(Order.issued_at, SQLDate) <= end_date
    ).all()
    all_expenses = db.query(Expense).options(joinedload(Expense.expense_type)).filter(
        cast(Expense.created_at, SQLDate) >= start_date,
        cast(Expense.created_at, SQLDate) <= end_date
    ).all()
    total_cash_income = sum(o.paid_cash_som for o in issued_orders if o.paid_cash_som)
    total_card_income = sum(o.paid_card_som for o in issued_orders if o.paid_card_som)
    total_income = total_cash_income + total_card_income
    total_expenses = sum(e.amount for e in all_expenses)
    expenses_by_type = {}
    for exp in all_expenses:
        type_name = exp.expense_type.name
        if type_name not in expenses_by_type:
            expenses_by_type[type_name] = 0
        expenses_by_type[type_name] += exp.amount
    net_profit = total_income - total_expenses
    shifts_in_period = db.query(Shift).options(joinedload(Shift.employee)).filter(
        cast(Shift.start_time, SQLDate) >= start_date,
        cast(Shift.start_time, SQLDate) <= end_date
    ).order_by(Shift.start_time.desc()).all()
    summary = {
        "start_date": start_date,
        "end_date": end_date,
        "total_income": total_income,
        "total_cash_income": total_cash_income,
        "total_card_income": total_card_income,
        "total_expenses": total_expenses,
        "expenses_by_type": expenses_by_type,
        "net_profit": net_profit
    }
    return {"status": "ok", "summary": summary}

@app.get("/shifts/report/{shift_id}", tags=["–û—Ç—á–µ—Ç—ã"])
def get_shift_report_by_id(shift_id: int, db: Session = Depends(get_db)):
    shift = db.query(Shift).filter(Shift.id == shift_id).first()
    if not shift:
        raise HTTPException(status_code=404, detail="–°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    start_time = shift.start_time
    issued_orders_in_shift = db.query(Order).filter(Order.shift_id == shift.id, Order.status == "–í—ã–¥–∞–Ω").all()
    total_cash_income = sum(o.paid_cash_som for o in issued_orders_in_shift if o.paid_cash_som)
    total_card_income = sum(o.paid_card_som for o in issued_orders_in_shift if o.paid_card_som)
    expenses_in_shift = db.query(Expense).join(ExpenseType).filter(Expense.shift_id == shift.id, ExpenseType.name.notin_(['–ó–∞—Ä–ø–ª–∞—Ç–∞', '–ê–≤–∞–Ω—Å'])).all()
    total_expenses = sum(exp.amount for exp in expenses_in_shift)
    reverted_orders = db.query(Order).filter(Order.reverted_at >= start_time, Order.reverted_at <= shift.end_time if shift.end_time else datetime.now()).all()
    total_returns = sum((o.paid_cash_som or 0) + (o.paid_card_som or 0) for o in reverted_orders)
    calculated_cash = shift.starting_cash + total_cash_income - total_expenses - total_returns
    report = {
        "shift_id": shift.id,
        "shift_start_time": shift.start_time,
        "shift_end_time": shift.end_time,
        "employee_name": shift.employee.full_name,
        "starting_cash": shift.starting_cash,
        "cash_income": total_cash_income,
        "card_income": total_card_income,
        "total_expenses": total_expenses,
        "total_returns": total_returns,
        "calculated_cash": calculated_cash,
        "actual_closing_cash": shift.closing_cash
    }
    return {"status": "ok", "report": report}

@app.get("/reports/buyout", tags=["–û—Ç—á–µ—Ç—ã"])
def get_buyout_report(start_date: date, end_date: date, db: Session = Depends(get_db)):
    buyout_orders = db.query(Order).options(joinedload(Order.client)).filter(
        Order.purchase_type == "–í—ã–∫—É–ø",
        cast(Order.created_at, SQLDate) >= start_date,
        cast(Order.created_at, SQLDate) <= end_date
    ).all()
    report_items = []
    total_profit = 0
    for order in buyout_orders:
        price_for_client = 0
        if order.buyout_item_cost_cny and order.buyout_rate_for_client:
            commission = order.buyout_item_cost_cny * (order.buyout_commission_percent / 100)
            price_for_client = (order.buyout_item_cost_cny + commission) * order.buyout_rate_for_client
        actual_cost = 0
        if order.buyout_item_cost_cny and order.buyout_actual_rate:
            actual_cost = order.buyout_item_cost_cny * order.buyout_actual_rate
        profit = 0
        if price_for_client > 0 and actual_cost > 0:
            profit = price_for_client - actual_cost
        total_profit += profit
        report_items.append({
            "order_id": order.id,
            "track_code": order.track_code,
            "created_at": order.created_at,
            "client_name": order.client.full_name,
            "item_cost_cny": order.buyout_item_cost_cny,
            "rate_for_client": order.buyout_rate_for_client,
            "price_for_client": price_for_client,
            "actual_rate": order.buyout_actual_rate,
            "actual_cost": actual_cost,
            "profit": profit
        })
    return {
        "status": "ok",
        "report": {
            "items": report_items,
            "total_profit": total_profit
        }
    }

# --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–°–•–û–î–ê–ú–ò ---
@app.get("/expense_types", tags=["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞–º–∏"])
def get_expense_types(db: Session = Depends(get_db)):
    types = db.query(ExpenseType).order_by(ExpenseType.name).all()
    return {"status": "ok", "expense_types": types}

@app.post("/expenses", tags=["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞–º–∏"])
def create_expense(expense_data: ExpenseCreate, db: Session = Depends(get_db)):
    active_shift = db.query(Shift).filter(Shift.end_time == None).first()
    if not active_shift:
        raise HTTPException(status_code=400, detail="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥.")
    new_expense = Expense(
        shift_id=active_shift.id,
        **expense_data.dict()
    )
    db.add(new_expense)
    db.commit()
    db.refresh(new_expense)
    return {"status": "ok", "message": "–†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω."}

@app.get("/expenses", tags=["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞–º–∏"])
def get_expenses(start_date: date, end_date: date, db: Session = Depends(get_db)):
    expenses = db.query(Expense).options(
        joinedload(Expense.expense_type),
        joinedload(Expense.shift).joinedload(Shift.employee)
    ).filter(
        cast(Expense.created_at, SQLDate) >= start_date,
        cast(Expense.created_at, SQLDate) <= end_date
    ).order_by(Expense.created_at.desc()).all()
    return {"status": "ok", "expenses": expenses}

@app.patch("/expenses/{expense_id}", tags=["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞–º–∏"])
def update_expense(expense_id: int, expense_data: ExpenseUpdate, db: Session = Depends(get_db)):
    expense = db.query(Expense).filter(Expense.id == expense_id).first()
    if not expense:
        raise HTTPException(status_code=404, detail="–†–∞—Å—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    update_data = expense_data.dict(exclude_unset=True)
    for key, value in update_data.items():
        setattr(expense, key, value)
    db.commit()
    db.refresh(expense)
    return {"status": "ok", "message": "–†–∞—Å—Ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω."}

# --- –£–¢–ò–õ–ò–¢–´ ---
ALL_PERMISSIONS = {
    'manage_employees': '–£–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ (–¥–æ–±–∞–≤–ª—è—Ç—å, —É–≤–æ–ª—å–Ω—è—Ç—å)', 'manage_roles': '–£–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º–∏ –∏ –¥–æ—Å—Ç—É–ø–∞–º–∏',
    'manage_expense_types': '–£–ø—Ä–∞–≤–ª—è—Ç—å —Ç–∏–ø–∞–º–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤', 'view_full_reports': '–í–∏–¥–µ—Ç—å –ø–æ–ª–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã',
    'view_shift_report': '–í–∏–¥–µ—Ç—å –æ—Ç—á–µ—Ç –ø–æ —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω–µ',
    'add_expense': '–î–æ–±–∞–≤–ª—è—Ç—å —Ä–∞—Å—Ö–æ–¥—ã', 'open_close_shift': '–û—Ç–∫—Ä—ã–≤–∞—Ç—å –∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å —Å–º–µ–Ω—ã', 'issue_orders': '–í—ã–¥–∞–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã',
    'manage_clients': '–£–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∏–µ–Ω—Ç–∞–º–∏', 'manage_orders': '–£–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑–∞–º–∏',
    'wipe_database': '–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–æ–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞)'
}
OWNER_PASSWORD = "root"

# --- Pydantic –º–æ–¥–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ ---
class OrderCreatePayload(BaseModel):
    track_code: str
    comment: Optional[str] = None

# --- API-–≠–ù–î–ü–û–ò–ù–¢ –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• –ö–õ–ò–ï–ù–¢–ê ---
@app.get("/api/client/data")
def get_client_data(token: str, db: Session = Depends(get_db)):
    try:
        client_id_str = token.split('-')[1]
        client_id = int(client_id_str)
    except (IndexError, ValueError):
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞.")

    client = db.query(Client).options(joinedload(Client.orders)).filter(Client.id == client_id).first()

    if not client:
        raise HTTPException(status_code=404, detail="–ö–ª–∏–µ–Ω—Ç –ø–æ —ç—Ç–æ–º—É —Ç–æ–∫–µ–Ω—É –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    return {"full_name": client.full_name, "orders": client.orders}

# --- –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢ –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ó–ê–ö–ê–ó–ê –ö–õ–ò–ï–ù–¢–û–ú ---
@app.post("/api/client/orders")
def client_add_order(token: str, payload: OrderCreatePayload, db: Session = Depends(get_db)):
    try:
        client_id_str = token.split('-')[1]
        client_id = int(client_id_str)
    except (IndexError, ValueError):
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞.")

    client = db.query(Client).filter(Client.id == client_id).first()
    if not client:
        raise HTTPException(status_code=404, detail="–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    new_order = Order(
        track_code=payload.track_code,
        comment=payload.comment,
        client_id=client.id,
        purchase_type="–î–æ—Å—Ç–∞–≤–∫–∞",
        status="–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
    )
    db.add(new_order)
    db.commit()

    return {"status": "ok", "message": "–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"}

@app.get("/setup_initial_data", tags=["–£—Ç–∏–ª–∏—Ç—ã"])
def setup_initial_data(db: Session = Depends(get_db)):
    existing_permissions = {p.codename for p in db.query(Permission).all()}
    for codename, description in ALL_PERMISSIONS.items():
        if codename not in existing_permissions:
            db.add(Permission(codename=codename, description=description))
    db.commit()
    owner_role = db.query(Role).filter(Role.name == "–í–ª–∞–¥–µ–ª–µ—Ü").first()
    if not owner_role:
        owner_role = Role(name="–í–ª–∞–¥–µ–ª–µ—Ü")
        db.add(owner_role)
        db.commit()
    all_permissions_in_db = db.query(Permission).all()
    owner_role.permissions = all_permissions_in_db
    db.commit()
    if db.query(Employee).count() == 0:
        owner_employee = Employee(full_name="–í–ª–∞–¥–µ–ª–µ—Ü", password=OWNER_PASSWORD, role_id=owner_role.id)
        db.add(owner_employee)
        db.commit()
    if db.query(ExpenseType).count() == 0:
        default_expense_types = [ExpenseType(name="–•–æ–∑. –Ω—É–∂–¥—ã"), ExpenseType(name="–ó–∞–∫—É–ø –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∏"), ExpenseType(name="–û–ø–ª–∞—Ç–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"), ExpenseType(name="–†–µ–º–æ–Ω—Ç"), ExpenseType(name="–ó–∞—Ä–ø–ª–∞—Ç–∞"), ExpenseType(name="–ê–≤–∞–Ω—Å"), ExpenseType(name="–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã")]
        db.add_all(default_expense_types)
        db.commit()
    return {"status": "ok", "message": "–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞."}

@app.get("/create_tables", tags=["–£—Ç–∏–ª–∏—Ç—ã"])
def create_tables_endpoint():
    try: Base.metadata.create_all(bind=engine); return {"status": "ok", "message": "–¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω—ã!"}
    except Exception as e: raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {e}")

@app.get("/order_statuses", tags=["–£—Ç–∏–ª–∏—Ç—ã"])
def get_order_statuses(): return {"status": "ok", "statuses": ORDER_STATUSES}

@app.get("/config", tags=["–í—ã–¥–∞—á–∞"])
def get_config(): return CONFIG

@app.get("/", tags=["–£—Ç–∏–ª–∏—Ç—ã"])
def read_root(): return {"status": "ok", "message": "–°–µ—Ä–≤–µ—Ä –ö–∞—Ä–≥–æ CRM –∑–∞–ø—É—â–µ–Ω!"}

# --- –ö–õ–ò–ï–ù–¢–´ ---
@app.post("/clients/bulk_import", tags=["–ö–ª–∏–µ–Ω—Ç—ã"])
def bulk_import_clients(clients_data: List[BulkClientItem], db: Session = Depends(get_db)):
    created_count = 0
    errors = []
    existing_phones = {c.phone for c in db.query(Client.phone).all()}
    existing_codes = {c.client_code_num for c in db.query(Client.client_code_num).filter(Client.client_code_num.isnot(None)).all()}
    for item in clients_data:
        if not item.phone:
            errors.append(f"–ü—Ä–æ–ø—É—â–µ–Ω –∫–ª–∏–µ–Ω—Ç '{item.full_name}', —Ç–∞–∫ –∫–∞–∫ –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
            continue
        if item.phone in existing_phones:
            errors.append(f"–ö–ª–∏–µ–Ω—Ç '{item.full_name}' —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º {item.phone} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            continue
        new_client = Client(full_name=item.full_name, phone=item.phone)
        if item.client_code:
            try:
                prefix = ''.join(filter(str.isalpha, item.client_code))
                num = int(''.join(filter(str.isdigit, item.client_code)))
                if num in existing_codes:
                    errors.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å '{item.full_name}', —Ç–∞–∫ –∫–∞–∫ –∫–æ–¥ {num} —É–∂–µ –∑–∞–Ω—è—Ç.")
                    continue
                new_client.client_code_prefix = prefix
                new_client.client_code_num = num
                existing_codes.add(num)
            except:
                errors.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞ '{item.client_code}' –¥–ª—è '{item.full_name}'.")
                continue
        db.add(new_client)
        existing_phones.add(item.phone)
        created_count += 1
    db.commit()
    return {"status": "ok", "message": "–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.", "created_clients": created_count, "errors": errors}

@app.post("/clients/wipe_all", tags=["–ö–ª–∏–µ–Ω—Ç—ã"])
def wipe_all_clients(payload: WipePayload, db: Session = Depends(get_db)):
    if payload.password != WIPE_PASSWORD: raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
    db.query(Expense).delete(); db.query(Shift).delete(); db.query(Order).delete(); db.query(Client).delete(); db.query(Employee).delete(); db.query(Role).delete(); db.commit()
    return {"status": "ok", "message": f"–ë–∞–∑–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞."}

@app.post("/register_client", tags=["–ö–ª–∏–µ–Ω—Ç—ã"])
def register_client(client_data: ClientCreate, db: Session = Depends(get_db)):
    if db.query(Client).filter(Client.phone == client_data.phone).first():
        raise HTTPException(status_code=400, detail="–ö–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    last_client = db.query(Client).order_by(Client.client_code_num.desc()).first()
    new_code_num = (last_client.client_code_num + 1) if last_client and last_client.client_code_num else 1001
    new_client = Client(
        full_name=client_data.full_name, 
        phone=client_data.phone,
        client_code_num=new_code_num
    )
    if client_data.client_code_prefix:
        new_client.client_code_prefix = client_data.client_code_prefix
    db.add(new_client)
    db.commit()
    db.refresh(new_client)
    return {"status": "ok", "message": "–ö–ª–∏–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", "client": new_client}

@app.get("/clients", tags=["–ö–ª–∏–µ–Ω—Ç—ã"])
def get_all_clients(db: Session = Depends(get_db)): return {"status": "ok", "clients": db.query(Client).order_by(Client.full_name).all()}

@app.get("/clients/search", tags=["–ö–ª–∏–µ–Ω—Ç—ã"])
def search_clients(q: str, db: Session = Depends(get_db)):
    if not q: return []
    search_term = f"%{q}%"
    return db.query(Client).filter(or_(Client.full_name.ilike(search_term), Client.phone.ilike(search_term), (Client.client_code_prefix + func.cast(Client.client_code_num, String)).ilike(search_term))).limit(10).all()

@app.patch("/clients/{client_id}", tags=["–ö–ª–∏–µ–Ω—Ç—ã"])
def update_client(client_id: int, client_data: ClientUpdate, db: Session = Depends(get_db)):
    client = db.query(Client).filter(Client.id == client_id).first()
    if not client: raise HTTPException(status_code=404, detail="–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    update_data = client_data.dict(exclude_unset=True)
    for key, value in update_data.items(): setattr(client, key, value)
    db.commit(); db.refresh(client)
    return {"status": "ok", "message": "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.", "client": client}

@app.delete("/clients/{client_id}", tags=["–ö–ª–∏–µ–Ω—Ç—ã"])
def delete_client(client_id: int, db: Session = Depends(get_db)):
    client = db.query(Client).filter(Client.id == client_id).first()
    if not client: raise HTTPException(status_code=404, detail="–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    active_orders = db.query(Order).filter(Order.client_id == client_id, Order.status != "–í—ã–¥–∞–Ω").count()
    if active_orders > 0: raise HTTPException(status_code=400, detail=f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å, —É –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å—Ç—å {active_orders} –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
    db.query(Order).filter(Order.client_id == client_id).delete(); db.delete(client); db.commit()
    return {"status": "ok", "message": "–ö–ª–∏–µ–Ω—Ç –∏ –µ–≥–æ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ —É–¥–∞–ª–µ–Ω—ã."}

@app.post("/clients/{client_id}/generate_lk_link", tags=["–ö–ª–∏–µ–Ω—Ç—ã"])
def generate_lk_link(client_id: int, db: Session = Depends(get_db)):
    client = db.query(Client).filter(Client.id == client_id).first()
    if not client:
        raise HTTPException(status_code=404, detail="–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    secret_token = f"CLIENT-{client.id}-SECRET" 
    client_portal_url = "http://127.0.0.1:5500/lk.html" 
    link = f"{client_portal_url}?token={secret_token}"
    return {"link": link}

# --- –ó–ê–ö–ê–ó–´ ---
@app.post("/orders/bulk_import", tags=["–ó–∞–∫–∞–∑—ã"])
def bulk_import_orders(payload: BulkOrderImportPayload, db: Session = Depends(get_db)):
    created_count = 0
    errors = []
    warnings = []
    import_date = payload.party_date if payload.party_date else date.today()
    for item in payload.orders_data:
        try:
            client = None
            if item.client_code:
                client_code_str = str(item.client_code)
                prefix = ''.join(filter(str.isalpha, client_code_str))
                num_str = ''.join(filter(str.isdigit, client_code_str))
                if num_str:
                    num = int(num_str)
                    query = db.query(Client).filter(Client.client_code_num == num)
                    if prefix:
                        query = query.filter(Client.client_code_prefix == prefix)
                    client = query.first()
            if not client and item.phone:
                client = db.query(Client).filter(Client.phone == str(item.phone)).first()
            if not client:
                ident = item.client_code or item.phone or f"track-{item.track_code}"
                new_placeholder_client = Client(
                    full_name=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ({ident})",
                    phone=f"placeholder_{datetime.now().timestamp()}"
                )
                db.add(new_placeholder_client)
                db.flush()
                client = new_placeholder_client
                warnings.append(f"–î–ª—è –∑–∞–∫–∞–∑–∞ '{item.track_code}' —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç '{ident}'.")
            new_order = Order(
                track_code=str(item.track_code),
                client_id=client.id,
                purchase_type="–î–æ—Å—Ç–∞–≤–∫–∞",
                status="–í –ø—É—Ç–∏",
                party_date=import_date,
                comment=item.comment
            )
            db.add(new_order)
            created_count += 1
        except Exception as e:
            db.rollback()
            errors.append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è —Ç—Ä–µ–∫–∞ {item.track_code}: {str(e)}")
    db.commit()
    return {"status": "ok", "message": "–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.", "created_orders": created_count, "errors": errors, "warnings": warnings}

@app.post("/orders/bulk_action", tags=["–ó–∞–∫–∞–∑—ã"])
async def bulk_order_action(payload: BulkActionPayload, db: Session = Depends(get_db)):
    if not payload.order_ids:
        raise HTTPException(status_code=400, detail="–ù–µ –≤—ã–±—Ä–∞–Ω—ã –∑–∞–∫–∞–∑—ã.")
    query = db.query(Order).filter(Order.id.in_(payload.order_ids))
    if query.count() != len(payload.order_ids):
        raise HTTPException(status_code=404, detail="–û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    if payload.action == 'update_status':
        if not payload.new_status or payload.new_status not in ORDER_STATUSES:
            raise HTTPException(status_code=400, detail="–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å.")
        count = query.update({"status": payload.new_status}, synchronize_session=False)
        db.commit()
        updated_orders = db.query(Order).options(joinedload(Order.client)).filter(Order.id.in_(payload.order_ids)).all()
        notifications_to_send = {}
        for order in updated_orders:
            if order.client and order.client.telegram_chat_id:
                if order.client.id not in notifications_to_send:
                    notifications_to_send[order.client.id] = {"client": order.client, "track_codes": []}
                notifications_to_send[order.client.id]["track_codes"].append(order.track_code)
        for client_id, data in notifications_to_send.items():
            asyncio.create_task(generate_and_send_notification(db, data["client"], payload.new_status, data["track_codes"]))
        return {"status": "ok", "message": f"–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è {count} –∑–∞–∫–∞–∑–æ–≤."}
    elif payload.action == 'buyout':
        if not payload.buyout_actual_rate:
            raise HTTPException(status_code=400, detail="–ù–µ —É–∫–∞–∑–∞–Ω —Ä–µ–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –≤—ã–∫—É–ø–∞.")
        count = query.update({"buyout_actual_rate": payload.buyout_actual_rate, "status": "–í—ã–∫—É–ø–ª–µ–Ω"}, synchronize_session=False)
        db.commit()
        return {"status": "ok", "message": f"–°—Ç–∞—Ç—É—Å '–í—ã–∫—É–ø–ª–µ–Ω' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {count} –∑–∞–∫–∞–∑–æ–≤."}
    elif payload.action == 'revert':
        orders_to_action = query.all()
        for order in orders_to_action:
            if order.status == "–í—ã–¥–∞–Ω":
                order.reverted_at = datetime.utcnow()
                order.status = "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ"
                order.issued_at = None
                order.shift_id = None
        db.commit()
        return {"status": "ok", "message": f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤: {len(orders_to_action)}."}
    elif payload.action == 'update_party_date':
        if payload.password != WIPE_PASSWORD: raise HTTPException(status_code=403, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        if not payload.new_party_date: raise HTTPException(status_code=400, detail="–ù–µ —É–∫–∞–∑–∞–Ω–∞ –Ω–æ–≤–∞—è –¥–∞—Ç–∞ –ø–∞—Ä—Ç–∏–∏.")
        count = query.update({"party_date": payload.new_party_date}, synchronize_session=False)
        db.commit()
        return {"status": "ok", "message": f"–î–∞—Ç–∞ –ø–∞—Ä—Ç–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {count} –∑–∞–∫–∞–∑–æ–≤."}
    elif payload.action == 'delete':
        if payload.password != WIPE_PASSWORD: raise HTTPException(status_code=403, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        count = query.delete(synchronize_session=False)
        db.commit()
        return {"status": "ok", "message": f"–£–¥–∞–ª–µ–Ω–æ {count} –∑–∞–∫–∞–∑–æ–≤."}
    else:
        raise HTTPException(status_code=400, detail="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")

@app.get("/orders", tags=["–ó–∞–∫–∞–∑—ã"])
def get_all_orders(
    db: Session = Depends(get_db),
    party_dates: Optional[List[date]] = Query(None),
    statuses: Optional[List[str]] = Query(None),
    client_id: Optional[int] = Query(None) # <-- –î–û–ë–ê–í–¨ –≠–¢–û–¢ –ü–ê–†–ê–ú–ï–¢–†
):
    query = db.query(Order).options(joinedload(Order.client))

    if party_dates:
        query = query.filter(Order.party_date.in_(party_dates))

    if statuses:
        query = query.filter(Order.status.in_(statuses))

    # --- üëá –î–û–ë–ê–í–¨ –≠–¢–û –£–°–õ–û–í–ò–ï üëá ---
    if client_id is not None:
        query = query.filter(Order.client_id == client_id)
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ª—É—á—à–µ –¥–µ–ª–∞—Ç—å –ø–æ ID –∏–ª–∏ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è, –∞ –Ω–µ –ø–æ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞,
    # –µ—Å–ª–∏ –º—ã —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª–∏ –ø–æ –∫–ª–∏–µ–Ω—Ç—É
    return {"status": "ok", "orders": query.order_by(Order.id.desc()).all()}

@app.get("/orders/parties", tags=["–ó–∞–∫–∞–∑—ã"])
def get_order_parties(db: Session = Depends(get_db)):
    parties = db.query(Order.party_date).distinct().order_by(Order.party_date.desc()).all()
    return {"status": "ok", "parties": [p[0].isoformat() for p in parties if p[0]]}

@app.post("/clients/{client_id}/orders", tags=["–ó–∞–∫–∞–∑—ã"])
def create_order_for_client(client_id: int, order_data: OrderCreate, db: Session = Depends(get_db)):
    client = db.query(Client).filter(Client.id == client_id).first()
    if not client:
        raise HTTPException(status_code=404, detail=f"–ö–ª–∏–µ–Ω—Ç —Å ID {client_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    if not order_data.track_code or not order_data.track_code.strip():
        timestamp = int(datetime.now().timestamp())
        order_data.track_code = f"PENDING-{timestamp}"
    new_order = Order(**order_data.dict())
    if new_order.purchase_type == "–í—ã–∫—É–ø":
        new_order.status = "–û–∂–∏–¥–∞–µ—Ç –≤—ã–∫—É–ø–∞"
    db.add(new_order)
    db.commit()
    db.refresh(new_order)
    return {"status": "ok", "message": f"–ó–∞–∫–∞–∑ –¥–ª—è '{client.full_name}' —Å–æ–∑–¥–∞–Ω!", "order_details": new_order}

@app.patch("/orders/{order_id}/status", tags=["–ó–∞–∫–∞–∑—ã"])
async def update_order_status(order_id: int, status_data: OrderStatusUpdate, db: Session = Depends(get_db)):
    order = db.query(Order).options(joinedload(Order.client)).filter(Order.id == order_id).first()
    if not order:
        raise HTTPException(status_code=404, detail=f"–ó–∞–∫–∞–∑ —Å ID {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    if status_data.status not in ORDER_STATUSES:
        raise HTTPException(status_code=400, detail="–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å.")
    order.status = status_data.status
    db.commit()
    db.refresh(order)
    if order.client and order.client.telegram_chat_id:
        await generate_and_send_notification(db, order.client, status_data.status, [order.track_code])
    return {"status": "ok", "message": "–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!", "order": order}

@app.post("/orders/calculate", tags=["–ó–∞–∫–∞–∑—ã"])
async def calculate_orders(payload: CalculatePayload, db: Session = Depends(get_db)):
    order_ids = [item.order_id for item in payload.orders]

    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Å—Ä–∞–∑—É –ø–æ–¥–≥—Ä—É–∂–∞—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    orders_to_update = db.query(Order).options(joinedload(Order.client)).filter(Order.id.in_(order_ids)).all()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∑–∞–∫–∞–∑—ã –Ω–∞–π–¥–µ–Ω—ã
    if len(orders_to_update) != len(order_ids):
        found_ids = {o.id for o in orders_to_update}
        missing_ids = [oid for oid in order_ids if oid not in found_ids]
        raise HTTPException(status_code=404, detail=f"–ó–∞–∫–∞–∑—ã —Å ID {missing_ids} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —Å—Ä–µ–¥–∏ –Ω–∏—Ö —É–∂–µ –≤—ã–¥–∞–Ω–Ω—ã—Ö
    issued_orders = [o.track_code for o in orders_to_update if o.status == "–í—ã–¥–∞–Ω"]
    if issued_orders:
        raise HTTPException(status_code=400, detail=f"–ù–µ–ª—å–∑—è —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —É–∂–µ –≤—ã–¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã: {issued_orders}")

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
    for order in orders_to_update:
        item_data = next((item for item in payload.orders if item.order_id == order.id), None)
        if item_data: # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            order.calculated_weight_kg = item_data.weight_kg
            order.calculated_price_per_kg_usd = payload.price_per_kg_usd
            order.calculated_exchange_rate_usd = payload.exchange_rate_usd
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
            order.calculated_final_cost_som = (
                item_data.weight_kg * payload.price_per_kg_usd * payload.exchange_rate_usd
            )

        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
        if payload.new_status:
            if payload.new_status not in ORDER_STATUSES:
                # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ–≤–µ—Ä–Ω—ã–π
                db.rollback() 
                raise HTTPException(status_code=400, detail=f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å: {payload.new_status}")
            order.status = payload.new_status

    db.commit() # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
    if payload.new_status:
        notifications_to_send = {}
        # –ü–µ—Ä–µ–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ—Å–ª–µ commit, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        updated_orders_for_notify = db.query(Order).options(joinedload(Order.client)).filter(Order.id.in_(order_ids)).all()
        for order in updated_orders_for_notify:
            if order.client and order.client.telegram_chat_id:
                if order.client.id not in notifications_to_send:
                    notifications_to_send[order.client.id] = {"client": order.client, "track_codes": []}
                notifications_to_send[order.client.id]["track_codes"].append(order.track_code)

        for client_id, data in notifications_to_send.items():
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            # –£–±–µ–¥–∏—Å—å, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å –∏–º–ø–æ—Ä—Ç asyncio –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
            import asyncio 
            asyncio.create_task(generate_and_send_notification(db, data["client"], payload.new_status, data["track_codes"]))

    return {"status": "ok", "message": f"–†–∞—Å—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è {len(orders_to_update)} –∑–∞–∫–∞–∑–æ–≤." + (f" –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{payload.new_status}'." if payload.new_status else "")}

@app.delete("/orders/{order_id}", tags=["–ó–∞–∫–∞–∑—ã"])
def delete_order(order_id: int, payload: OrderActionPayload, db: Session = Depends(get_db)):
    if payload.password != WIPE_PASSWORD: raise HTTPException(status_code=403, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
    order = db.query(Order).filter(Order.id == order_id).first()
    if not order: raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    db.delete(order); db.commit()
    return {"status": "ok", "message": "–ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω."}

@app.patch("/orders/{order_id}", tags=["–ó–∞–∫–∞–∑—ã"])
def update_order(order_id: int, order_data: OrderUpdate, db: Session = Depends(get_db)):
    order = db.query(Order).filter(Order.id == order_id).first()
    if not order:
        raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    update_data = order_data.dict(exclude_unset=True)
    for key, value in update_data.items():
        setattr(order, key, value)
    db.commit()
    db.refresh(order)
    return {"status": "ok", "message": "–ó–∞–∫–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω.", "order": order}

# --- –í–´–î–ê–ß–ê ---
@app.get("/orders/ready_for_issue", tags=["–í—ã–¥–∞—á–∞"])
def get_orders_ready_for_issue(db: Session = Depends(get_db)):
    orders = db.query(Order).join(Order.client).options(joinedload(Order.client)).filter(Order.status == "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ").order_by(Client.full_name).all()
    return {"status": "ok", "orders": orders}

@app.post("/orders/issue", tags=["–í—ã–¥–∞—á–∞"])
def issue_orders(payload: IssuePayload, db: Session = Depends(get_db)):
    active_shift = db.query(Shift).filter(Shift.end_time == None).first()
    if not active_shift:
        raise HTTPException(status_code=400, detail="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–¥–∞—Ç—å –∑–∞–∫–∞–∑.")
    order_ids = [item.order_id for item in payload.orders]
    orders_to_update = db.query(Order).filter(Order.id.in_(order_ids)).all()
    if len(orders_to_update) != len(order_ids):
        raise HTTPException(status_code=404, detail="–û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    total_paid_cash = payload.paid_cash / len(orders_to_update)
    total_paid_card = payload.paid_card / len(orders_to_update)
    for order in orders_to_update:
        item_data = next((item for item in payload.orders if item.order_id == order.id), None)
        if item_data:
            order.status = "–í—ã–¥–∞–Ω"
            order.weight_kg = item_data.weight_kg
            order.price_per_kg_usd = payload.price_per_kg_usd
            order.exchange_rate_usd = payload.exchange_rate_usd
            order.final_cost_som = (item_data.weight_kg * payload.price_per_kg_usd * payload.exchange_rate_usd)
            order.paid_cash_som = total_paid_cash
            order.paid_card_som = total_paid_card
            order.card_payment_type = payload.card_payment_type
            order.issued_at = datetime.utcnow()
            order.shift_id = active_shift.id
    db.commit()
    return {"status": "ok", "message": f"–£—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ {len(orders_to_update)} –∑–∞–∫–∞–∑–æ–≤."}

@app.get("/orders/issued", tags=["–í—ã–¥–∞—á–∞"])
def get_issued_orders(start_date: Optional[date] = None, end_date: Optional[date] = None, db: Session = Depends(get_db)):
    query = db.query(Order).options(joinedload(Order.client)).filter(Order.status == "–í—ã–¥–∞–Ω")
    if start_date: query = query.filter(cast(Order.issued_at, SQLDate) >= start_date)
    if end_date: query = query.filter(cast(Order.issued_at, SQLDate) <= end_date)
    return {"status": "ok", "orders": query.order_by(Order.issued_at.desc()).all()}

@app.patch("/orders/{order_id}/revert_status", tags=["–í—ã–¥–∞—á–∞"])
def revert_order_status(order_id: int, db: Session = Depends(get_db)):
    order = db.query(Order).filter(Order.id == order_id).first()
    if not order:
        raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    if order.status != "–í—ã–¥–∞–Ω":
        raise HTTPException(status_code=400, detail="–ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–ª—å–∫–æ –≤—ã–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑.")
    order.reverted_at = datetime.utcnow()
    order.status = "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ"
    order.issued_at = None
    order.shift_id = None
    db.commit()
    return {"status": "ok", "message": "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω."}
