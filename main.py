# main.py (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–Ø 3.0)

import os
from datetime import date, datetime, time, timedelta
from dotenv import load_dotenv
from fastapi import FastAPI, Depends, HTTPException, status, Query, Header
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy import create_engine, func, or_, String, cast, Date as SQLDate
from sqlalchemy.orm import sessionmaker, Session, joinedload
from pydantic import BaseModel, Field
from typing import List, Optional
import asyncio
import telegram
import httpx
import traceback
import re
import logging # <-- –£–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –µ—Å—Ç—å
import sys # <-- –£–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –µ—Å—Ç—å

# --- –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø (–°–ö–û–ü–ò–†–£–ô –≠–¢–û–¢ –ë–õ–û–ö) ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", 
    level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
# –ú—ã —Å–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é 'logger'
logger = logging.getLogger(__name__) 
# --- –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ô–ö–ò ---

# === –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–Ø ===
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –ó–î–ï–°–¨, –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏, –ü–û–°–õ–ï –∏–º–ø–æ—Ä—Ç–æ–≤
ORDER_STATUSES = ["–í –æ–±—Ä–∞–±–æ—Ç–∫–µ", "–û–∂–∏–¥–∞–µ—Ç –≤—ã–∫—É–ø–∞", "–í—ã–∫—É–ø–ª–µ–Ω", "–ù–∞ —Å–∫–ª–∞–¥–µ –≤ –ö–∏—Ç–∞–µ", "–í –ø—É—Ç–∏", "–ù–∞ —Å–∫–ª–∞–¥–µ –≤ –ö–†", "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ", "–í—ã–¥–∞–Ω"]
# === –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ===

# --- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –í–°–ï –Ω–∞—à–∏ –ù–û–í–´E –º–æ–¥–µ–ª–∏ ---
from models import (
    Base, Company, Location, Client, Order, Role, Permission, Employee,
    ExpenseType, Shift, Expense, Setting
)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Session –∏ List –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
from sqlalchemy.orm import Session
from typing import List, Optional # –£–±–µ–¥–∏—Å—å, —á—Ç–æ List –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω


# --- –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
# (–£–±–µ–¥–∏—Å—å, —á—Ç–æ 'SessionLocal' –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤–≤–µ—Ä—Ö—É 'main.py')
# (–ù–∞–ø—Ä–∏–º–µ—Ä: from models import SessionLocal)

async def generate_and_send_notification(client: Client, new_status: str, track_codes: List[str]):
    """
    (–ò–°–ü–†–ê–í–õ–ï–ù–û) –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –ò–°–ü–û–õ–¨–ó–£–Ø –¢–û–ö–ï–ù –ö–û–ú–ü–ê–ù–ò–ò.
    (–í–ï–†–°–ò–Ø –° –§–ò–õ–ò–ê–õ–û–ú, –≠–ú–û–î–ó–ò –∏ –°–û–ë–°–¢–í–ï–ù–ù–û–ô –°–ï–°–°–ò–ï–ô DB)
    """
    
    # --- –ù–û–í–û–ï: –°–æ–∑–¥–∞–µ–º —Å–≤–æ—é —Å–µ—Å—Å–∏—é ---
    db = SessionLocal()
    try:
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û ---

        # --- –ë–ª–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ chat_id –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤ ---
        if not client.telegram_chat_id:
            print(f"INFO: –£ –∫–ª–∏–µ–Ω—Ç–∞ {client.full_name} (ID: {client.id}) –Ω–µ—Ç telegram_chat_id. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            return # –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ ID —á–∞—Ç–∞ –Ω–µ—Ç
        track_codes_str = "\n".join([f"<code>{code}</code>" for code in track_codes])

        # --- –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –ò–ó –ö–û–ú–ü–ê–ù–ò–ò –∫–ª–∏–µ–Ω—Ç–∞ (–ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É 'db') ---
        company_bot_token = None
        if client.company_id:
            company = db.query(Company).filter(Company.id == client.company_id).first()
            if company and company.telegram_bot_token:
                company_bot_token = company.telegram_bot_token
            else:
                print(f"WARNING: –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID {client.company_id}. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ID {client.id} –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                return
        else:
            print(f"WARNING: –£ –∫–ª–∏–µ–Ω—Ç–∞ ID {client.id} –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            return
        if not company_bot_token:
            return
        # --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ ---

        # --- –ë–ª–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –õ–ö (–ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É 'db') ---
        phone_setting = db.query(Setting).filter(Setting.key == 'contact_phone', Setting.company_id == client.company_id).first()
        phone = phone_setting.value if phone_setting and phone_setting.value else "–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω"
        
        secret_token = f"CLIENT-{client.id}-COMPANY-{client.company_id}-SECRET"
        client_portal_base_url = os.getenv("CLIENT_PORTAL_URL", "http://–í–ê–®_–î–û–ú–ï–ù_–ò–õ–ò_IP/lk.html") 
        lk_link = f"{client_portal_base_url}?token={secret_token}"
        # --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ –õ–ö ---

        # --- –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –∏ —Ñ–∏–ª–∏–∞–ª–µ (–ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É 'db') ---
        orders_in_db = db.query(Order).options(
            joinedload(Order.location) # <-- –ó–ê–ì–†–£–ñ–ê–ï–ú –§–ò–õ–ò–ê–õ
        ).filter(
            Order.client_id == client.id,
            Order.track_code.in_(track_codes),
            Order.company_id == client.company_id
        ).all()

        location_name = "–ù–∞—à –æ—Ñ–∏—Å"
        location_address = "–ê–¥—Ä–µ—Å —É—Ç–æ—á–Ω—è–µ—Ç—Å—è —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞"
        total_cost = 0
        total_weight = 0

        if orders_in_db:
            first_order = orders_in_db[0]
            if first_order.location:
                location_name = first_order.location.name 
                location_address = first_order.location.address or f"–§–∏–ª–∏–∞–ª '{location_name}' (–∞–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω)"
            
            for order in orders_in_db:
                total_cost += order.calculated_final_cost_som or 0
                total_weight += order.calculated_weight_kg or 0

        # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
        message = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{client.full_name}</b>! üëã\n\n"
        
        if new_status == "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ":
            cost_str = f"–ö –æ–ø–ª–∞—Ç–µ: <b>{total_cost:.2f} —Å–æ–º</b> üí∞\n\n" if total_cost > 0 else ""
            weight_str = f"–û–±—â–∏–π –≤–µ—Å: <b>{total_weight:.3f} –∫–≥</b> ‚öñÔ∏è\n\n" if total_weight > 0 else ""

            message += (
                f"üéâüéâüéâ <b>–ü–û–°–´–õ–ö–ò –ù–ê –ú–ï–°–¢–ï!</b> üéâüéâüéâ\n\n"
                f"–°–ø–µ—à–∏–º —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã —É–∂–µ –ø—Ä–∏–±—ã–ª–∏ –≤ –Ω–∞—à —Ñ–∏–ª–∏–∞–ª <b>'{location_name}'</b> –∏ –æ—á–µ–Ω—å –∂–¥—É—Ç –≤–∞—Å!\n\n"
                f"<b>–¢—Ä–µ–∫-–∫–æ–¥—ã:</b>\n{track_codes_str}\n\n"
                f"<b>–°—Ç–∞—Ç—É—Å:</b> ‚úÖ <b>{new_status}</b> ‚úÖ\n\n"
                f"{weight_str}"
                f"{cost_str}"
                f"üìç <b>–ó–∞–±—Ä–∞—Ç—å –º–æ–∂–Ω–æ –∑–¥–µ—Å—å:</b>\n{location_address}\n\n" 
                f"üìû <b>–í–æ–ø—Ä–æ—Å—ã? –ó–≤–æ–Ω–∏—Ç–µ:</b> <code>{phone}</code>\n"
                f"üíª <b>–í–∞—à –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:</b> <a href='{lk_link}'>–ü–µ—Ä–µ–π—Ç–∏</a>"
            )
        
        elif new_status == "–í –ø—É—Ç–∏":
            message += (
                f"–í–∞—à–∏ –∑–∞–∫–∞–∑—ã —É–∂–µ –º—á–∞—Ç—Å—è –∫ –≤–∞–º! üööüí®\n\n"
                f"<b>–°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π:</b>\n{track_codes_str}\n\n"
                f"...–∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞: ‚û°Ô∏è <b>{new_status}</b>\n\n"
                f"–ú—ã —Å–æ–æ–±—â–∏–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∏ –ø—Ä–∏–±—É–¥—É—Ç! ü•≥\n–°–ª–µ–¥–∏—Ç—å –∑–∞ –∑–∞–∫–∞–∑–∞–º–∏ –º–æ–∂–Ω–æ –≤ <a href='{lk_link}'>–ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ</a>."
            )
        
        elif new_status == "–ù–∞ —Å–∫–ª–∞–¥–µ –≤ –ö–†":
            message += (
                f"–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! ü§© –í–∞—à–∏ –∑–∞–∫–∞–∑—ã –ø—Ä–∏–±—ã–ª–∏ –Ω–∞ –Ω–∞—à —Å–∫–ª–∞–¥ –≤ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–µ!\n\n"
                f"<b>–°—Ç–∞—Ç—É—Å –ø–æ—Å—ã–ª–æ–∫:</b>\n{track_codes_str}\n\n"
                f"...–∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞: üá∞üá¨ <b>{new_status}</b> üá∞üá¨\n\n"
                f"–°–µ–π—á–∞—Å –º—ã –∏—Ö —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Å–∫–æ—Ä–æ –æ–Ω–∏ –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã –∫ –≤—ã–¥–∞—á–µ! üöÄ\n"
                f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ <a href='{lk_link}'>–ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ</a>."
            )
        
        else: # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            message += (
                f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –≤–∞—à–∏–º –∑–∞–∫–∞–∑–∞–º! üìÑ\n\n"
                f"<b>–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è:</b>\n{track_codes_str}\n\n"
                f"‚û°Ô∏è <b>{new_status}</b>\n\n"
                f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ <a href='{lk_link}'>–ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ</a>."
            )
        # --- –ö–æ–Ω–µ—Ü —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è ---

        # --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ---
        try:
            bot = telegram.Bot(token=company_bot_token)
            await bot.send_message(chat_id=client.telegram_chat_id, text=message, parse_mode='HTML')
            print(f"INFO: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {client.full_name} (ID: {client.id}, Company: {client.company_id}) –æ —Å—Ç–∞—Ç—É—Å–µ '{new_status}'.")
        except Exception as e:
            print(f"ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É ID {client.id} (ChatID: {client.telegram_chat_id}, Company: {client.company_id}) —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω –∫–æ–º–ø–∞–Ω–∏–∏: {e}")

    # --- –ù–û–í–û–ï: –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é ---
    finally:
        db.close()
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û ---
    
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –ó–î–ï–°–¨, –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏, –ü–û–°–õ–ï –∏–º–ø–æ—Ä—Ç–æ–≤
ORDER_STATUSES = ["–í –æ–±—Ä–∞–±–æ—Ç–∫–µ", "–û–∂–∏–¥–∞–µ—Ç –≤—ã–∫—É–ø–∞", "–í—ã–∫—É–ø–ª–µ–Ω", "–ù–∞ —Å–∫–ª–∞–¥–µ –≤ –ö–∏—Ç–∞–µ", "–í –ø—É—Ç–∏", "–ù–∞ —Å–∫–ª–∞–¥–µ –≤ –ö–†", "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ", "–í—ã–¥–∞–Ω"]

# --- 1. –ù–ê–°–¢–†–û–ô–ö–ê ---
load_dotenv()
DATABASE_URL = os.getenv("DATABASE_URL")
#TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")#

if not DATABASE_URL:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª—é—á DATABASE_URL –≤ —Ñ–∞–π–ª–µ .env")

# –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É–ª–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
engine = create_engine(
    DATABASE_URL,
    pool_recycle=1800, # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç (1800 —Å–µ–∫—É–Ω–¥)
    pool_pre_ping=True # –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
app = FastAPI(title="Cargo CRM API - Multi-Tenant")

# --- 2. DEPENDENCIES (–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è) ---

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"], # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º
    allow_credentials=True,
    allow_methods=["*"], # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã
    allow_headers=["*"], # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–≤–∫–ª—é—á–∞—è –Ω–∞—à X-Employee-ID)
)

# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø TELEGRAM –£–í–ï–î–û–ú–õ–ï–ù–ò–ô (Multi-Tenant) ---

async def send_telegram_message(token: str, chat_id: str, text: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram, –∏—Å–ø–æ–ª—å–∑—É—è –ö–û–ù–ö–†–ï–¢–ù–´–ô —Ç–æ–∫–µ–Ω."""
    if not token:
        print("WARNING: [Notification] –ü–µ—Ä–µ–¥–∞–Ω –ø—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return
    try:
        bot = telegram.Bot(token=token)
        await bot.send_message(chat_id=chat_id, text=text, parse_mode='HTML', disable_web_page_preview=True)
        print(f"[Notification] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ chat_id {chat_id}")
    except Exception as e:
        print(f"!!! –û–®–ò–ë–ö–ê [Notification] –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ chat_id {chat_id} (—Ç–æ–∫–µ–Ω ...{token[-4:]}): {e}")

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# –ù–ê–®–ê –ì–õ–ê–í–ù–ê–Ø DEPENDENCY –î–õ–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
def get_current_active_employee(
    x_employee_id: Optional[str] = Header(None),  
    db: Session = Depends(get_db)
) -> Employee:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Employee-ID, –Ω–∞—Ö–æ–¥–∏—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –ë–î.
    –≠—Ç–æ - –Ω–∞—à–∞ "—Å–µ—Å—Å–∏—è" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if not x_employee_id:
        raise HTTPException(status_code=401, detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Employee-ID (–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)")
    
    try:
        employee_id = int(x_employee_id)
    except ValueError:
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç X-Employee-ID")

    employee = db.query(Employee).options(
        joinedload(Employee.role).joinedload(Role.permissions)
    ).filter(Employee.id == employee_id).first()
    
    db.refresh(employee)
    print("----- DEBUG: Employee Attributes after refresh -----")
    print(dir(employee)) # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã –æ–±—ä–µ–∫—Ç–∞
    print("----- END DEBUG -----") # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç—ã –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –ë–î

    if not employee:
        raise HTTPException(status_code=401, detail="–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω (–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)")
    
    if not employee.is_active:
        raise HTTPException(status_code=403, detail="–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")

    return employee

# Dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –°–£–ü–ï–†-–ê–î–ú–ò–ù–ê
def get_super_admin(employee: Employee = Depends(get_current_active_employee)):
    if employee.company_id is not None or employee.role.name != "Super-Admin":
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ Super-Admin.")
    return employee

# Dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –í–õ–ê–î–ï–õ–¨–¶–ê –ö–û–ú–ü–ê–ù–ò–ò
def get_company_owner(employee: Employee = Depends(get_current_active_employee)):
    if employee.company_id is None:
        raise HTTPException(status_code=403, detail="–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏.")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–µ–≥–æ –Ω—É–∂–Ω—ã–µ –ø—Ä–∞–≤–∞
    permissions = {p.codename for p in employee.role.permissions}
    if 'manage_employees' not in permissions and 'manage_roles' not in permissions and 'manage_locations' not in permissions:
         raise HTTPException(status_code=403, detail="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º –∏–ª–∏ —Ñ–∏–ª–∏–∞–ª–∞–º–∏.")
        
    return employee

# --- –ù–û–í–ê–Ø –ó–ê–í–ò–°–ò–ú–û–°–¢–¨: –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ ---
def get_current_company_employee(employee: Employee = Depends(get_current_active_employee)):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ (–Ω–µ SuperAdmin) –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–æ–º–ø–∞–Ω–∏–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–ª–∏–µ–Ω—Ç–æ–≤, –∑–∞–∫–∞–∑–æ–≤).
    """
    if employee.company_id is None:
        raise HTTPException(status_code=403, detail="–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∫–æ–º–ø–∞–Ω–∏–∏.")
    return employee


# --- 3. Pydantic –ú–û–î–ï–õ–ò ---

# –ú–æ–¥–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –°—É–ø–µ—Ä-–ê–¥–º–∏–Ω–∞
class SuperAdminSetupPayload(BaseModel):
    full_name: str
    password: str

# --- –ú–æ–¥–µ–ª–∏ –¥–ª—è –ö–æ–º–ø–∞–Ω–∏–π (Super-Admin) ---
class CompanyBase(BaseModel):
    name: str
    company_code: str = Field(..., pattern=r'^[A-Z0-9_]{3,15}$')
    contact_person: Optional[str] = None
    contact_phone: Optional[str] = None
    telegram_bot_token: Optional[str] = None
    telegram_bot_username: Optional[str] = None
class CompanyCreate(CompanyBase):
    subscription_paid_until: date
    owner_full_name: str
    owner_password: str
class CompanyUpdate(BaseModel):
    name: Optional[str] = None
    contact_person: Optional[str] = None
    contact_phone: Optional[str] = None
    is_active: Optional[bool] = None
    subscription_paid_until: Optional[date] = None
    telegram_bot_token: Optional[str] = None # –ü–æ–∑–≤–æ–ª—è–µ–º –æ–±–Ω–æ–≤–ª—è—Ç—å
    telegram_bot_username: Optional[str] = None # –ü–æ–∑–≤–æ–ª—è–µ–º –æ–±–Ω–æ–≤–ª—è—Ç—å
class CompanyOut(CompanyBase):
    id: int
    is_active: bool
    subscription_paid_until: Optional[date]
    created_at: datetime
    class Config:
        orm_mode = True

# --- –ú–æ–¥–µ–ª–∏ –¥–ª—è –õ–æ–≥–∏–Ω–∞ ---
class LoginPayload(BaseModel):
    password: str
    company_code: Optional[str] = None
class LoginResponse(BaseModel):
    status: str
    employee: dict  # {id, full_name, role, permissions, is_super_admin, location_id}
    company: Optional[dict] # {id, name, company_code}

# --- –ú–æ–¥–µ–ª–∏ –¥–ª—è –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ü–µ—Ä—Å–æ–Ω–∞–ª–æ–º (–í–ª–∞–¥–µ–ª–µ—Ü –ö–æ–º–ø–∞–Ω–∏–∏) ---

class LocationBase(BaseModel):
    name: str
    address: Optional[str] = None
    phone: Optional[str] = None
    whatsapp_link: Optional[str] = None
    instagram_link: Optional[str] = None
    map_link: Optional[str] = None

class LocationCreate(LocationBase):
    pass

class LocationUpdate(BaseModel):
    name: Optional[str] = None
    address: Optional[str] = None
    phone: Optional[str] = None
    whatsapp_link: Optional[str] = None
    instagram_link: Optional[str] = None
    map_link: Optional[str] = None

class LocationOut(LocationBase):
    id: int
    company_id: int
    class Config:
        orm_mode = True

class RoleBase(BaseModel):
    name: str
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—è –¥–ª—è ORM Mode
class RoleOut(RoleBase):
    id: int
    class Config:
        orm_mode = True

class RolePermissionsUpdate(BaseModel):
    permission_ids: List[int]

class PermissionOut(BaseModel):
    id: int
    codename: str
    description: str
    class Config:
        orm_mode = True

class EmployeeBase(BaseModel):
    full_name: str
    location_id: int
    role_id: int
class EmployeeCreate(EmployeeBase):
    password: str
class EmployeeUpdate(BaseModel):
    full_name: Optional[str] = None
    location_id: Optional[int] = None
    role_id: Optional[int] = None
    password: Optional[str] = None
    is_active: Optional[bool] = None
class EmployeeOut(EmployeeBase):
    id: int
    is_active: bool
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: RoleOut –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–¥–µ—Å—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    role: RoleOut  
    class Config:
        orm_mode = True

# === –ù–ê–ß–ê–õ–û –ù–û–í–´–• –ú–û–î–ï–õ–ï–ô (–°–ú–ï–ù–´ –ò –†–ê–°–•–û–î–´) ===

# --- –ú–æ–¥–µ–ª–∏ –¥–ª—è –°–º–µ–Ω ---
class ShiftBase(BaseModel):
    starting_cash: float
    exchange_rate_usd: float
    price_per_kg_usd: float

class ShiftOpenPayload(ShiftBase):
    # –ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤—ã–±–∏—Ä–∞–µ—Ç —Å–µ–±—è (–∏–ª–∏ –í–ª–∞–¥–µ–ª–µ—Ü –≤—ã–±–∏—Ä–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞)
    employee_id: int # ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–º–µ–Ω—É
    location_id: int # ID —Ñ–∏–ª–∏–∞–ª–∞, –≥–¥–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å–º–µ–Ω–∞

class ShiftClosePayload(BaseModel):
    closing_cash: float

class ShiftOut(ShiftBase):
    id: int
    start_time: datetime
    end_time: Optional[datetime] = None
    closing_cash: Optional[float] = None
    employee_id: int
    location_id: int
    company_id: int
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ —Ñ–∏–ª–∏–∞–ª–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    # employee: EmployeeOut
    # location: LocationOut
    class Config:
        orm_mode = True

# --- –ú–æ–¥–µ–ª–∏ –¥–ª—è –û—Ç—á–µ—Ç–æ–≤ –ø–æ —Å–º–µ–Ω–µ ---
class ShiftReport(BaseModel):
    shift_id: Optional[int] = None # –î–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ ID
    shift_start_time: datetime
    shift_end_time: Optional[datetime] = None
    employee_name: str
    location_name: str # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞
    starting_cash: float
    cash_income: float = 0
    card_income: float = 0
    total_expenses: float = 0 # –†–∞—Å—Ö–æ–¥—ã –ë–ï–ó –∑–∞—Ä–ø–ª–∞—Ç/–∞–≤–∞–Ω—Å–æ–≤
    total_returns: float = 0
    calculated_cash: float # –†–∞—Å—á–µ—Ç–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –∫–æ–Ω–µ—Ü
    actual_closing_cash: Optional[float] = None # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫ (–µ—Å–ª–∏ —Å–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞)
    discrepancy: Optional[float] = None # –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ (–µ—Å–ª–∏ —Å–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞)

# --- –ú–æ–¥–µ–ª–∏ –¥–ª—è –¢–∏–ø–æ–≤ –†–∞—Å—Ö–æ–¥–æ–≤ ---
class ExpenseTypeBase(BaseModel):
    name: str

class ExpenseTypeCreate(ExpenseTypeBase):
    pass

class ExpenseTypeUpdate(ExpenseTypeBase):
    pass

class ExpenseTypeOut(ExpenseTypeBase):
    id: int
    company_id: int
    class Config:
        orm_mode = True

# === –ö–û–ù–ï–¶ –ù–û–í–´–• –ú–û–î–ï–õ–ï–ô ===

# --- –ú–æ–¥–µ–ª–∏ –¥–ª—è –ù–∞—Å—Ç—Ä–æ–µ–∫ (Settings) ---
class SettingOut(BaseModel):
    key: str
    value: Optional[str]
    class Config:
        orm_mode = True

class SettingsUpdatePayload(BaseModel):
    # –ú—ã –±—É–¥–µ–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å {key: value, ...}
    settings: dict[str, Optional[str]]

# main.py (–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏)

class ShiftForceClosePayload(BaseModel):
    closing_cash: float
    password: str # –¢—Ä–µ–±—É–µ–º –ø–∞—Ä–æ–ª—å –í–ª–∞–¥–µ–ª—å—Ü–∞

# main.py

class BotUnlinkPayload(BaseModel):
    telegram_chat_id: str
    company_id: int

# main.py (–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞)
@app.post("/api/shifts/{shift_id}/force_close", tags=["–°–º–µ–Ω—ã"])
def force_close_shift(
    shift_id: int,
    payload: ShiftForceClosePayload,
    employee: Employee = Depends(get_company_owner), # –¢–æ–ª—å–∫–æ –í–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç
    db: Session = Depends(get_db)
):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –í–ª–∞–¥–µ–ª—å—Ü—É)."""
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –í–ª–∞–¥–µ–ª—å—Ü–∞
    if employee.password != payload.password:
        raise HTTPException(status_code=403, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –í–ª–∞–¥–µ–ª—å—Ü–∞.")

    # 2. –ù–∞—Ö–æ–¥–∏–º —Å–º–µ–Ω—É
    shift = db.query(Shift).filter(
        Shift.id == shift_id,
        Shift.company_id == employee.company_id # –ü—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
    ).first()

    if not shift:
        raise HTTPException(status_code=404, detail="–°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")
    
    if shift.end_time is not None:
        raise HTTPException(status_code=400, detail="–°–º–µ–Ω–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.")

    # 3. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–º–µ–Ω—É
    shift.end_time = datetime.now()
    shift.closing_cash = payload.closing_cash
    db.commit()
    db.refresh(shift)
    
    return {"status": "ok", "message": f"–°–º–µ–Ω–∞ #{shift_id} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ –í–ª–∞–¥–µ–ª—å—Ü–µ–º."}

# === –ù–ê–ß–ê–õ–û –ù–û–í–´–• –ú–û–î–ï–õ–ï–ô (–†–ê–°–•–û–î–´) ===

# --- –ú–æ–¥–µ–ª–∏ –¥–ª—è –†–∞—Å—Ö–æ–¥–æ–≤ ---
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ ShiftInfoOut
class EmployeeSmallOut(BaseModel):
    id: int
    full_name: str
    class Config:
        orm_mode = True

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–º–µ–Ω–µ –≤ ExpenseOut
class ShiftInfoOut(BaseModel):
    employee: EmployeeSmallOut
    end_time: Optional[datetime] = None
    class Config:
        orm_mode = True

# --- –ú–æ–¥–µ–ª–∏ –¥–ª—è –†–∞—Å—Ö–æ–¥–æ–≤ ---
class ExpenseBase(BaseModel):
    amount: float = Field(..., gt=0) # –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0
    notes: Optional[str] = None
    expense_type_id: int

class ExpenseCreate(ExpenseBase):
    shift_id: Optional[int] = None
    pass # –í—Å–µ –ø–æ–ª—è —É–∂–µ –≤ ExpenseBase

class ExpenseUpdate(BaseModel):
    amount: Optional[float] = Field(None, gt=0) # –°—É–º–º–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞, –Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å, > 0
    notes: Optional[str] = None
    expense_type_id: Optional[int] = None

# –ú–æ–¥–µ–ª—å –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–∞—Å—Ö–æ–¥–∞ —Å –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
class ExpenseOut(ExpenseBase):
    id: int
    created_at: datetime
    shift_id: Optional[int] = None
    company_id: int
    # –í–∫–ª—é—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–∏–ø–µ —Ä–∞—Å—Ö–æ–¥–∞
    expense_type: ExpenseTypeOut
    # –í–∫–ª—é—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ —Å–º–µ–Ω—ã —á–µ—Ä–µ–∑ ShiftInfoOut
    shift: Optional[ShiftInfoOut] = None

    class Config:
        orm_mode = True

# === –ö–û–ù–ï–¶ –ù–û–í–´–• –ú–û–î–ï–õ–ï–ô (–†–ê–°–•–û–î–´) ===

# --- –ú–û–î–ï–õ–ò –î–õ–Ø –û–¢–ß–ï–¢–û–í ---
# (–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã —Å –∫–æ–Ω—Ü–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è NameError)

class SummaryReportItem(BaseModel):
    total_income: float
    total_cash_income: float
    total_card_income: float
    total_expenses: float
    net_profit: float
    expenses_by_type: dict[str, float] = {}
    shifts: List[ShiftOut] = [] # ShiftOut –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –í–´–®–ï

    class Config:
        orm_mode = True 
        # (–ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Pydantic V2, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞: from_attributes = True)

class SummaryReportResponse(BaseModel):
    status: str
    summary: SummaryReportItem

    class Config:
        orm_mode = True
        # (–ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Pydantic V2, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞: from_attributes = True)
# --- –ö–û–ù–ï–¶ –ú–û–î–ï–õ–ï–ô –î–õ–Ø –û–¢–ß–ï–¢–û–í ---

# main.py (–î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –ú–û–î–ï–õ–¨)
class SettingUpdate(BaseModel):
    key: str
    value: Optional[str] # –†–∞–∑—Ä–µ—à–∞–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å null (–∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É)

# --- 4. –≠–ù–î–ü–û–ò–ù–¢–´ –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò ---

ALL_PERMISSIONS = {
    'manage_companies': '–£–ø—Ä–∞–≤–ª—è—Ç—å –ö–æ–º–ø–∞–Ω–∏—è–º–∏ (—Å–æ–∑–¥–∞–≤–∞—Ç—å, –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å)',
    'impersonate_company': '–í—Ö–æ–¥–∏—Ç—å "–æ—Ç –∏–º–µ–Ω–∏" –∫–æ–º–ø–∞–Ω–∏–∏ (–¥–ª—è —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏)',
    'manage_employees': '–£–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ (–¥–æ–±–∞–≤–ª—è—Ç—å, —É–≤–æ–ª—å–Ω—è—Ç—å)',  
    'manage_roles': '–£–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º–∏ –∏ –¥–æ—Å—Ç—É–ø–∞–º–∏',
    'manage_locations': '–£–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∏–ª–∏–∞–ª–∞–º–∏ (—Ç–æ—á–∫–∞–º–∏)',
    'manage_expense_types': '–£–ø—Ä–∞–≤–ª—è—Ç—å —Ç–∏–ø–∞–º–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤',  
    'view_full_reports': '–í–∏–¥–µ—Ç—å –ø–æ–ª–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã',
    'view_shift_report': '–í–∏–¥–µ—Ç—å –æ—Ç—á–µ—Ç –ø–æ —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω–µ',
    'add_expense': '–î–æ–±–∞–≤–ª—è—Ç—å —Ä–∞—Å—Ö–æ–¥—ã',  
    'open_close_shift': '–û—Ç–∫—Ä—ã–≤–∞—Ç—å –∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å —Å–º–µ–Ω—ã',  
    'issue_orders': '–í—ã–¥–∞–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã',
    'manage_clients': '–£–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∏–µ–Ω—Ç–∞–º–∏',  
    'manage_orders': '–£–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑–∞–º–∏',
    'wipe_database': '–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–æ–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞)'
}

@app.post("/api/superadmin/setup", tags=["Super-Admin"])
def setup_super_admin(payload: SuperAdminSetupPayload, db: Session = Depends(get_db)):
    if db.query(Employee).count() > 0:
        raise HTTPException(status_code=403, detail="–°–∏—Å—Ç–µ–º–∞ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.")

    # 1. –°–æ–∑–¥–∞–µ–º –≤—Å–µ –ì–õ–û–ë–ê–õ–¨–ù–´–ï —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    existing_permissions = {p.codename for p in db.query(Permission).all()}
    for codename, description in ALL_PERMISSIONS.items():
        if codename not in existing_permissions:
            db.add(Permission(codename=codename, description=description))
    db.commit()

    # 2. –°–æ–∑–¥–∞–µ–º –†–æ–ª—å "Super-Admin" (–±–µ–∑ company_id)
    all_permissions_in_db = db.query(Permission).all()
    super_admin_role = Role(name="Super-Admin", company_id=None, permissions=all_permissions_in_db)
    db.add(super_admin_role)
    db.commit()

    # 3. –°–æ–∑–¥–∞–µ–º –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ "Super-Admin" (–≤–∞—Å)
    super_admin_employee = Employee(
        full_name=payload.full_name,
        password=payload.password,  
        is_active=True,
        role_id=super_admin_role.id,
        company_id=None,
        location_id=None
    )
    db.add(super_admin_employee)
    db.commit()

    return {"status": "ok", "message": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Super-Admin '{payload.full_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω."}


@app.post("/api/login", tags=["–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"], response_model=LoginResponse)
def login(payload: LoginPayload, db: Session = Depends(get_db)):
    """
    –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–í–ï–†–°–ò–Ø –° –ù–ê–î–ï–ñ–ù–û–ô –ó–ê–ì–†–£–ó–ö–û–ô –ü–†–ê–í)
    """
    employee = None
    company = None
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫–æ–¥ –∫–æ–º–ø–∞–Ω–∏–∏ –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    company_code_upper = payload.company_code.upper() if payload.company_code else None

    if company_code_upper == 'SUPER':
        # --- –í—Ö–æ–¥ –¥–ª—è –°–£–ü–ï–†-–ê–î–ú–ò–ù–ê ---
        employee = db.query(Employee).options(
            joinedload(Employee.role) # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–æ–ª—å
        ).filter(
            Employee.password == payload.password,
            Employee.company_id == None 
        ).first()
        if not employee:
            raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å Super-Admin.")
    
    else:
        # --- –í—Ö–æ–¥ –¥–ª—è –°–û–¢–†–£–î–ù–ò–ö–ê –ö–û–ú–ü–ê–ù–ò–ò ---
        if not company_code_upper:
            raise HTTPException(status_code=400, detail="–ù–µ —É–∫–∞–∑–∞–Ω –ö–æ–¥ –ö–æ–º–ø–∞–Ω–∏–∏.")
        
        company = db.query(Company).filter(Company.company_code == company_code_upper).first()
        if not company:
            raise HTTPException(status_code=404, detail=f"–ö–æ–º–ø–∞–Ω–∏—è —Å –∫–æ–¥–æ–º '{company_code_upper}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        
        if not company.is_active or (company.subscription_paid_until and company.subscription_paid_until < date.today()):
            raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.")

        # 1. –ù–∞—Ö–æ–¥–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ —Ä–æ–ª—å)
        employee = db.query(Employee).options(
            joinedload(Employee.role) 
        ).filter(
            Employee.password == payload.password,
            Employee.company_id == company.id, 
            Employee.is_active == True
        ).first()

        if not employee:
            raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")

    # --- –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ß–ê–°–¢–¨: –ù–ê–î–ï–ñ–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ü–†–ê–í ---
    # –ú—ã –Ω–∞—à–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –µ–≥–æ ID —Ä–æ–ª–∏ (employee.role_id).
    # –¢–µ–ø–µ—Ä—å –º—ã –æ—Ç–¥–µ–ª—å–Ω–æ –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –û–ë–™–ï–ö–¢ –†–û–õ–ò –∏ –ï–ì–û –ü–†–ê–í–ê
    
    permissions = []
    if employee.role_id:
        # 2. –ù–∞—Ö–æ–¥–∏–º –æ–±—ä–µ–∫—Ç —Ä–æ–ª–∏, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º permissions
        role_with_permissions = db.query(Role).options(
            joinedload(Role.permissions)
        ).filter(Role.id == employee.role_id).first()
        
        if role_with_permissions and role_with_permissions.permissions:
            permissions = [p.codename for p in role_with_permissions.permissions]
    # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

    print(f"[Login] –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {employee.full_name} (–†–æ–ª—å: {employee.role.name}) –≤–æ—à–µ–ª. –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∞–≤: {len(permissions)}")
    
    if 'open_close_shift' in permissions:
        print(f"[Login DEBUG] –ü—Ä–∞–≤–æ 'open_close_shift' –ù–ê–ô–î–ï–ù–û –¥–ª—è {employee.full_name}")
    else:
        print(f"[Login DEBUG] –ü—Ä–∞–≤–æ 'open_close_shift' –ù–ï –ù–ê–ô–î–ï–ù–û –¥–ª—è {employee.full_name}")


    return {
        "status": "ok", 
        "employee": {
            "id": employee.id, 
            "full_name": employee.full_name, 
            "role": employee.role.name, 
            "permissions": permissions, # <-- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–µ–∂–∏–µ –ø—Ä–∞–≤–∞ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
            "is_super_admin": (employee.company_id is None),
            "location_id": employee.location_id 
        },
        "company": {"id": company.id, "name": company.name, "company_code": company.company_code} if company else None
    }

# --- 5. –≠–ù–î–ü–û–ò–ù–¢–´: SUPER-ADMIN ---

@app.get("/api/superadmin/companies", tags=["Super-Admin"])
def get_all_companies(
    employee: Employee = Depends(get_super_admin),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–ø–∞–Ω–∏–π (–¥–ª—è Super-Admin)."""
    try:
        companies_orm = db.query(Company).order_by(Company.name).all()

        # --- –î–û–ë–ê–í–õ–ï–ù–û: –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π ---
        # –≠—Ç–æ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –≤–µ—Ä–Ω—É—Ç—å –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ response_model –≤—ã–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã
        companies_list = []
        for company in companies_orm:
            companies_list.append({
                "id": company.id,
                "name": company.name,
                "company_code": company.company_code,
                "is_active": company.is_active,
                "subscription_paid_until": company.subscription_paid_until.isoformat() if company.subscription_paid_until else None, # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                "contact_person": company.contact_person,
                "contact_phone": company.contact_phone,
                "created_at": company.created_at.isoformat(), # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É-–≤—Ä–µ–º—è
                "telegram_bot_token": company.telegram_bot_token,
                "telegram_bot_username": company.telegram_bot_username
            })
        # --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø ---

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        return companies_list

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        import traceback
        print(f"!!! –û—à–∏–±–∫–∞ –≤ get_all_companies:\n{traceback.format_exc()}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É 500
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π: {e}")
# --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

# --- –û–±–Ω–æ–≤–∏—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ ---
@app.post("/api/superadmin/companies", tags=["Super-Admin"], response_model=CompanyOut)
def create_company(
    payload: CompanyCreate, # –ú–æ–¥–µ–ª—å —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è –¥–ª—è –±–æ—Ç–∞
    employee: Employee = Depends(get_super_admin),
    db: Session = Depends(get_db)
):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é, –≤–∫–ª—é—á–∞—è –¥–∞–Ω–Ω—ã–µ –¥–ª—è –µ–µ Telegram-–±–æ—Ç–∞."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞ –∫–æ–º–ø–∞–Ω–∏–∏
    if not re.match(r'^[A-Z0-9_]{3,15}$', payload.company_code):
         raise HTTPException(status_code=400, detail="–ö–æ–¥ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. 3-15 –∑–Ω–∞–∫–æ–≤, —Ç–æ–ª—å–∫–æ A-Z, 0-9, _")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è
    if db.query(Company).filter(Company.name == payload.name).first():
        raise HTTPException(status_code=400, detail="–ö–æ–º–ø–∞–Ω–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞
    if db.query(Company).filter(Company.company_code == payload.company_code).first():
        raise HTTPException(status_code=400, detail="–ö–æ–º–ø–∞–Ω–∏—è —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    # –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    if payload.telegram_bot_token and db.query(Company).filter(Company.telegram_bot_token == payload.telegram_bot_token).first():
        raise HTTPException(status_code=400, detail="–ö–æ–º–ø–∞–Ω–∏—è —Å —Ç–∞–∫–∏–º Telegram Bot Token —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

    db.begin_nested() # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Company, –≤–∫–ª—é—á–∞—è –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
        new_company = Company(
            name=payload.name, company_code=payload.company_code,
            contact_person=payload.contact_person, contact_phone=payload.contact_phone,
            subscription_paid_until=payload.subscription_paid_until, is_active=True,
            # –î–û–ë–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
            telegram_bot_token=payload.telegram_bot_token, # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
            telegram_bot_username=payload.telegram_bot_username # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
        )
        db.add(new_company)
        db.flush() # –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏

        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ñ–∏–ª–∏–∞–ª
        main_location = Location(name="–ì–ª–∞–≤–Ω—ã–π —Ñ–∏–ª–∏–∞–ª", address="–ù–µ —É–∫–∞–∑–∞–Ω", company_id=new_company.id)
        db.add(main_location)
        db.flush() # –ü–æ–ª—É—á–∞–µ–º ID —Ñ–∏–ª–∏–∞–ª–∞

        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–∞–≤–∞, –∫—Ä–æ–º–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏—è–º–∏, –∏ —Å–æ–∑–¥–∞–µ–º —Ä–æ–ª—å "–í–ª–∞–¥–µ–ª–µ—Ü"
        owner_permissions = db.query(Permission).filter(
            Permission.codename.notin_(['manage_companies', 'impersonate_company'])
        ).all()
        owner_role = Role(name="–í–ª–∞–¥–µ–ª–µ—Ü", company_id=new_company.id, permissions=owner_permissions)
        db.add(owner_role)
        db.flush() # –ü–æ–ª—É—á–∞–µ–º ID —Ä–æ–ª–∏

        # –°–æ–∑–¥–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞-–≤–ª–∞–¥–µ–ª—å—Ü–∞
        owner_employee = Employee(
            full_name=payload.owner_full_name, password=payload.owner_password,
            is_active=True, role_id=owner_role.id,
            company_id=new_company.id, location_id=main_location.id # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Ñ–∏–ª–∏–∞–ª—É
        )
        db.add(owner_employee)

        # –°–æ–∑–¥–∞–µ–º —Ç–∏–ø—ã —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
        default_expense_types = ["–•–æ–∑. –Ω—É–∂–¥—ã", "–ó–∞—Ä–ø–ª–∞—Ç–∞", "–ê–≤–∞–Ω—Å", "–ê—Ä–µ–Ω–¥–∞", "–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã"]
        for exp_type_name in default_expense_types:
            db.add(ExpenseType(name=exp_type_name, company_id=new_company.id))

        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∞–¥—Ä–µ—Å, —Ç–µ–ª–µ—Ñ–æ–Ω) –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
        db.add(Setting(key='bishkek_office_address', value='–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω', company_id=new_company.id))
        db.add(Setting(key='contact_phone', value='–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω', company_id=new_company.id))

        db.commit() # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        db.refresh(new_company) # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –ë–î –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        print(f"INFO: –ö–æ–º–ø–∞–Ω–∏—è '{new_company.name}' (ID: {new_company.id}) —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
        return new_company

    except Exception as e:
        db.rollback() # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        import traceback
        print(f"!!! –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏:\n{traceback.format_exc()}") # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –æ—à–∏–±–∫—É
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â—É—é –æ—à–∏–±–∫—É —Å–µ—Ä–≤–µ—Ä–∞
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏: {e}")


# --- –û–±–Ω–æ–≤–∏—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ ---
@app.patch("/api/superadmin/companies/{company_id}", tags=["Super-Admin"], response_model=CompanyOut)
def update_company(
    company_id: int,
    payload: CompanyUpdate, # –ú–æ–¥–µ–ª—å —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è –¥–ª—è –±–æ—Ç–∞
    employee: Employee = Depends(get_super_admin),
    db: Session = Depends(get_db)
):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏, –≤–∫–ª—é—á–∞—è –¥–∞–Ω–Ω—ã–µ –µ–µ Telegram-–±–æ—Ç–∞."""
    # –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–ø–∞–Ω–∏—é –ø–æ ID
    company = db.query(Company).filter(Company.id == company_id).first()
    # –ï—Å–ª–∏ –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É 404
    if not company:
        raise HTTPException(status_code=404, detail="–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ payload, –∏—Å–∫–ª—é—á–∞—è –Ω–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è
    update_data = payload.dict(exclude_unset=True)
    print(f"INFO: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ ID {company_id}. –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {update_data}")

    # –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –ø—Ä–∏ –ò–ó–ú–ï–ù–ï–ù–ò–ò
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ —Ç–æ–∫–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    # –ò –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏–∏
    if 'telegram_bot_token' in update_data and update_data['telegram_bot_token'] != company.telegram_bot_token:
        new_token = update_data['telegram_bot_token']
        # –ï—Å–ª–∏ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –Ω–µ –ø—É—Å—Ç–æ–π (—Ç.–µ. –Ω–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞)
        if new_token:
            # –ò—â–µ–º –î–†–£–ì–£–Æ –∫–æ–º–ø–∞–Ω–∏—é —Å —Ç–∞–∫–∏–º –∂–µ —Ç–æ–∫–µ–Ω–æ–º
            existing_company_with_token = db.query(Company).filter(
                Company.telegram_bot_token == new_token,
                Company.id != company_id # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–º–ø–∞–Ω–∏—é –∏–∑ –ø–æ–∏—Å–∫–∞
            ).first()
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ –¥—Ä—É–≥–∞—è –∫–æ–º–ø–∞–Ω–∏—è —Å —Ç–∞–∫–∏–º —Ç–æ–∫–µ–Ω–æ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
            if existing_company_with_token:
                raise HTTPException(status_code=400, detail="–î—Ä—É–≥–∞—è –∫–æ–º–ø–∞–Ω–∏—è —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —ç—Ç–æ—Ç Telegram Bot Token.")
        else:
             # –ï—Å–ª–∏ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ null, —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
             update_data['telegram_bot_token'] = None # –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º None –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫ –æ–±—ä–µ–∫—Ç—É –∫–æ–º–ø–∞–Ω–∏–∏
    for key, value in update_data.items():
        # –û—Ç–¥–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (–µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ '' –∏–ª–∏ null)
        if key == 'telegram_bot_token' and not value:
             setattr(company, key, None)
             print(f"INFO: –ü–æ–ª–µ {key} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ None.")
        else:
             setattr(company, key, value)
             print(f"INFO: –ü–æ–ª–µ {key} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {value}.")

    try:
        db.commit() # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
        db.refresh(company) # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –ë–î
        print(f"INFO: –ö–æ–º–ø–∞–Ω–∏—è ID {company_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        return company # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    except Exception as e:
        db.rollback() # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
        import traceback
        print(f"!!! –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏ ID {company_id}:\n{traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏: {e}")

@app.delete("/api/superadmin/companies/{company_id}", tags=["Super-Admin"], status_code=status.HTTP_204_NO_CONTENT)
def delete_company(
    company_id: int,
    employee: Employee = Depends(get_super_admin),
    db: Session = Depends(get_db)
):
    """–£–¥–∞–ª—è–µ—Ç –∫–æ–º–ø–∞–Ω–∏—é –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ–π –¥–∞–Ω–Ω—ã–µ."""
    company = db.query(Company).filter(Company.id == company_id).first()
    if not company:
        raise HTTPException(status_code=404, detail="–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    # –ü–†–û–í–ï–†–ö–ê: –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é, –µ—Å–ª–∏ —É –Ω–µ–µ –µ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
    # (–∫—Ä–æ–º–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –í–ª–∞–¥–µ–ª—å—Ü–∞)
    employee_count = db.query(Employee).filter(Employee.company_id == company_id).count()
    if employee_count > 1: # –ë–æ–ª—å—à–µ, —á–µ–º 1 (–≤–ª–∞–¥–µ–ª–µ—Ü)
         raise HTTPException(status_code=400, detail=f"–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é '{company.name}', —Ç.–∫. –≤ –Ω–µ–π {employee_count} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ –∏—Ö.")
    elif employee_count == 1:
        # –£–¥–∞–ª—è–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–≤–ª–∞–¥–µ–ª—å—Ü–∞)
        owner = db.query(Employee).filter(Employee.company_id == company_id).first()
        if owner:
            db.delete(owner)

    # –î–û–ë–ê–í–ò–¢–¨: –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Ñ–∏–ª–∏–∞–ª—ã, —Ä–æ–ª–∏, –∫–ª–∏–µ–Ω—Ç—ã, –∑–∞–∫–∞–∑—ã –∏ —Ç.–¥.)
    # –≠—Ç–æ –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å "–º—É—Å–æ—Ä" –≤ –±–∞–∑–µ.
    # –ú—ã —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ –∫–∞—Å–∫–∞–¥–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º –≤ models.py –ø–æ–∑–∂–µ, —Å–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏–º —Å–∞–º—É –∫–æ–º–ø–∞–Ω–∏—é.

    # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º —Ä–æ–ª–∏ —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
    roles_to_delete = db.query(Role).filter(Role.company_id == company_id).all()
    for role in roles_to_delete:
        db.delete(role)

    # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º —Ñ–∏–ª–∏–∞–ª—ã —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
    locations_to_delete = db.query(Location).filter(Location.company_id == company_id).all()
    for loc in locations_to_delete:
        db.delete(loc)

    # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
    settings_to_delete = db.query(Setting).filter(Setting.company_id == company_id).all()
    for setting in settings_to_delete:
        db.delete(setting)

    # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º —Ç–∏–ø—ã —Ä–∞—Å—Ö–æ–¥–æ–≤
    exp_types_to_delete = db.query(ExpenseType).filter(ExpenseType.company_id == company_id).all()
    for exp_type in exp_types_to_delete:
        db.delete(exp_type)

    # TODO: –î–æ–±–∞–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ö–ª–∏–µ–Ω—Ç–æ–≤, –ó–∞–∫–∞–∑–æ–≤, –°–º–µ–Ω, –†–∞—Å—Ö–æ–¥–æ–≤ —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏

    db.delete(company)
    db.commit()
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 204 No Content, —Ç–∞–∫ –∫–∞–∫ –∫–æ–º–ø–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞
    return None

# --- 6. –≠–ù–î–ü–û–ò–ù–¢–´: –í–õ–ê–î–ï–õ–ï–¶ –ö–û–ú–ü–ê–ù–ò–ò (–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º) ---
# main.py (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø get_locations)

@app.get("/api/locations", tags=["–ü–µ—Ä—Å–æ–Ω–∞–ª (–í–ª–∞–¥–µ–ª–µ—Ü)", "Telegram Bot"], response_model=List[LocationOut])
def get_locations(
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–µ–ª–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ù–ï–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ú ---
    x_employee_id: Optional[str] = Header(None),
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–µ–ª–∞–µ–º query –ø–∞—Ä–∞–º–µ—Ç—Ä –ù–ï–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ú ---
    company_id_query: Optional[int] = Query(None, alias="company_id"),
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –í–°–ï —Ñ–∏–ª–∏–∞–ª—ã –∫–æ–º–ø–∞–Ω–∏–∏.
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–º–ø–∞–Ω–∏—é –ª–∏–±–æ –ø–æ X-Employee-ID (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏),
    –ª–∏–±–æ –ø–æ query –ø–∞—Ä–∞–º–µ—Ç—Ä—É company_id (–¥–ª—è –±–æ—Ç–∞/–õ–ö).
    """
    target_company_id: Optional[int] = None
    employee: Optional[Employee] = None

    print(f"[Get Locations] –ó–∞–ø—Ä–æ—Å —Ñ–∏–ª–∏–∞–ª–æ–≤. Header: {x_employee_id}, Query Param: {company_id_query}")

    # --- –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ó–∞–ø—Ä–æ—Å –∏–∑ –ê–¥–º–∏–Ω–∫–∏ (–µ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫) ---
    if x_employee_id:
        try:
            employee_id_int = int(x_employee_id)
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            employee = db.query(Employee).options(joinedload(Employee.role)).filter(
                Employee.id == employee_id_int,
                Employee.is_active == True
            ).first()
            if employee and employee.company_id:
                # –ï—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–æ–º–ø–∞–Ω–∏–∏, –±–µ—Ä–µ–º ID –µ–≥–æ –∫–æ–º–ø–∞–Ω–∏–∏
                target_company_id = employee.company_id
                print(f"[Get Locations] –ó–∞–ø—Ä–æ—Å –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ID={employee.id}, –ö–æ–º–ø–∞–Ω–∏—è ID={target_company_id}")
            elif employee:
                 # –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω, –Ω–æ –±–µ–∑ company_id (SuperAdmin?) - –µ–º—É —Ñ–∏–ª–∏–∞–ª—ã –Ω–µ –Ω—É–∂–Ω—ã
                 print(f"[Get Locations] –ó–∞–ø—Ä–æ—Å –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –±–µ–∑ –∫–æ–º–ø–∞–Ω–∏–∏ (ID={employee.id}). –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.")
                 return [] # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è SuperAdmin
            else:
                 # –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø–æ ID –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
                 print(f"[Get Locations] –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø–æ X-Employee-ID={x_employee_id} –Ω–µ –Ω–∞–π–¥–µ–Ω/–Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
                 # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É 401 —Å—Ä–∞–∑—É, –¥–∞–µ–º —à–∞–Ω—Å –≤—Ç–æ—Ä–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é (–¥–ª—è –±–æ—Ç–∞)

        except ValueError:
            print(f"[Get Locations] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç X-Employee-ID: {x_employee_id}")
            # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –¥–∞–µ–º —à–∞–Ω—Å –≤—Ç–æ—Ä–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é

    # --- –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ó–∞–ø—Ä–æ—Å –æ—Ç –ë–æ—Ç–∞/–õ–ö (company_id –≤ query) ---
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∫–æ–º–ø–∞–Ω–∏—è –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ò –ø–µ—Ä–µ–¥–∞–Ω company_id_query
    if target_company_id is None and company_id_query is not None:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–º–ø–∞–Ω–∏—è —Å —Ç–∞–∫–∏–º ID
        company_check = db.query(Company.id).filter(Company.id == company_id_query).first()
        if company_check:
            target_company_id = company_id_query
            print(f"[Get Locations] –ó–∞–ø—Ä–æ—Å –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID={target_company_id} (–∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞).")
        else:
            # –ï—Å–ª–∏ –∫–æ–º–ø–∞–Ω–∏—è –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            print(f"!!! [Get Locations] –ö–æ–º–ø–∞–Ω–∏—è ID={company_id_query} –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É 404
            raise HTTPException(status_code=404, detail=f"–ö–æ–º–ø–∞–Ω–∏—è —Å ID {company_id_query} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    # --- –ï—Å–ª–∏ –∫–æ–º–ø–∞–Ω–∏—é —Ç–∞–∫ –∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ---
    if target_company_id is None:
        print("!!! [Get Locations] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é –Ω–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É, –Ω–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É.")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É 401/400, —Ç.–∫. –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ, —á—å–∏ —Ñ–∏–ª–∏–∞–ª—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç—Å—è
        raise HTTPException(status_code=400, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ñ–∏–ª–∏–∞–ª–æ–≤ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç X-Employee-ID –∏–ª–∏ company_id).")

    # --- –ó–∞–ø—Ä–æ—Å —Ñ–∏–ª–∏–∞–ª–æ–≤ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ ---
    locations = db.query(Location).filter(Location.company_id == target_company_id).order_by(Location.name).all()
    print(f"INFO: –ó–∞–ø—Ä–æ—Å —Ñ–∏–ª–∏–∞–ª–æ–≤ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID {target_company_id}. –ù–∞–π–¥–µ–Ω–æ: {len(locations)}")
    return locations

@app.post("/api/locations", tags=["–ü–µ—Ä—Å–æ–Ω–∞–ª (–í–ª–∞–¥–µ–ª–µ—Ü)"], response_model=LocationOut)
def create_location(
    payload: LocationCreate,
    employee: Employee = Depends(get_company_owner),
    db: Session = Depends(get_db)
):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ñ–∏–ª–∏–∞–ª –¥–ª—è –¢–ï–ö–£–©–ï–ô –∫–æ–º–ø–∞–Ω–∏–∏."""
    new_location = Location(
        **payload.dict(),
        company_id=employee.company_id # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –∫–æ–º–ø–∞–Ω–∏–∏
    )
    db.add(new_location)
    db.commit()
    db.refresh(new_location)
    return new_location

# --- –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –ù–û–í–£–Æ –§–£–ù–ö–¶–ò–Æ ---
@app.patch("/api/locations/{location_id}", tags=["–ü–µ—Ä—Å–æ–Ω–∞–ª (–í–ª–∞–¥–µ–ª–µ—Ü)"], response_model=LocationOut)
def update_location(
    location_id: int,
    payload: LocationUpdate, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å LocationUpdate –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    employee: Employee = Depends(get_company_owner), # –¢–æ–ª—å–∫–æ –í–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å
    db: Session = Depends(get_db)
):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª–∏–∞–ª–∞ –¢–ï–ö–£–©–ï–ô –∫–æ–º–ø–∞–Ω–∏–∏."""
    # 1. –ù–∞—Ö–æ–¥–∏–º —Ñ–∏–ª–∏–∞–ª –ø–æ ID –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –æ–Ω –∫–æ–º–ø–∞–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –í–ª–∞–¥–µ–ª—å—Ü–∞
    location_to_update = db.query(Location).filter(
        Location.id == location_id,
        Location.company_id == employee.company_id
    ).first()

    # 2. –ï—Å–ª–∏ —Ñ–∏–ª–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É 404
    if not location_to_update:
        raise HTTPException(status_code=404, detail="–§–∏–ª–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")

    # 3. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ payload, –∏—Å–∫–ª—é—á–∞—è –Ω–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ (None)
    update_data = payload.dict(exclude_unset=True)
    print(f"INFO: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞ ID {location_id}. –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {update_data}")

    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ –æ–±–Ω–æ–≤–ª—è—Ç—å
    if not update_data:
         raise HTTPException(status_code=400, detail="–ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")

    # 5. –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫ –æ–±—ä–µ–∫—Ç—É —Ñ–∏–ª–∏–∞–ª–∞
    for key, value in update_data.items():
        setattr(location_to_update, key, value)
        print(f"INFO: –ü–æ–ª–µ {key} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {value}.")

    # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
    try:
        db.commit() # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        db.refresh(location_to_update) # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –ë–î
        print(f"INFO: –§–∏–ª–∏–∞–ª ID {location_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
        return location_to_update # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    except Exception as e:
        db.rollback() # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
        import traceback
        print(f"!!! –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª–∏–∞–ª–∞ ID {location_id}:\n{traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª–∏–∞–ª–∞: {e}")
# --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –§–£–ù–ö–¶–ò–ò ---

@app.get("/api/employees", tags=["–ü–µ—Ä—Å–æ–Ω–∞–ª (–í–ª–∞–¥–µ–ª–µ—Ü)"], response_model=List[EmployeeOut])
def get_employees(
    employee: Employee = Depends(get_company_owner),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∞–µ—Ç –í–°–ï–• —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¢–ï–ö–£–©–ï–ô –∫–æ–º–ø–∞–Ω–∏–∏."""
    employees = db.query(Employee).options(
        joinedload(Employee.role)
    ).filter(
        Employee.company_id == employee.company_id
    ).order_by(Employee.full_name).all()
    return employees

@app.post("/api/employees", tags=["–ü–µ—Ä—Å–æ–Ω–∞–ª (–í–ª–∞–¥–µ–ª–µ—Ü)"], response_model=EmployeeOut)
def create_employee(
    payload: EmployeeCreate,
    employee: Employee = Depends(get_company_owner),
    db: Session = Depends(get_db)
):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –¢–ï–ö–£–©–ï–ô –∫–æ–º–ø–∞–Ω–∏–∏."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ location_id –∏ role_id –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç —ç—Ç–æ–π –∂–µ –∫–æ–º–ø–∞–Ω–∏–∏
    loc = db.query(Location).filter(Location.id == payload.location_id, Location.company_id == employee.company_id).first()
    rol = db.query(Role).filter(Role.id == payload.role_id, Role.company_id == employee.company_id).first()
    if not loc or not rol:
        raise HTTPException(status_code=404, detail="–§–∏–ª–∏–∞–ª –∏–ª–∏ –î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")

    new_employee = Employee(
        **payload.dict(),
        company_id=employee.company_id # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –∫–æ–º–ø–∞–Ω–∏–∏
    )
    db.add(new_employee)
    db.commit()
    db.refresh(new_employee)
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–ª—å, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –≤ –æ—Ç–≤–µ—Ç–µ
    new_employee = db.query(Employee).options(joinedload(Employee.role)).get(new_employee.id)
    return new_employee

# main.py (–í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ @app.post("/employees", ...)
# ... (–ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ create_employee)

# --- –î–û–ë–ê–í–õ–ï–ù /api/employees/{id} ---
@app.patch("/api/employees/{employee_id}", tags=["–ü–µ—Ä—Å–æ–Ω–∞–ª (–í–ª–∞–¥–µ–ª–µ—Ü)"], response_model=EmployeeOut)
def update_employee(
    employee_id: int,
    payload: EmployeeUpdate,
    employee: Employee = Depends(get_company_owner),
    db: Session = Depends(get_db)
):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¢–ï–ö–£–©–ï–ô –∫–æ–º–ø–∞–Ω–∏–∏."""
    target_employee = db.query(Employee).options(joinedload(Employee.role)).filter(
        Employee.id == employee_id,
        Employee.company_id == employee.company_id
    ).first()

    if not target_employee:
        raise HTTPException(status_code=404, detail="–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")

    update_data = payload.dict(exclude_unset=True)

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –í–ª–∞–¥–µ–ª—å—Ü–∞
    if 'is_active' in update_data and update_data['is_active'] is False:
        if target_employee.role.name == '–í–ª–∞–¥–µ–ª–µ—Ü':
            active_owners_count = db.query(Employee).filter(
                Employee.company_id == employee.company_id,
                Employee.is_active == True,
                Employee.role.has(name='–í–ª–∞–¥–µ–ª–µ—Ü')
            ).count()
            if active_owners_count <= 1:
                raise HTTPException(status_code=400, detail="–ù–µ–ª—å–∑—è —É–≤–æ–ª–∏—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –í–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ–º–ø–∞–Ω–∏–∏.")

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ location_id –∏ role_id –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç —ç—Ç–æ–π –∂–µ –∫–æ–º–ø–∞–Ω–∏–∏
    if 'location_id' in update_data:
        loc = db.query(Location).filter(Location.id == update_data['location_id'], Location.company_id == employee.company_id).first()
        if not loc:
            raise HTTPException(status_code=404, detail="–£–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∏–ª–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")
        
    if 'role_id' in update_data:
        rol = db.query(Role).filter(Role.id == update_data['role_id'], Role.company_id == employee.company_id).first()
        if not rol:
            raise HTTPException(status_code=404, detail="–£–∫–∞–∑–∞–Ω–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")
        # –ó–∞–ø—Ä–µ—Ç —Å–º–µ–Ω—ã —Ä–æ–ª–∏ –í–ª–∞–¥–µ–ª—å—Ü–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ –º–µ–Ω—è–µ—Ç –µ–µ –Ω–∞ –¥—Ä—É–≥—É—é —Ä–æ–ª—å –í–ª–∞–¥–µ–ª—å—Ü–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
        if target_employee.role.name == '–í–ª–∞–¥–µ–ª–µ—Ü' and rol.name != '–í–ª–∞–¥–µ–ª–µ—Ü':
             raise HTTPException(status_code=400, detail="–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å '–í–ª–∞–¥–µ–ª–µ—Ü' –Ω–∞ –¥—Ä—É–≥—É—é —Ä–æ–ª—å.")


    # 3. –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    for key, value in update_data.items():
        setattr(target_employee, key, value)
    
    db.commit()
    db.refresh(target_employee)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–ª—å, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –≤ –æ—Ç–≤–µ—Ç–µ
    target_employee = db.query(Employee).options(joinedload(Employee.role)).get(target_employee.id)
    return target_employee


@app.get("/api/roles", tags=["–ü–µ—Ä—Å–æ–Ω–∞–ª (–í–ª–∞–¥–µ–ª–µ—Ü)"], response_model=List[RoleOut])
def get_roles(
    employee: Employee = Depends(get_company_owner),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∞–µ—Ç –í–°–ï —Ä–æ–ª–∏ –¢–ï–ö–£–©–ï–ô –∫–æ–º–ø–∞–Ω–∏–∏."""
    roles = db.query(Role).filter(
        Role.company_id == employee.company_id
    ).order_by(Role.name).all()
    return roles

@app.get("/api/permissions", tags=["–ü–µ—Ä—Å–æ–Ω–∞–ª (–í–ª–∞–¥–µ–ª–µ—Ü)"], response_model=List[PermissionOut])
def get_permissions(
    employee: Employee = Depends(get_company_owner),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∞–µ—Ç –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ (–≥–ª–æ–±–∞–ª—å–Ω—ã–µ) –ø—Ä–∞–≤–∞ –≤ —Å–∏—Å—Ç–µ–º–µ."""
    # –í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –º–æ–∂–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –ø—Ä–∞–≤–∞ Super-Admin
    permissions = db.query(Permission).filter(
        Permission.codename.notin_(['manage_companies', 'impersonate_company'])
    ).all()
    return permissions

    # === –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê ===

@app.post("/api/roles", tags=["–ü–µ—Ä—Å–æ–Ω–∞–ª (–í–ª–∞–¥–µ–ª–µ—Ü)"], response_model=RoleOut)
def create_role(
    payload: RoleBase, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å –¥–ª—è –∏–º–µ–Ω–∏
    employee: Employee = Depends(get_company_owner),
    db: Session = Depends(get_db)
):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è –¢–ï–ö–£–©–ï–ô –∫–æ–º–ø–∞–Ω–∏–∏."""
    if db.query(Role).filter(Role.name == payload.name, Role.company_id == employee.company_id).first():
        raise HTTPException(status_code=400, detail="–î–æ–ª–∂–Ω–æ—Å—Ç—å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")
    
    # –ü—Ä–∞–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–æ–∫–∞ –ø—É—Å—Ç—ã–µ
    new_role = Role(
        name=payload.name,
        company_id=employee.company_id # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –∫–æ–º–ø–∞–Ω–∏–∏
    )
    db.add(new_role)
    db.commit()
    db.refresh(new_role)
    return new_role

@app.delete("/api/roles/{role_id}", tags=["–ü–µ—Ä—Å–æ–Ω–∞–ª (–í–ª–∞–¥–µ–ª–µ—Ü)"], status_code=status.HTTP_204_NO_CONTENT)
def delete_role(
    role_id: int,
    employee: Employee = Depends(get_company_owner),
    db: Session = Depends(get_db)
):
    """–£–¥–∞–ª—è–µ—Ç —Ä–æ–ª—å –≤ –¢–ï–ö–£–©–ï–ô –∫–æ–º–ø–∞–Ω–∏–∏."""
    role_to_delete = db.query(Role).filter(
        Role.id == role_id,
        Role.company_id == employee.company_id # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ä–æ–ª—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
    ).first()

    if not role_to_delete:
        raise HTTPException(status_code=404, detail="–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")
    if role_to_delete.name == "–í–ª–∞–¥–µ–ª–µ—Ü":
        raise HTTPException(status_code=400, detail="–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ä–æ–ª—å '–í–ª–∞–¥–µ–ª–µ—Ü'.")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å —ç—Ç–æ–π —Ä–æ–ª—å—é
    assigned_employees = db.query(Employee).filter(Employee.role_id == role_id).count()
    if assigned_employees > 0:
        raise HTTPException(status_code=400, detail=f"–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å '{role_to_delete.name}', —Ç–∞–∫ –∫–∞–∫ –∫ –Ω–µ–π –ø—Ä–∏–≤—è–∑–∞–Ω–æ {assigned_employees} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")

    db.delete(role_to_delete)
    db.commit()
    return None # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 204 No Content

@app.get("/api/roles/{role_id}/permissions", tags=["–ü–µ—Ä—Å–æ–Ω–∞–ª (–í–ª–∞–¥–µ–ª–µ—Ü)"], response_model=List[int])
def get_role_permissions(
    role_id: int,
    employee: Employee = Depends(get_company_owner),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∞–µ—Ç ID –ø—Ä–∞–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ä–æ–ª–∏ –¢–ï–ö–£–©–ï–ô –∫–æ–º–ø–∞–Ω–∏–∏."""
    role = db.query(Role).options(joinedload(Role.permissions)).filter(
        Role.id == role_id,
        Role.company_id == employee.company_id
    ).first()
    if not role:
        raise HTTPException(status_code=404, detail="–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")
    
    return [p.id for p in role.permissions]


@app.put("/api/roles/{role_id}/permissions", tags=["–ü–µ—Ä—Å–æ–Ω–∞–ª (–í–ª–∞–¥–µ–ª–µ—Ü)"])
def update_role_permissions(
    role_id: int,
    payload: RolePermissionsUpdate, # –û–∂–∏–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –ø—Ä–∞–≤
    employee: Employee = Depends(get_company_owner),
    db: Session = Depends(get_db)
):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ä–æ–ª–∏ –¢–ï–ö–£–©–ï–ô –∫–æ–º–ø–∞–Ω–∏–∏."""
    role = db.query(Role).filter(
        Role.id == role_id,
        Role.company_id == employee.company_id
    ).first()
    if not role:
        raise HTTPException(status_code=404, detail="–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")
    if role.name == "–í–ª–∞–¥–µ–ª–µ—Ü":
         raise HTTPException(status_code=400, detail="–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –¥–ª—è —Ä–æ–ª–∏ '–í–ª–∞–¥–µ–ª–µ—Ü'.")

    # –ù–∞—Ö–æ–¥–∏–º –æ–±—ä–µ–∫—Ç—ã Permission –ø–æ ID –∏–∑ payload, –ù–û —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –í–ª–∞–¥–µ–ª—å—Ü—É
    allowed_permission_codenames = set(ALL_PERMISSIONS.keys()) - {'manage_companies', 'impersonate_company'}
    
    new_permissions = db.query(Permission).filter(
        Permission.id.in_(payload.permission_ids),
        Permission.codename.in_(allowed_permission_codenames) # –î–æ–ø. –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    ).all()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ ID –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
    if len(new_permissions) != len(set(payload.permission_ids)):
         print(f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ: {payload.permission_ids}, –ù–∞–π–¥–µ–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö: {[p.id for p in new_permissions]}")
         # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–∞–µ–º —Ç–æ, —á—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ

    role.permissions = new_permissions # SQLAlchemy —Å–∞–º —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è —Å many-to-many —Å–≤—è–∑—å—é
    db.commit()
    
    return {"status": "ok", "message": f"–î–æ—Å—Ç—É–ø—ã –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ '{role.name}' –æ–±–Ω–æ–≤–ª–µ–Ω—ã."}

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ù–∞—Å—Ç—Ä–æ–µ–∫ (–í–ª–∞–¥–µ–ª–µ—Ü) ---

@app.get("/api/settings", tags=["–ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–í–ª–∞–¥–µ–ª–µ—Ü)"], response_model=List[SettingOut])
def get_company_settings(
    employee: Employee = Depends(get_company_owner),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¢–ï–ö–£–©–ï–ô –∫–æ–º–ø–∞–Ω–∏–∏."""
    settings = db.query(Setting).filter(
        Setting.company_id == employee.company_id
    ).all()
    return settings

@app.put("/api/settings", tags=["–ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–í–ª–∞–¥–µ–ª–µ—Ü)"], response_model=List[SettingOut])
def update_company_settings(
    payload: SettingsUpdatePayload,
    employee: Employee = Depends(get_company_owner),
    db: Session = Depends(get_db)
):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç (—Å–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –∏–∑–º–µ–Ω—è–µ—Ç) –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¢–ï–ö–£–©–ï–ô –∫–æ–º–ø–∞–Ω–∏–∏."""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏
    existing_settings_db = db.query(Setting).filter(
        Setting.company_id == employee.company_id
    ).all()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    settings_map = {s.key: s for s in existing_settings_db}
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å–ª–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    for key, value in payload.settings.items():
        if key in settings_map:
            # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º
            settings_map[key].value = value
        else:
            # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–≤–∞—è, —Å–æ–∑–¥–∞–µ–º –µ–µ
            new_setting = Setting(
                key=key,
                value=value,
                company_id=employee.company_id
            )
            db.add(new_setting)
    
    try:
        db.commit()
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
        updated_settings = db.query(Setting).filter(
            Setting.company_id == employee.company_id
        ).all()
        return updated_settings
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

# === –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ===

# === –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê (–ö–õ–ò–ï–ù–¢–´) ===

# --- Pydantic –ú–æ–¥–µ–ª–∏ –¥–ª—è –ö–ª–∏–µ–Ω—Ç–æ–≤ ---
class ClientBase(BaseModel):
    full_name: str
    phone: str
    client_code_prefix: Optional[str] = None
    client_code_num: Optional[int] = None # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    status: Optional[str] = "–†–æ–∑–Ω–∏—Ü–∞"

class ClientCreate(ClientBase):
    pass # –í—Å–µ –ø–æ–ª—è —É–∂–µ –≤ ClientBase

class ClientUpdate(BaseModel):
    full_name: Optional[str] = None
    phone: Optional[str] = None
    client_code_prefix: Optional[str] = None
    client_code_num: Optional[int] = None
    status: Optional[str] = None
    telegram_chat_id: Optional[str] = None # –î–æ–±–∞–≤–∏–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–≤—è–∑–∫–∏ (—Ä–µ–¥–∫–æ –Ω—É–∂–Ω–æ)

class ClientOut(ClientBase):
    id: int
    company_id: int
    telegram_chat_id: Optional[str]
    created_at: datetime
    class Config:
        # –ó–ê–ú–ï–ù–ò–¢–¨ orm_mode –Ω–∞ from_attributes
        from_attributes = True

class BulkClientItem(BaseModel):
    full_name: str
    phone: str
    client_code: Optional[str] = None # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –¥–ª—è –≥–∏–±–∫–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–∞

class GenerateLKLinkResponse(BaseModel):
    link: str

# --- –ù–û–í–´–ï –ú–æ–¥–µ–ª–∏ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ë–æ—Ç–æ–º ---
class BotIdentifyPayload(BaseModel):
    company_id: int
    telegram_chat_id: str
    phone_number: Optional[str] = None

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ö–ª–∏–µ–Ω—Ç–æ–≤ ---

@app.get("/api/clients", tags=["–ö–ª–∏–µ–Ω—Ç—ã (–í–ª–∞–¥–µ–ª–µ—Ü)"], response_model=List[ClientOut])
def get_clients(
    employee: Employee = Depends(get_current_company_employee), # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∞–µ—Ç –í–°–ï–• –∫–ª–∏–µ–Ω—Ç–æ–≤ –¢–ï–ö–£–©–ï–ô –∫–æ–º–ø–∞–Ω–∏–∏."""
    clients = db.query(Client).filter(
        Client.company_id == employee.company_id
    ).order_by(Client.full_name).all()
    return clients

# main.py (–î–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç get_company_owner)

@app.post("/api/clients", tags=["–ö–ª–∏–µ–Ω—Ç—ã (–í–ª–∞–¥–µ–ª–µ—Ü)"], response_model=ClientOut)
def create_client(
    payload: ClientCreate,
    employee: Employee = Depends(get_company_owner),
    db: Session = Depends(get_db)
):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –í–ù–£–¢–†–ò –∫–æ–º–ø–∞–Ω–∏–∏
    if db.query(Client).filter(Client.phone == payload.phone, Client.company_id == employee.company_id).first():
        raise HTTPException(status_code=400, detail="–ö–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –∫–æ–¥–∞ –∫–ª–∏–µ–Ω—Ç–∞ –í–ù–£–¢–†–ò –∫–æ–º–ø–∞–Ω–∏–∏ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
    if payload.client_code_num and db.query(Client).filter(Client.client_code_num == payload.client_code_num, Client.company_id == employee.company_id).first():
        raise HTTPException(status_code=400, detail=f"–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–æ–¥ {payload.client_code_num} —É–∂–µ –∑–∞–Ω—è—Ç –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")

    # === –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ê–í–¢–û-–ì–ï–ù–ï–†–ê–¶–ò–ò –ö–û–î–ê (—Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏) ===
    if payload.client_code_num is None:
        # 1. –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –î–õ–Ø –≠–¢–û–ô –ö–û–ú–ü–ê–ù–ò–ò
        max_code_result = db.query(
            func.max(Client.client_code_num)
        ).filter(
            Client.company_id == employee.company_id
        ).scalar()
        
        # 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥: +1 –∫ –º–∞–∫—Å–∏–º—É–º—É, –∏–ª–∏ 1001, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ—Ç
        payload.client_code_num = (max_code_result + 1) if max_code_result else 1001 
    # === –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ===

    if payload.client_code_prefix is None:
         payload.client_code_prefix = "KB" # –ü—Ä–µ—Ñ–∏–∫—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    new_client = Client(
        **payload.dict(),
        company_id=employee.company_id # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –∫–æ–º–ø–∞–Ω–∏–∏
    )
    db.add(new_client)
    db.commit()
    db.refresh(new_client)
    return new_client

@app.patch("/api/clients/{client_id}", tags=["–ö–ª–∏–µ–Ω—Ç—ã (–í–ª–∞–¥–µ–ª–µ—Ü)"], response_model=ClientOut)
def update_client(
    client_id: int,
    payload: ClientUpdate,
    employee: Employee = Depends(get_company_owner),
    db: Session = Depends(get_db)
):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –¢–ï–ö–£–©–ï–ô –∫–æ–º–ø–∞–Ω–∏–∏."""
    client = db.query(Client).filter(
        Client.id == client_id,
        Client.company_id == employee.company_id # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –∏–∑ —Ç–æ–π –∂–µ –∫–æ–º–ø–∞–Ω–∏–∏
    ).first()
    if not client:
        raise HTTPException(status_code=404, detail="–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")

    update_data = payload.dict(exclude_unset=True)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    if 'phone' in update_data and update_data['phone'] != client.phone:
        if db.query(Client).filter(Client.phone == update_data['phone'], Client.company_id == employee.company_id).first():
            raise HTTPException(status_code=400, detail="–î—Ä—É–≥–æ–π –∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    if 'client_code_num' in update_data and update_data['client_code_num'] != client.client_code_num:
         if update_data['client_code_num'] and db.query(Client).filter(Client.client_code_num == update_data['client_code_num'], Client.company_id == employee.company_id).first():
             raise HTTPException(status_code=400, detail=f"–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–æ–¥ {update_data['client_code_num']} —É–∂–µ –∑–∞–Ω—è—Ç –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")

    for key, value in update_data.items():
        setattr(client, key, value)

    db.commit()
    db.refresh(client)
    return client

@app.delete("/api/clients/{client_id}", tags=["–ö–ª–∏–µ–Ω—Ç—ã (–í–ª–∞–¥–µ–ª–µ—Ü)"], status_code=status.HTTP_204_NO_CONTENT)
def delete_client(
    client_id: int,
    employee: Employee = Depends(get_company_owner),
    db: Session = Depends(get_db)
):
    """–£–¥–∞–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –¢–ï–ö–£–©–ï–ô –∫–æ–º–ø–∞–Ω–∏–∏."""
    client = db.query(Client).filter(
        Client.id == client_id,
        Client.company_id == employee.company_id
    ).first()
    if not client:
        raise HTTPException(status_code=404, detail="–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")

    # –ü–†–û–í–ï–†–ö–ê: –ï—Å—Ç—å –ª–∏ —É –∫–ª–∏–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ (–Ω–µ –≤—ã–¥–∞–Ω–Ω—ã–µ) –∑–∞–∫–∞–∑—ã?
    active_orders_count = db.query(Order).filter(
        Order.client_id == client_id,
        Order.status != "–í—ã–¥–∞–Ω" # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç—É—Å "–í—ã–¥–∞–Ω" –∫–∞–∫ –ø—Ä–∏–∑–Ω–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ
    ).count()

    if active_orders_count > 0:
        raise HTTPException(status_code=400, detail=f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞, —Ç–∞–∫ –∫–∞–∫ —É –Ω–µ–≥–æ –µ—Å—Ç—å {active_orders_count} –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")

    # TODO: –ü–æ–¥—É–º–∞—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª—è—Ç—å –ò–°–¢–û–†–ò–Æ –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
    # –ü–æ–∫–∞ —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–∞, –∑–∞–∫–∞–∑—ã –æ—Å—Ç–∞–Ω—É—Ç—Å—è –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ (–∏–ª–∏ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ).
    # –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ù–ï —É–¥–∞–ª—è—Ç—å –∑–∞–∫–∞–∑—ã, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è–ª–∞—Å—å –∏—Å—Ç–æ—Ä–∏—è.

    db.delete(client)
    db.commit()
    return None

@app.get("/api/clients/search", tags=["–ö–ª–∏–µ–Ω—Ç—ã (–í–ª–∞–¥–µ–ª–µ—Ü)"], response_model=List[ClientOut])
def search_clients(
    q: str = Query(..., min_length=1), # –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –ø—É—Å—Ç—ã–º
    employee: Employee = Depends(get_company_owner),
    db: Session = Depends(get_db)
):
    """–ò—â–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏, —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ –∫–æ–¥—É –í–ù–£–¢–†–ò –¢–ï–ö–£–©–ï–ô –∫–æ–º–ø–∞–Ω–∏–∏."""
    search_term = f"%{q.lower()}%" # –ü–æ–∏—Å–∫ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
    
    # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –∏–º–µ–Ω–∏, —Ç–µ–ª–µ—Ñ–æ–Ω–µ –ò–õ–ò –∫–æ–¥–µ (–ø—Ä–µ—Ñ–∏–∫—Å + –Ω–æ–º–µ—Ä)
    clients = db.query(Client).filter(
        Client.company_id == employee.company_id, # –¢–æ–ª—å–∫–æ –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
        or_(
            func.lower(Client.full_name).ilike(search_term),
            Client.phone.ilike(search_term),
            (func.lower(Client.client_code_prefix) + func.cast(Client.client_code_num, String)).ilike(search_term)
        )
    ).limit(15).all() # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    
    return clients

@app.post("/api/clients/{client_id}/generate_lk_link", tags=["–ö–ª–∏–µ–Ω—Ç—ã (–í–ª–∞–¥–µ–ª–µ—Ü)"], response_model=GenerateLKLinkResponse)
def generate_lk_link_for_client(
    client_id: int,
    employee: Employee = Depends(get_company_owner),
    db: Session = Depends(get_db)
):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –¢–ï–ö–£–©–ï–ô –∫–æ–º–ø–∞–Ω–∏–∏."""
    client = db.query(Client).filter(
        Client.id == client_id,
        Client.company_id == employee.company_id
    ).first()
    if not client:
        raise HTTPException(status_code=404, detail="–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω (–º–æ–∂–Ω–æ —É—Å–ª–æ–∂–Ω–∏—Ç—å –¥–ª—è –±–æ–ª—å—à–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
    # –§–æ—Ä–º–∞—Ç: CLIENT-<client_id>-COMPANY-<company_id>-SECRET
    secret_token = f"CLIENT-{client.id}-COMPANY-{employee.company_id}-SECRET"  
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π URL –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –ø–æ—Ä—Ç–∞–ª–∞ (–µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω –≤ .env, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É)
    # –í–∞–∂–Ω–æ: –≠—Ç–æ—Ç URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –ö–õ–ò–ï–ù–¢–ê–ú –∏–∑–≤–Ω–µ!
    client_portal_base_url = os.getenv("CLIENT_PORTAL_URL", "http://–í–ê–®_–î–û–ú–ï–ù_–ò–õ–ò_IP/lk.html")  
    
    link = f"{client_portal_base_url}?token={secret_token}"
    return {"link": link}


# === –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê (–ò–ú–ü–û–†–¢ –ö–õ–ò–ï–ù–¢–û–í) ===

# –ú–æ–¥–µ–ª—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞
class BulkImportResponse(BaseModel):
    status: str
    message: str
    created_clients: int
    errors: List[str]
    warnings: List[str]  

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å BulkClientItem, –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –µ—Å—Ç—å

@app.post("/api/clients/bulk_import", tags=["–ö–ª–∏–µ–Ω—Ç—ã (–í–ª–∞–¥–µ–ª–µ—Ü)"], response_model=BulkImportResponse)
def bulk_import_clients(
    clients_data: List[BulkClientItem], # FastAPI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç JSON-–º–∞—Å—Å–∏–≤
    employee: Employee = Depends(get_company_owner),
    db: Session = Depends(get_db)
):
    """–ú–∞—Å—Å–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ Excel) –¥–ª—è –¢–ï–ö–£–©–ï–ô –∫–æ–º–ø–∞–Ω–∏–∏."""
    print(f"[Import Clients] –ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {employee.company_id}. –ü–æ–ª—É—á–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(clients_data)}") # –õ–æ–≥ –Ω–∞—á–∞–ª–∞
    created_count = 0
    errors = []
    warnings = []

    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï–• —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≠–¢–û–ô –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    try:
        existing_clients_in_company = db.query(Client).filter(Client.company_id == employee.company_id).all()
        existing_phones = {c.phone for c in existing_clients_in_company} # –ò—Å–ø–æ–ª—å–∑—É–µ–º set –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        existing_codes = {c.client_code_num for c in existing_clients_in_company if c.client_code_num is not None} # –ò—Å–ø–æ–ª—å–∑—É–µ–º set
        print(f"[Import Clients] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(existing_phones)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏ {len(existing_codes)} –∫–æ–¥–æ–≤.") # –õ–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏
    except Exception as e_load:
        print(f"!!! [Import Clients] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {e_load}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –∏–º–ø–æ—Ä—Ç—É: {e_load}")

    # --- –ù–∞—á–∞–ª–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∏–º–ø–æ—Ä—Ç–∞ ---
    for index, item in enumerate(clients_data): # –î–æ–±–∞–≤–ª—è–µ–º index –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        print(f"\n[Import Clients] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ {index + 1}: {item.dict()}") # –õ–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏
        try: # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ö–ê–ñ–î–û–ô —Å—Ç—Ä–æ–∫–∏ –≤ try...except
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–æ–ª–µ–π
            if not item.full_name or not item.phone:
                errors.append(f"–°—Ç—Ä–æ–∫–∞ {index + 1}: –ü—Ä–æ–ø—É—â–µ–Ω–∞ - –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –§–ò–û –∏–ª–∏ –¢–µ–ª–µ—Ñ–æ–Ω.")
                print(f"[Import Clients] –°—Ç—Ä–æ–∫–∞ {index + 1}: –ü—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–µ—Ç –§–ò–û/–¢–µ–ª–µ—Ñ–æ–Ω–∞).") # –õ–æ–≥ –ø—Ä–æ–ø—É—Å–∫–∞
                continue # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ

            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            cleaned_phone = re.sub(r'\D', '', str(item.phone)) # –£–¥–∞–ª—è–µ–º –≤—Å—ë, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
            if not cleaned_phone:
                 errors.append(f"–°—Ç—Ä–æ–∫–∞ {index + 1} ('{item.full_name}'): –ü—Ä–æ–ø—É—â–µ–Ω–∞ - –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ '{item.phone}'.")
                 print(f"[Import Clients] –°—Ç—Ä–æ–∫–∞ {index + 1}: –ü—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω).") # –õ–æ–≥ –ø—Ä–æ–ø—É—Å–∫–∞
                 continue

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –í–ù–£–¢–†–ò –∫–æ–º–ø–∞–Ω–∏–∏ (–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ —ç—Ç–æ–º –∏–º–ø–æ—Ä—Ç–µ)
            if cleaned_phone in existing_phones:
                warnings.append(f"–°—Ç—Ä–æ–∫–∞ {index + 1} ('{item.full_name}'): –ö–ª–∏–µ–Ω—Ç —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º {cleaned_phone} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–ø—Ä–æ–ø—É—â–µ–Ω).")
                print(f"[Import Clients] –°—Ç—Ä–æ–∫–∞ {index + 1}: –ü—Ä–æ–ø—É—â–µ–Ω–∞ (–¥—É–±–ª–∏–∫–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {cleaned_phone}).") # –õ–æ–≥ –ø—Ä–æ–ø—É—Å–∫–∞
                continue

            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞ (–ø–æ–∫–∞ –±–µ–∑ –∫–æ–¥–∞)
            new_client = Client(
                full_name=item.full_name,
                phone=cleaned_phone,
                company_id=employee.company_id # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –∫–æ–º–ø–∞–Ω–∏–∏
            )
            print(f"[Import Clients] –°—Ç—Ä–æ–∫–∞ {index + 1}: –û–±—ä–µ–∫—Ç Client —Å–æ–∑–¥–∞–Ω –¥–ª—è '{item.full_name}' / {cleaned_phone}.") # –õ–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞

            # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –∫–ª–∏–µ–Ω—Ç–∞ ---
            parsed_prefix = None
            parsed_num = None
            if item.client_code:
                code_str = str(item.client_code).strip()
                print(f"[Import Clients] –°—Ç—Ä–æ–∫–∞ {index + 1}: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ '{code_str}'.") # –õ–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–∞
                if code_str:
                    match_prefix = re.match(r'^([a-zA-Z]+)', code_str)
                    match_num = re.search(r'(\d+)$', code_str)
                    temp_prefix = "KB" # –ü—Ä–µ—Ñ–∏–∫—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    if match_prefix: temp_prefix = match_prefix.group(1).upper()

                    if match_num:
                        try:
                            num_val = int(match_num.group(1))
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –∫–æ–¥–∞ –í–ù–£–¢–†–ò –∫–æ–º–ø–∞–Ω–∏–∏ (–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö)
                            if num_val in existing_codes:
                                warnings.append(f"–°—Ç—Ä–æ–∫–∞ {index + 1} ('{item.full_name}'): –ö–æ–¥ '{num_val}' —É–∂–µ –∑–∞–Ω—è—Ç –∏ –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω.")
                                print(f"[Import Clients] –°—Ç—Ä–æ–∫–∞ {index + 1}: –ö–æ–¥ {num_val} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω (–¥—É–±–ª–∏–∫–∞—Ç).") # –õ–æ–≥
                            else:
                                parsed_num = num_val # –ö–æ–¥ —É–Ω–∏–∫–∞–ª–µ–Ω
                                parsed_prefix = temp_prefix # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∏–ª–∏ KB
                                print(f"[Import Clients] –°—Ç—Ä–æ–∫–∞ {index + 1}: –ö–æ–¥ {parsed_prefix}{parsed_num} —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.") # –õ–æ–≥
                        except ValueError:
                             warnings.append(f"–°—Ç—Ä–æ–∫–∞ {index + 1} ('{item.full_name}'): –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä –≤ –∫–æ–¥–µ '{code_str}'. –ö–æ–¥ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω.")
                             print(f"[Import Clients] –°—Ç—Ä–æ–∫–∞ {index + 1}: –û—à–∏–±–∫–∞ ValueError –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –Ω–æ–º–µ—Ä–∞ –∫–æ–¥–∞ '{code_str}'.") # –õ–æ–≥
                    else:
                         warnings.append(f"–°—Ç—Ä–æ–∫–∞ {index + 1} ('{item.full_name}'): –ù–µ –Ω–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä –≤ –∫–æ–¥–µ '{code_str}'. –ö–æ–¥ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω.")
                         print(f"[Import Clients] –°—Ç—Ä–æ–∫–∞ {index + 1}: –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–¥–µ '{code_str}'.") # –õ–æ–≥
                else:
                     warnings.append(f"–°—Ç—Ä–æ–∫–∞ {index + 1} ('{item.full_name}'): –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ client_code. –ö–æ–¥ –Ω–µ –ø—Ä–∏—Å–≤–æ–µ–Ω.")
                     print(f"[Import Clients] –°—Ç—Ä–æ–∫–∞ {index + 1}: –ü—É—Å—Ç–æ–π client_code.") # –õ–æ–≥
            else:
                 print(f"[Import Clients] –°—Ç—Ä–æ–∫–∞ {index + 1}: –ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω.") # –õ–æ–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∫–æ–¥–∞

            # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –∫–æ–¥ (–∏–ª–∏ None)
            new_client.client_code_prefix = parsed_prefix
            new_client.client_code_num = parsed_num
            # --- –ö–æ–Ω–µ—Ü –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–∞ ---

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–µ—Å—Å–∏—é SQLAlchemy
            db.add(new_client)
            print(f"[Import Clients] –°—Ç—Ä–æ–∫–∞ {index + 1}: db.add(new_client) –≤—ã–ø–æ–ª–Ω–µ–Ω.") # –õ–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏—é

            # –û–±–Ω–æ–≤–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫ –í –≠–¢–û–ú –ñ–ï –ò–ú–ü–û–†–¢–ï
            existing_phones.add(cleaned_phone)
            if parsed_num is not None:
                 existing_codes.add(parsed_num)

            created_count += 1 # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö (–Ω–æ –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö)

            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é (flush), —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ë–î —Ä–∞–Ω—å—à–µ
            if created_count % 100 == 0:
                print(f"[Import Clients] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ db.flush() –ø–æ—Å–ª–µ {created_count} –∫–ª–∏–µ–Ω—Ç–æ–≤...") # –õ–æ–≥ flush
                try:
                    db.flush() # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã INSERT/UPDATE –≤ –ë–î, –Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                    print(f"[Import Clients] –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π db.flush() —É—Å–ø–µ—à–µ–Ω.") # –õ–æ–≥ —É—Å–ø–µ—Ö–∞ flush
                except Exception as e_flush:
                     db.rollback() # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –í–°–Æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ flush
                     print(f"!!! [Import Clients] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–º db.flush() –Ω–∞ —Å—Ç—Ä–æ–∫–µ ~{index + 1}: {e_flush}") # –õ–æ–≥ –æ—à–∏–±–∫–∏ flush
                     print(traceback.format_exc()) # –ü–µ—á–∞—Ç–∞–µ–º traceback –æ—à–∏–±–∫–∏
                     errors.append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –±–ª–æ–∫–∞ ~{created_count}: {e_flush}")
                     # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç –ø—Ä–∏ —Å–µ—Ä—å–µ–∑–Ω–æ–π –æ—à–∏–±–∫–µ –∑–∞–ø–∏—Å–∏
                     break # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ for

        except Exception as e_row: # –õ–æ–≤–∏–º –õ–Æ–ë–£–Æ –¥—Ä—É–≥—É—é –æ—à–∏–±–∫—É –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏
             print(f"!!! [Import Clients] –ù–ï–û–ñ–ò–î–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ {index + 1}: {e_row}") # –õ–æ–≥ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–∏
             print(traceback.format_exc()) # –ü–µ—á–∞—Ç–∞–µ–º traceback –æ—à–∏–±–∫–∏
             errors.append(f"–°—Ç—Ä–æ–∫–∞ {index + 1}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ - {e_row}")
             # –†–µ—à–∞–µ–º, –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –ª–∏ –∏–º–ø–æ—Ä—Ç (–º–æ–∂–Ω–æ continue, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞)
             # continue # –ü–æ–∫–∞ –ø—Ä–æ–ø—É—Å—Ç–∏–º —Å—Ç—Ä–æ–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
             # –ò–ª–∏ –ø—Ä–µ—Ä–≤–∞—Ç—å, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–µ—Ä—å–µ–∑–Ω–∞—è:
             # break

    # --- –ö–æ–Ω–µ—Ü –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∏–º–ø–æ—Ä—Ç–∞ ---

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç (–µ—Å–ª–∏ —Ü–∏–∫–ª –Ω–µ –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω –æ—à–∏–±–∫–æ–π flush)
    if not errors or "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö" not in " ".join(errors): # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏
        print(f"\n[Import Clients] –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π db.commit() –¥–ª—è {created_count} –∫–ª–∏–µ–Ω—Ç–æ–≤...") # –õ–æ–≥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ commit
        try:
            db.commit() # –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, –¥–µ–ª–∞—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º–∏
            print(f"[Import Clients] –§–∏–Ω–∞–ª—å–Ω—ã–π db.commit() —É—Å–ø–µ—à–µ–Ω.") # –õ–æ–≥ —É—Å–ø–µ—Ö–∞ commit
        except Exception as e_commit:
            db.rollback() # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ commit
            print(f"!!! [Import Clients] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º db.commit(): {e_commit}") # –õ–æ–≥ –æ—à–∏–±–∫–∏ commit
            print(traceback.format_exc()) # –ü–µ—á–∞—Ç–∞–µ–º traceback –æ—à–∏–±–∫–∏
            # –ï—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–º–º–∏—Ç–µ, –≤–æ–∑–º–æ–∂–Ω–æ, —á–∞—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–ø–∏—Å–∞–ª–∞—Å—å
            errors.append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏: {e_commit}. –í–æ–∑–º–æ–∂–Ω–æ, —á–∞—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ –±—ã–ª–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞.")
            # –û–±–Ω—É–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤—Å—ë –∑–∞–ø–∏—Å–∞–ª–æ—Å—å
            created_count = 0
            print(f"[Import Clients] –°—á–µ—Ç—á–∏–∫ created_count —Å–±—Ä–æ—à–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ commit.") # –õ–æ–≥ —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = {
        "status": "ok",
        "message": "–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.",
        "created_clients": created_count,
        "errors": errors,
        "warnings": warnings
    }
    print(f"[Import Clients] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}") # –õ–æ–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    return result

# === –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê (–ò–ú–ü–û–†–¢ –ö–õ–ò–ï–ù–¢–û–í) ===
# === –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê (–ö–õ–ò–ï–ù–¢–´) ===

# === –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê (–ó–ê–ö–ê–ó–´) ===

# --- Pydantic –ú–æ–¥–µ–ª–∏ –¥–ª—è –ó–∞–∫–∞–∑–æ–≤ ---

# –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –∑–∞–∫–∞–∑–∞ (–¥–ª—è –≤—ã–≤–æ–¥–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
class OrderBase(BaseModel):
    track_code: str
    status: Optional[str] = "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
    purchase_type: str = "–î–æ—Å—Ç–∞–≤–∫–∞" # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –î–æ—Å—Ç–∞–≤–∫–∞
    comment: Optional[str] = None
    party_date: Optional[date] = None # –¢–µ–ø–µ—Ä—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏

    # –ü–æ–ª—è –¥–ª—è –≤—ã–∫—É–ø–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ)
    buyout_item_cost_cny: Optional[float] = None
    buyout_commission_percent: Optional[float] = 10.0 # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10%
    buyout_rate_for_client: Optional[float] = None
    buyout_actual_rate: Optional[float] = None # –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∑–∂–µ

    # –ü–æ–ª—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ)
    calculated_weight_kg: Optional[float] = None
    calculated_price_per_kg_usd: Optional[float] = None
    calculated_exchange_rate_usd: Optional[float] = None
    calculated_final_cost_som: Optional[float] = None

# –ú–æ–¥–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ (—Ç—Ä–µ–±—É–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ–º–ø–∞–Ω–∏–∏, —Ñ–∏–ª–∏–∞–ª–∞)
class OrderCreate(OrderBase):
    client_id: int
    company_id: int # –î–û–ë–ê–í–õ–ï–ù–û: ID –∫–æ–º–ø–∞–Ω–∏–∏, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∑–∞–∫–∞–∑
    location_id: int # –î–û–ë–ê–í–õ–ï–ù–û: ID —Ñ–∏–ª–∏–∞–ª–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∑–∞–∫–∞–∑
    # purchase_type —É–∂–µ –µ—Å—Ç—å –≤ OrderBase
    # track_code —É–∂–µ –µ—Å—Ç—å –≤ OrderBase
    # comment —É–∂–µ –µ—Å—Ç—å –≤ OrderBase
    # party_date —É–∂–µ –µ—Å—Ç—å –≤ OrderBase
    # –ü–æ–ª—è –≤—ã–∫—É–ø–∞ —É–∂–µ –µ—Å—Ç—å –≤ OrderBase
# --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

# –ú–æ–¥–µ–ª—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
class OrderUpdate(BaseModel):
    # –ü–æ–∑–≤–æ–ª—è–µ–º –º–µ–Ω—è—Ç—å –ø–æ—á—Ç–∏ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    track_code: Optional[str] = None
    status: Optional[str] = None
    purchase_type: Optional[str] = None
    comment: Optional[str] = None
    party_date: Optional[date] = None
    client_id: Optional[int] = None # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–º–µ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
    location_id: Optional[int] = None

    # –ü–æ–ª—è –≤—ã–∫—É–ø–∞
    buyout_item_cost_cny: Optional[float] = None
    buyout_commission_percent: Optional[float] = None
    buyout_rate_for_client: Optional[float] = None
    buyout_actual_rate: Optional[float] = None

    # –ü–æ–ª—è —Ä–∞—Å—á–µ—Ç–∞ (—ç—Ç–∏ –ø–æ–ª—è –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ /calculate)
    # calculated_weight_kg: Optional[float] = None
    # ...

# –ú–æ–¥–µ–ª—å –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–∞–∫–∞–∑–∞ (–≤–∫–ª—é—á–∞—è –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞)
class OrderOut(OrderBase):
    id: int
    company_id: int
    client: ClientOut # –í–ª–æ–∂–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –∫–ª–∏–µ–Ω—Ç–∞
    created_at: datetime
    issued_at: Optional[datetime] # –ü–æ–ª—è –¥–ª—è –≤—ã–¥–∞–Ω–Ω—ã—Ö
    weight_kg: Optional[float]
    final_cost_som: Optional[float]

    class Config:
        orm_mode = True

# –ú–æ–¥–µ–ª–∏ –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
class BulkOrderItem(BaseModel): # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ò–ú–ü–û–†–¢–ê
    track_code: str
    client_code: Optional[str] = None # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –∫–æ–¥—É
    phone: Optional[str] = None      # –ò–õ–ò –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    comment: Optional[str] = None
    purchase_type: Optional[str] = "–î–æ—Å—Ç–∞–≤–∫–∞" # –¢–∏–ø –∑–∞–∫–∞–∑–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤—ã–∫—É–ø–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
    buyout_item_cost_cny: Optional[float] = None
    buyout_rate_for_client: Optional[float] = None
    buyout_commission_percent: Optional[float] = 10.0
    # party_date –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ

class BulkOrderImportPayload(BaseModel):
    orders_data: List[BulkOrderItem]
    party_date: Optional[date] = None # –û–±—â–∞—è –¥–∞—Ç–∞ –ø–∞—Ä—Ç–∏–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
    location_id: Optional[int] = None

# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞, –¥–∞—Ç—ã, —É–¥–∞–ª–µ–Ω–∏—è
class BulkActionPayload(BaseModel):
    action: str # 'update_status', 'update_party_date', 'delete', 'buyout', 'revert'
    order_ids: List[int]
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç action
    new_status: Optional[str] = None
    new_party_date: Optional[date] = None
    buyout_actual_rate: Optional[float] = None
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –æ–ø–∞—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (—É–¥–∞–ª–µ–Ω–∏–µ, —Å–º–µ–Ω–∞ –¥–∞—Ç—ã)
    password: Optional[str] = None # –ë—É–¥–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–∞—Ä–æ–ª—å –í–ª–∞–¥–µ–ª—å—Ü–∞

# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
class CalculateOrderItem(BaseModel):
    order_id: int
    weight_kg: float = Field(..., gt=0)
class CalculatePayload(BaseModel):
    orders: List[CalculateOrderItem] # –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å –∏—Ö –≤–µ—Å–æ–º
    price_per_kg_usd: float = Field(..., gt=0)
    exchange_rate_usd: float = Field(..., gt=0)
    new_status: Optional[str] = None # –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã–¥–∞—á–∏
class IssueOrderItem(BaseModel):
    order_id: int
    weight_kg: float = Field(..., gt=0)
class IssuePayload(BaseModel):
    orders: List[IssueOrderItem]
    price_per_kg_usd: float = Field(..., gt=0)
    exchange_rate_usd: float = Field(..., gt=0)
    paid_cash: float = Field(..., ge=0) # –ú–æ–∂–µ—Ç –±—ã—Ç—å 0
    paid_card: float = Field(..., ge=0) # –ú–æ–∂–µ—Ç –±—ã—Ç—å 0
    card_payment_type: Optional[str] = None # –¢–∏–ø –∫–∞—Ä—Ç—ã, –µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ó–∞–∫–∞–∑–æ–≤ ---

# main.py (–ó–ê–ú–ï–ù–ò–¢–¨ –ü–û–õ–ù–û–°–¢–¨–Æ —Ñ—É–Ω–∫—Ü–∏—é get_orders –ï–©–ï –†–ê–ó)

@app.get("/api/orders", tags=["–ó–∞–∫–∞–∑—ã (–í–ª–∞–¥–µ–ª–µ—Ü)", "Telegram Bot"], response_model=List[OrderOut])
def get_orders(
    company_id: int = Query(...), 
    client_id: Optional[int] = Query(None), 
    
    # --- –ù–û–í–û–ï: –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–∏—Å–∫ –∏ –ª–∏–º–∏—Ç ---
    q: Optional[str] = Query(None, description="–ü–æ–∏—Å–∫ –ø–æ —Ç—Ä–µ–∫-–∫–æ–¥—É, –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É"),
    limit: Optional[int] = Query(20, description="–õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20)"),
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û ---
    
    party_dates: Optional[List[date]] = Query(None),
    statuses: Optional[List[str]] = Query(default=None),
    location_id: Optional[int] = Query(None),
    x_employee_id: Optional[str] = Header(None), 
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π.
    (–í–µ—Ä—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–∏—Å–∫–∞ 'q' –¥–ª—è –í–ª–∞–¥–µ–ª—å—Ü–∞)
    """
    print(f"[Get Orders] –ó–∞–ø—Ä–æ—Å –¥–ª—è Company ID={company_id}. Employee Header: {x_employee_id}. Client ID: {client_id}. –ü–æ–∏—Å–∫: '{q}'")

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ ---
    company = db.query(Company.id).filter(Company.id == company_id).first()
    if not company:
        raise HTTPException(status_code=404, detail=f"–ö–æ–º–ø–∞–Ω–∏—è —Å ID {company_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    query = db.query(Order).options(joinedload(Order.client)).filter(
        Order.company_id == company_id
    )

    # --- –ù–û–í–û–ï: –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ 'q' ---
    if q:
        search_term = f"%{q.lower()}%"
        # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º Client, —á—Ç–æ–±—ã –∏—Å–∫–∞—Ç—å –ø–æ –∏–º–µ–Ω–∏/—Ç–µ–ª–µ—Ñ–æ–Ω—É
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º isouter=True –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω, –∞ –∑–∞–∫–∞–∑—ã –æ—Å—Ç–∞–ª–∏—Å—å
        query = query.join(Client, Client.id == Order.client_id, isouter=True).filter( 
            or_(
                func.lower(Order.track_code).ilike(search_term),
                func.lower(Client.full_name).ilike(search_term),
                Client.phone.ilike(search_term)
            )
        )
        print(f"[Get Orders] –ü—Ä–∏–º–µ–Ω–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫: '{q}'")
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û ---

    employee: Optional[Employee] = None
    target_location_id: Optional[int] = None

    # --- –ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ –∞–¥–º–∏–Ω–∫–∏ ---
    if x_employee_id:
        try:
            employee_id_int = int(x_employee_id)
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –µ–≥–æ —Ä–æ–ª—å –∏ –ø—Ä–∞–≤–∞
            employee = db.query(Employee).options(
                joinedload(Employee.role).joinedload(Role.permissions)
            ).filter(
                Employee.id == employee_id_int,
                Employee.company_id == company_id, 
                Employee.is_active == True
            ).first()
        except ValueError:
            employee = None
            
        if employee:
            print(f"[Get Orders] –ó–∞–ø—Ä–æ—Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ID={employee.id} (–†–æ–ª—å: {employee.role.name})")
            # –í–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ —Ñ–∏–ª–∏–∞–ª—É, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–π
            if employee.role.name == '–í–ª–∞–¥–µ–ª–µ—Ü':
                if location_id is not None:
                    # –í–ª–∞–¥–µ–ª–µ—Ü –≤—ã–±—Ä–∞–ª —Ñ–∏–ª–∏–∞–ª
                    loc_check = db.query(Location.id).filter(Location.id == location_id, Location.company_id == company_id).first()
                    if not loc_check: raise HTTPException(status_code=404, detail="–£–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∏–ª–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    target_location_id = location_id
                    print(f"[Get Orders] –í–ª–∞–¥–µ–ª–µ—Ü —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ —Ñ–∏–ª–∏–∞–ª—É ID={target_location_id}")
                else:
                    # –í–ª–∞–¥–µ–ª–µ—Ü –≤–∏–¥–∏—Ç –≤—Å–µ —Ñ–∏–ª–∏–∞–ª—ã
                    print(f"[Get Orders] –í–ª–∞–¥–µ–ª–µ—Ü –≤–∏–¥–∏—Ç –≤—Å–µ —Ñ–∏–ª–∏–∞–ª—ã.")
                    target_location_id = None
            else: 
                # –û–±—ã—á–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–π —Ñ–∏–ª–∏–∞–ª
                target_location_id = employee.location_id
                if target_location_id is None:
                    print(f"[Get Orders][–û–®–ò–ë–ö–ê] –°–æ—Ç—Ä—É–¥–Ω–∏–∫ ID={employee.id} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ñ–∏–ª–∏–∞–ª—É!")
                    return []
                print(f"[Get Orders] –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤–∏–¥–∏—Ç —Å–≤–æ–π —Ñ–∏–ª–∏–∞–ª ID={target_location_id}")
        else:
            print("[Get Orders] –ó–∞–≥–æ–ª–æ–≤–æ–∫ X-Employee-ID –ø–µ—Ä–µ–¥–∞–Ω, –Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω/–Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
            # (–ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±—ã–ª, –Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å 401,
            # –Ω–æ –¥–ª—è –±–æ—Ç–∞/–õ–ö –º—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞)

    # --- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ client_id (–ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω) ---
    # (–≠—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ—Ç–æ–º –¥–ª—è "–ú–æ–∏ –ó–∞–∫–∞–∑—ã")
    if client_id is not None:
        client_check = db.query(Client.id).filter(Client.id == client_id, Client.company_id == company_id).first()
        if not client_check:
            raise HTTPException(status_code=404, detail=f"–ö–ª–∏–µ–Ω—Ç ID {client_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–ø–∞–Ω–∏–∏ ID {company_id}.")
        query = query.filter(Order.client_id == client_id)
        print(f"[Get Orders] –ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ Client ID={client_id}")

    # --- –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã ---
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Ñ–∏–ª–∏–∞–ª—É (–µ—Å–ª–∏ –æ–Ω –±—ã–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞/–í–ª–∞–¥–µ–ª—å—Ü–∞)
    if target_location_id is not None:
        query = query.filter(Order.location_id == target_location_id)

    # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º –ø–∞—Ä—Ç–∏–π
    if party_dates:
        query = query.filter(Order.party_date.in_(party_dates))

    # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    statuses_to_filter = statuses
    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –ò —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –∏–∑ –∞–¥–º–∏–Ω–∫–∏ (employee –æ–ø—Ä–µ–¥–µ–ª–µ–Ω),
    # —Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã–≤–∞–µ–º "–í—ã–¥–∞–Ω–Ω—ã–µ"
    if not statuses_to_filter and employee:
        statuses_to_filter = [s for s in ORDER_STATUSES if s != "–í—ã–¥–∞–Ω"]
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if statuses_to_filter:
        query = query.filter(Order.status.in_(statuses_to_filter))

    # --- –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º limit –∫ –∑–∞–ø—Ä–æ—Å—É ---
    orders = query.order_by(Order.party_date.desc().nullslast(), Order.id.desc()).limit(limit).all()
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û ---
    
    print(f"[Get Orders] –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}")
    return orders

@app.post("/api/orders", tags=["–ó–∞–∫–∞–∑—ã (–í–ª–∞–¥–µ–ª–µ—Ü)", "Telegram Bot"], response_model=OrderOut)
def create_order(
    payload: OrderCreate, # –ú–æ–¥–µ–ª—å —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç company_id –∏ location_id
    # –£–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç employee, —Ç.–∫. –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º
    # employee: Employee = Depends(get_current_active_employee),
    db: Session = Depends(get_db)
):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –£–ö–ê–ó–ê–ù–ù–û–ô –∫–æ–º–ø–∞–Ω–∏–∏, –ø—Ä–∏–≤—è–∑—ã–≤–∞—è –µ–≥–æ –∫ —Ñ–∏–ª–∏–∞–ª—É.
    –ú–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (–í–ª–∞–¥–µ–ª–µ—Ü/–°–æ—Ç—Ä—É–¥–Ω–∏–∫) –∏–ª–∏ –ë–æ—Ç–æ–º.
    """
    print(f"[Create Order API] –ü–æ–ª—É—á–µ–Ω payload: {payload.dict()}")

    # --- –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏, –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Ñ–∏–ª–∏–∞–ª–∞ ---
    company = db.query(Company).filter(Company.id == payload.company_id).first()
    if not company:
        raise HTTPException(status_code=404, detail=f"–ö–æ–º–ø–∞–Ω–∏—è —Å ID {payload.company_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    client = db.query(Client).filter(
        Client.id == payload.client_id,
        Client.company_id == payload.company_id # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –∏–∑ —Ç–æ–π –∂–µ –∫–æ–º–ø–∞–Ω–∏–∏
    ).first()
    if not client:
        raise HTTPException(status_code=404, detail=f"–ö–ª–∏–µ–Ω—Ç ID {payload.client_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–ø–∞–Ω–∏–∏ ID {payload.company_id}.")

    location = db.query(Location).filter(
        Location.id == payload.location_id,
        Location.company_id == payload.company_id # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ñ–∏–ª–∏–∞–ª –∏–∑ —Ç–æ–π –∂–µ –∫–æ–º–ø–∞–Ω–∏–∏
    ).first()
    if not location:
        raise HTTPException(status_code=404, detail=f"–§–∏–ª–∏–∞–ª ID {payload.location_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–ø–∞–Ω–∏–∏ ID {payload.company_id}.")
    print(f"[Create Order API] –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {company.name}, –∫–ª–∏–µ–Ω—Ç–∞ {client.full_name}, —Ñ–∏–ª–∏–∞–ª–∞ {location.name}.")

    # --- –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ —Ç—Ä–µ–∫-–∫–æ–¥–∞ ---
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫-–∫–æ–¥, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –∏ —Ç–∏–ø –í—ã–∫—É–ø
    track_code_to_save = payload.track_code
    if not track_code_to_save and payload.purchase_type == "–í—ã–∫—É–ø":
         timestamp = int(datetime.now().timestamp() * 1000)
         track_code_to_save = f"PENDING-{timestamp}"
         print(f"[Create Order API] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫-–∫–æ–¥: {track_code_to_save}")
    # –ï—Å–ª–∏ —Ç—Ä–µ–∫-–∫–æ–¥ –≤—Å–µ –µ—â–µ –ø—É—Å—Ç (–Ω–µ –í—ã–∫—É–ø), —ç—Ç–æ –æ—à–∏–±–∫–∞
    if not track_code_to_save:
         raise HTTPException(status_code=400, detail="–¢—Ä–µ–∫-–∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Ç–∏–ø–∞ '–î–æ—Å—Ç–∞–≤–∫–∞'.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫-–∫–æ–¥–∞ (–µ—Å–ª–∏ –æ–Ω –Ω–µ PENDING) –í–ù–£–¢–†–ò –ö–û–ú–ü–ê–ù–ò–ò
    if not track_code_to_save.startswith("PENDING-"):
         existing_order = db.query(Order).filter(
              Order.track_code == track_code_to_save,
              Order.company_id == payload.company_id # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–ø–∞–Ω–∏–∏
         ).first()
         if existing_order:
              raise HTTPException(status_code=400, detail=f"–ó–∞–∫–∞–∑ —Å —Ç—Ä–µ–∫-–∫–æ–¥–æ–º '{track_code_to_save}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–º–ø–∞–Ω–∏–∏ {company.name}.")

    # --- –®–∞–≥ 3: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏ –¥–∞—Ç—ã –ø–∞—Ä—Ç–∏–∏ ---
    order_status = "–û–∂–∏–¥–∞–µ—Ç –≤—ã–∫—É–ø–∞" if payload.purchase_type == "–í—ã–∫—É–ø" else "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –∏–∑ payload –∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é
    order_party_date = payload.party_date if payload.party_date else date.today()

    # --- –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Order ---
    new_order = Order(
        client_id=payload.client_id,
        track_code=track_code_to_save, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π/—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
        status=order_status,
        purchase_type=payload.purchase_type,
        comment=payload.comment,
        party_date=order_party_date,
        # –ü–æ–ª—è –≤—ã–∫—É–ø–∞ –∏–∑ payload (OrderBase)
        buyout_item_cost_cny=payload.buyout_item_cost_cny,
        buyout_commission_percent=payload.buyout_commission_percent,
        buyout_rate_for_client=payload.buyout_rate_for_client,
        buyout_actual_rate=payload.buyout_actual_rate,
        # –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Ñ–∏–ª–∏–∞–ª—É –∏–∑ payload
        company_id=payload.company_id,
        location_id=payload.location_id
    )
    print(f"[Create Order API] –û–±—ä–µ–∫—Ç Order —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")

    # --- –®–∞–≥ 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î ---
    try:
        db.add(new_order)
        db.commit() # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
        db.refresh(new_order) # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –ë–î (—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID –∏ —Ç.–¥.)
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        db.refresh(new_order, attribute_names=['client'])
        print(f"[Create Order API] –ó–∞–∫–∞–∑ ID={new_order.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞ ID={new_order.location_id}")
        return new_order # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑
    except Exception as e:
        db.rollback() # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
        import traceback
        print(f"!!! –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:\n{traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
# --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

# main.py (–ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é update_order)

@app.patch("/api/orders/{order_id}", tags=["–ó–∞–∫–∞–∑—ã (–í–ª–∞–¥–µ–ª–µ—Ü)"], response_model=OrderOut)
async def update_order( # –£–±–µ–¥–∏—Å—å, —á—Ç–æ 'async' –∑–¥–µ—Å—å –µ—Å—Ç—å
    order_id: int,
    payload: OrderUpdate,
    employee: Employee = Depends(get_current_active_employee),
    db: Session = Depends(get_db)
):
    """(–° –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–ú–ò) –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."""
    
    # 1. –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ –∫–æ–º–ø–∞–Ω–∏–∏
    order = db.query(Order).options(joinedload(Order.client)).filter( 
        Order.id == order_id,
        Order.company_id == employee.company_id
    ).first()
    if not order:
        raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")

    update_data = payload.dict(exclude_unset=True) 
    original_status = order.status 

    # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è location_id (–¢–û–õ–¨–ö–û –î–õ–Ø –í–õ–ê–î–ï–õ–¨–¶–ê)
    if 'location_id' in update_data:
        if employee.role.name != '–í–ª–∞–¥–µ–ª–µ—Ü':
            del update_data['location_id']  
            print(f"[Update Order] –°–æ—Ç—Ä—É–¥–Ω–∏–∫ ID={employee.id} –Ω–µ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —Ñ–∏–ª–∏–∞–ª –∑–∞–∫–∞–∑–∞ ID={order_id}.")
        elif update_data['location_id'] != order.location_id: 
            new_location = db.query(Location).filter(
                Location.id == update_data['location_id'],
                Location.company_id == employee.company_id
            ).first()
            if not new_location:
                raise HTTPException(status_code=404, detail="–ù–æ–≤—ã–π —Ñ–∏–ª–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")
            print(f"[Update Order] –í–ª–∞–¥–µ–ª–µ—Ü ID={employee.id} –º–µ–Ω—è–µ—Ç —Ñ–∏–ª–∏–∞–ª –∑–∞–∫–∞–∑–∞ ID={order_id} –Ω–∞ ID={update_data['location_id']}")

    # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ client_id –ø–µ—Ä–µ–¥–∞–Ω)
    if 'client_id' in update_data and update_data['client_id'] != order.client_id:
        new_client = db.query(Client).filter(
            Client.id == update_data['client_id'],
            Client.company_id == employee.company_id
        ).first()
        if not new_client:
             raise HTTPException(status_code=404, detail="–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")
        print(f"[Update Order] –ó–∞–∫–∞–∑ ID={order_id} –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ ID={update_data['client_id']}")

    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ —Ç—Ä–µ–∫-–∫–æ–¥–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    if 'track_code' in update_data and update_data['track_code'] != order.track_code:
        if not update_data['track_code'].startswith("PENDING-"):
             existing_order = db.query(Order).filter(
                 Order.track_code == update_data['track_code'],
                 Order.company_id == employee.company_id,
                 Order.id != order_id 
             ).first()
             if existing_order:
                  raise HTTPException(status_code=400, detail=f"–î—Ä—É–≥–æ–π –∑–∞–∫–∞–∑ —Å —Ç—Ä–µ–∫-–∫–æ–¥–æ–º '{update_data['track_code']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ç—É—Å–∞
    if 'status' in update_data and update_data['status'] not in ORDER_STATUSES:
         raise HTTPException(status_code=400, detail=f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {update_data['status']}")
         
    # 6. –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫ –æ–±—ä–µ–∫—Ç—É –∑–∞–∫–∞–∑–∞
    try:
        for key, value in update_data.items():
            setattr(order, key, value)
        
        db.commit() 
        db.refresh(order) 
        db.refresh(order, attribute_names=['client']) 

        # --- –ù–ê–ß–ê–õ–û: –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–æ–≥–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
        if 'status' in update_data and update_data['status'] != original_status:
            new_status = update_data['status']
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å—Ç—å chat_id –∏ —Å—Ç–∞—Ç—É—Å –∏–∑ —Å–ø–∏—Å–∫–∞ "–≤–∞–∂–Ω—ã—Ö"
            if order.client and order.client.telegram_chat_id and new_status in ["–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ", "–í –ø—É—Ç–∏", "–ù–∞ —Å–∫–ª–∞–¥–µ –≤ –ö–†"]:
                print(f"[Notification] –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order.id} –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ '{new_status}'. –í—ã–∑–æ–≤ await generate_and_send_notification...")
                # –ü—Ä—è–º–æ–π –í–´–ó–û–í (await), —Ç.–∫. —Å–µ—Å—Å–∏—è db –µ—â–µ –∂–∏–≤–∞
                await generate_and_send_notification(
                        client=order.client, 
                        new_status=new_status, 
                        track_codes=[order.track_code]
                )
            else:
                print(f"[Notification] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order.id} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (—Å—Ç–∞—Ç—É—Å: '{new_status}', chat_id: {order.client.telegram_chat_id})")
        # --- –ö–û–ù–ï–¶: –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–æ–≥–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---

        print(f"[Update Order] –ó–∞–∫–∞–∑ ID={order_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
        return order 
    except Exception as e:
        db.rollback() 
        import traceback
        print(f"!!! –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ ID={order_id}:\n{traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")

@app.delete("/api/orders/{order_id}", tags=["–ó–∞–∫–∞–∑—ã (–í–ª–∞–¥–µ–ª–µ—Ü)"], status_code=status.HTTP_204_NO_CONTENT)
def delete_order(
    order_id: int,
    employee: Employee = Depends(get_company_owner),
    db: Session = Depends(get_db),
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ Query –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–ª–∏ Header
    password: str = Query(...) # –¢—Ä–µ–±—É–µ–º –ø–∞—Ä–æ–ª—å –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–ø—Ä–æ—Å–∞
):
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–∫–∞–∑ –¢–ï–ö–£–©–ï–ô –∫–æ–º–ø–∞–Ω–∏–∏ (–¢–†–ï–ë–£–ï–¢ –ü–ê–†–û–õ–¨ –í–õ–ê–î–ï–õ–¨–¶–ê)."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–í–ª–∞–¥–µ–ª—å—Ü–∞)
    if employee.password != password:
         raise HTTPException(status_code=403, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è.")

    order = db.query(Order).filter(
        Order.id == order_id,
        Order.company_id == employee.company_id
    ).first()
    if not order:
        raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")

    # –î–æ–ø. –ø—Ä–æ–≤–µ—Ä–∫–∞: –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –í–´–î–ê–ù–ù–´–ô –∑–∞–∫–∞–∑? (–ü–æ –∂–µ–ª–∞–Ω–∏—é)
    # if order.status == "–í—ã–¥–∞–Ω":
    #     raise HTTPException(status_code=400, detail="–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —É–∂–µ –≤—ã–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑.")

    db.delete(order)
    db.commit()
    return None

@app.get("/api/orders/parties", tags=["–ó–∞–∫–∞–∑—ã (–í–ª–∞–¥–µ–ª–µ—Ü)"], response_model=List[date])
def get_order_parties(
    employee: Employee = Depends(get_current_company_employee),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞—Ç –ø–∞—Ä—Ç–∏–π –¥–ª—è –¢–ï–ö–£–©–ï–ô –∫–æ–º–ø–∞–Ω–∏–∏."""
    parties = db.query(Order.party_date).filter(
        Order.company_id == employee.company_id,
        Order.party_date.isnot(None) # –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–∫–∞–∑—ã –±–µ–∑ –¥–∞—Ç—ã
    ).distinct().order_by(Order.party_date.desc()).all()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—ã –∏–∑ –∫–æ—Ä—Ç–µ–∂–µ–π
    return [p[0] for p in parties]


# === –ù–ê–ß–ê–õ–û –ü–û–õ–ù–û–ô –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –§–£–ù–ö–¶–ò–ò bulk_order_action ===

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π (—Å–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞, –¥–∞—Ç—ã, —É–¥–∞–ª–µ–Ω–∏–µ)

@app.post("/api/orders/bulk_action", tags=["–ó–∞–∫–∞–∑—ã (–í–ª–∞–¥–µ–ª–µ—Ü)"])
async def bulk_order_action( # –£–±–µ–¥–∏—Å—å, —á—Ç–æ 'async' –∑–¥–µ—Å—å –µ—Å—Ç—å
    payload: BulkActionPayload,
    employee: Employee = Depends(get_company_owner),
    db: Session = Depends(get_db)
):
    """(–° –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–ú–ò) –í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    
    if not payload.order_ids:
        raise HTTPException(status_code=400, detail="–ù–µ –≤—ã–±—Ä–∞–Ω—ã –∑–∞–∫–∞–∑—ã –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è.")

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫ –∫–æ–º–ø–∞–Ω–∏–∏
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã –°–†–ê–ó–£ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
    query = db.query(Order).options(joinedload(Order.client)).filter(
        Order.id.in_(payload.order_ids),
        Order.company_id == employee.company_id 
    )
    orders_to_action = query.all()

    requested_ids_set = set(payload.order_ids)
    found_ids_set = {o.id for o in orders_to_action}

    if len(found_ids_set) != len(requested_ids_set):
        missing_ids = list(requested_ids_set - found_ids_set)
        raise HTTPException(status_code=404, detail=f"–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏: {missing_ids}")
    
    # --- –ë–ª–æ–∫ IF –¥–ª—è 'update_status' ---
    if payload.action == 'update_status':
        new_status = payload.new_status
        if not new_status or new_status not in ORDER_STATUSES:
            raise HTTPException(status_code=400, detail="–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–æ–≥–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞) ---
        notifications_to_send = {}
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –£–ñ–ï –ó–ê–ì–†–£–ñ–ï–ù–ù–´–ï 'orders_to_action'
        for order in orders_to_action:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–û –º–µ–Ω—è–µ—Ç—Å—è
            if order.status != new_status and order.client and order.client.telegram_chat_id:
                if order.client.id not in notifications_to_send:
                    notifications_to_send[order.client.id] = {"client": order.client, "track_codes": []}
                notifications_to_send[order.client.id]["track_codes"].append(order.track_code)
        
        print(f"[Notification] –ù–∞–π–¥–µ–Ω–æ {len(notifications_to_send)} –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.")
        # --- –ö–û–ù–ï–¶ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ ---

        # –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ
        count = query.update({"status": new_status}, synchronize_session='fetch')
        db.commit()

        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –û—Ç–ø—Ä–∞–≤–∫–∞ (–ü–û–°–õ–ï commit) ---
        if notifications_to_send and new_status in ["–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ", "–í –ø—É—Ç–∏", "–ù–∞ —Å–∫–ª–∞–¥–µ –≤ –ö–†"]:
            print(f"[Notification] –ó–∞–ø—É—Å–∫ {len(notifications_to_send)} –∑–∞–¥–∞—á –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É (await)...")
            tasks = []
            for client_id, data in notifications_to_send.items():
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
                tasks.append(
                    generate_and_send_notification(
                        client=data["client"], 
                        new_status=new_status, 
                        track_codes=data["track_codes"]
                    )
                )
            # –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –í–°–ï–• –∑–∞–¥–∞—á –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ
            await asyncio.gather(*tasks)
            print(f"[Notification] –í—Å–µ {len(tasks)} –∑–∞–¥–∞—á –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")
        else:
             print(f"[Notification] –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è (—Å—Ç–∞—Ç—É—Å: '{new_status}' –∏–ª–∏ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤).")
        # --- –ö–û–ù–ï–¶ –û—Ç–ø—Ä–∞–≤–∫–∏ ---

        return {"status": "ok", "message": f"–°—Ç–∞—Ç—É—Å '{new_status}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {count} –∑–∞–∫–∞–∑–æ–≤."}

    # --- –û—Å—Ç–∞–ª—å–Ω—ã–µ 'elif' –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
    elif payload.action == 'update_party_date':
        if not payload.password or employee.password != payload.password:
            raise HTTPException(status_code=403, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ–Ω—ã –¥–∞—Ç—ã –ø–∞—Ä—Ç–∏–∏.")
        if not payload.new_party_date:
            raise HTTPException(status_code=400, detail="–ù–µ —É–∫–∞–∑–∞–Ω–∞ –Ω–æ–≤–∞—è –¥–∞—Ç–∞ –ø–∞—Ä—Ç–∏–∏.")
        count = query.update({"party_date": payload.new_party_date}, synchronize_session='fetch') 
        db.commit()
        return {"status": "ok", "message": f"–î–∞—Ç–∞ –ø–∞—Ä—Ç–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {count} –∑–∞–∫–∞–∑–æ–≤."}

    elif payload.action == 'buyout':
        if not payload.buyout_actual_rate or payload.buyout_actual_rate <= 0:
            raise HTTPException(status_code=400, detail="–ù–µ —É–∫–∞–∑–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –≤—ã–∫—É–ø–∞.")
        if not all(o.status == "–û–∂–∏–¥–∞–µ—Ç –≤—ã–∫—É–ø–∞" for o in orders_to_action):
            raise HTTPException(status_code=400, detail="–ú–∞—Å—Å–æ–≤—ã–π –≤—ã–∫—É–ø –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–û–∂–∏–¥–∞–µ—Ç –≤—ã–∫—É–ø–∞'.")
        try:
            count = query.update({
                "status": "–í—ã–∫—É–ø–ª–µ–Ω", 
                "buyout_actual_rate": payload.buyout_actual_rate
            }, synchronize_session='fetch')
            db.commit()
            return {"status": "ok", "message": f"–í—ã–∫—É–ø –∏ —Å—Ç–∞—Ç—É—Å '–í—ã–∫—É–ø–ª–µ–Ω' —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ {count} –∑–∞–∫–∞–∑–∞–º."}
        except Exception as e:
            db.rollback()
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –≤—ã–∫—É–ø–µ: {e}")

    elif payload.action == 'delete':
        if not payload.password or employee.password != payload.password:
            raise HTTPException(status_code=403, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è.")
        ids_to_delete = [o.id for o in orders_to_action] 
        query_to_delete = db.query(Order).filter(Order.id.in_(ids_to_delete))
        count = query_to_delete.delete(synchronize_session=False) 
        db.commit()
        return {"status": "ok", "message": f"–£–¥–∞–ª–µ–Ω–æ {count} –∑–∞–∫–∞–∑–æ–≤."}

    else:
        raise HTTPException(status_code=400, detail="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–∞—Å—Å–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
# main.py (–ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é bulk_import_orders)

@app.post("/api/orders/bulk_import", tags=["–ó–∞–∫–∞–∑—ã (–í–ª–∞–¥–µ–ª–µ—Ü)"], response_model=BulkImportResponse)
def bulk_import_orders(
    payload: BulkOrderImportPayload,
    employee: Employee = Depends(get_current_active_employee), # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
    db: Session = Depends(get_db)
):
    """–ú–∞—Å—Å–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Excel –¥–ª—è –¢–ï–ö–£–©–ï–ô –∫–æ–º–ø–∞–Ω–∏–∏ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —Ñ–∏–ª–∏–∞–ª—É."""
    if employee.company_id is None: # SuperAdmin –Ω–µ –º–æ–∂–µ—Ç
        raise HTTPException(status_code=403, detail="–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

    created_count = 0
    errors = []
    warnings = []
    # –î–∞—Ç–∞ –ø–∞—Ä—Ç–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–µ–≥–æ–¥–Ω—è, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≤ payload
    import_party_date = payload.party_date if payload.party_date else date.today()

    # --- –õ–û–ì–ò–ö–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –§–ò–õ–ò–ê–õ–ê –î–õ–Ø –ò–ú–ü–û–†–¢–ê ---
    import_location_id = None
    if employee.role.name == '–í–ª–∞–¥–µ–ª–µ—Ü':
        # –í–ª–∞–¥–µ–ª–µ—Ü: –ò—Å–ø–æ–ª—å–∑—É–µ–º location_id –∏–∑ payload –ò–õ–ò –µ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π location_id
        if payload.location_id:
            # –í–ª–∞–¥–µ–ª–µ—Ü –≤—ã–±—Ä–∞–ª —Ñ–∏–ª–∏–∞–ª –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ
            loc_check = db.query(Location).filter(Location.id == payload.location_id, Location.company_id == employee.company_id).first()
            if not loc_check:
                raise HTTPException(status_code=404, detail="–í—ã–±—Ä–∞–Ω–Ω—ã–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∏–ª–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")
            import_location_id = payload.location_id
            print(f"[Import Orders] –í–ª–∞–¥–µ–ª–µ—Ü ID={employee.id} –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤ —Ñ–∏–ª–∏–∞–ª ID={import_location_id}")
        elif employee.location_id:
             # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∏–ª–∏–∞–ª –í–ª–∞–¥–µ–ª—å—Ü–∞, –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω –¥—Ä—É–≥–æ–π
             import_location_id = employee.location_id
             print(f"[Import Orders] –í–ª–∞–¥–µ–ª–µ—Ü ID={employee.id} –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤ —Å–≤–æ–π —Ñ–∏–ª–∏–∞–ª ID={import_location_id} (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
        else:
             # –ï—Å–ª–∏ —É –í–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–µ—Ç location_id –∏ –æ–Ω –Ω–µ –≤—ã–±—Ä–∞–ª —Ñ–∏–ª–∏–∞–ª, –∏—â–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∏–ª–∏–∞–ª –∫–æ–º–ø–∞–Ω–∏–∏
             first_location = db.query(Location).filter(Location.company_id == employee.company_id).first()
             if not first_location:
                  # –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏, —Ç.–∫. –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è "–ì–ª–∞–≤–Ω—ã–π —Ñ–∏–ª–∏–∞–ª"
                  raise HTTPException(status_code=400, detail="–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω —Ñ–∏–ª–∏–∞–ª –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–∫–∞–∑–æ–≤.")
             import_location_id = first_location.id
             print(f"[Import Orders] –í–ª–∞–¥–µ–ª–µ—Ü ID={employee.id} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ñ–∏–ª–∏–∞–ª—É, –∏–º–ø–æ—Ä—Ç –≤ –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π: ID={import_location_id}")
    else:
        # –û–±—ã—á–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: –í—Å–µ–≥–¥–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤ —Å–≤–æ–π —Ñ–∏–ª–∏–∞–ª
        if not employee.location_id:
            raise HTTPException(status_code=400, detail="–û—à–∏–±–∫–∞: –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ñ–∏–ª–∏–∞–ª—É, –∏–º–ø–æ—Ä—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
        import_location_id = employee.location_id
        print(f"[Import Orders] –°–æ—Ç—Ä—É–¥–Ω–∏–∫ ID={employee.id} –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤ —Å–≤–æ–π —Ñ–∏–ª–∏–∞–ª ID={import_location_id}")
    # --- –ö–û–ù–ï–¶ –õ–û–ì–ò–ö–ò –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –§–ò–õ–ò–ê–õ–ê ---

    # --- –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ ---
    company_clients = db.query(Client).filter(Client.company_id == employee.company_id).all()
    clients_by_phone = {c.phone: c for c in company_clients}
    clients_by_code_num = {c.client_code_num: c for c in company_clients if c.client_code_num is not None}
    existing_track_codes = {o.track_code for o in db.query(Order.track_code).filter(Order.company_id == employee.company_id)}
    unknown_client_counter = 1
    # --- –ö–æ–Ω–µ—Ü –∑–∞–≥—Ä—É–∑–∫–∏ ---

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–∑ payload ---
    for item in payload.orders_data:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç—Ä–µ–∫-–∫–æ–¥–∞
        if not item.track_code or not item.track_code.strip():
            errors.append(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–∫-–∫–æ–¥.")
            continue
        track_code = item.track_code.strip()
        if track_code in existing_track_codes:
             warnings.append(f"–ó–∞–∫–∞–∑ —Å —Ç—Ä–µ–∫-–∫–æ–¥–æ–º '{track_code}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–ø—Ä–æ–ø—É—â–µ–Ω).")
             continue

        # –ü–æ–∏—Å–∫/—Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        client = None
        client_identifier = ""
        if item.client_code:
             code_str = str(item.client_code).strip()
             client_identifier = f"–∫–æ–¥ '{code_str}'"
             match_num = re.search(r'(\d+)$', code_str)
             if match_num:
                 try:
                     num_val = int(match_num.group(1))
                     client = clients_by_code_num.get(num_val)
                 except ValueError: pass
        if not client and item.phone:
             cleaned_phone = re.sub(r'\D', '', str(item.phone))
             if not client_identifier: client_identifier = f"—Ç–µ–ª. '{cleaned_phone}'"
             if cleaned_phone: client = clients_by_phone.get(cleaned_phone)
        if not client:
             # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω ---
             timestamp_ms = int(datetime.now().timestamp() * 1000)
             unknown_client_phone = f"unknown_{employee.company_id}_{unknown_client_counter}_{timestamp_ms}"
             # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
             client = Client(
                 full_name=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ({client_identifier or track_code})",
                 phone=unknown_client_phone, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
                 company_id=employee.company_id,
             )
             db.add(client)
             db.flush()
             # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ clients_by_phone
             warnings.append(f"–î–ª—è –∑–∞–∫–∞–∑–∞ '{track_code}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–ª–∏–µ–Ω—Ç ({client_identifier or '–Ω–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞'}). –°–æ–∑–¥–∞–Ω '{client.full_name}'.")
             unknown_client_counter += 1

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        order_status = "–û–∂–∏–¥–∞–µ—Ç –≤—ã–∫—É–ø–∞" if item.purchase_type == "–í—ã–∫—É–ø" else "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"

        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Order —Å –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ú location_id
        new_order = Order(
            track_code=track_code,
            client_id=client.id,
            company_id=employee.company_id,
            location_id=import_location_id, # <-- –ü–†–ò–í–Ø–ó–ö–ê –ö –§–ò–õ–ò–ê–õ–£
            purchase_type=item.purchase_type or "–î–æ—Å—Ç–∞–≤–∫–∞",
            status=order_status,
            party_date=import_party_date,
            comment=item.comment,
            buyout_item_cost_cny=item.buyout_item_cost_cny,
            buyout_rate_for_client=item.buyout_rate_for_client,
            buyout_commission_percent=item.buyout_commission_percent or 10.0
        )
        db.add(new_order)
        existing_track_codes.add(track_code)
        created_count += 1

        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π flush
        if created_count % 100 == 0:
            try: db.flush()
            except Exception as e_f:
                 db.rollback(); errors.append(f"–û—à–∏–±–∫–∞ flush (~{created_count}): {e_f}"); break
    # --- –ö–æ–Ω–µ—Ü —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫ ---

    # –§–∏–Ω–∞–ª—å–Ω—ã–π commit
    try: db.commit()
    except Exception as e_c:
         db.rollback(); errors.append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ commit: {e_c}"); created_count = 0

    return {
        "status": "ok",
        "message": "–ò–º–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω.",
        "created_clients": created_count, # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –Ω–µ—É–¥–∞—á–Ω–æ–µ, –Ω–æ –æ—Å—Ç–∞–≤–∏–º
        "errors": errors,
        "warnings": warnings
    }

# === –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê (–ó–ê–ö–ê–ó–´) ===

# === –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê (–°–ú–ï–ù–´ –ò –¢–ò–ü–´ –†–ê–°–•–û–î–û–í) ===

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –°–º–µ–Ω ---

@app.get("/api/shifts/active", tags=["–°–º–µ–Ω—ã"], response_model=Optional[ShiftOut])
def get_active_shift(
    employee: Employee = Depends(get_current_active_employee),  
    db: Session = Depends(get_db)
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–º–µ–Ω—É –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
    –ï—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ - –í–ª–∞–¥–µ–ª–µ—Ü, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–º–µ–Ω—É –µ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞ 
    –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–∫—Ä—ã—Ç–∏—è.
    """
    if employee.company_id is None:
        return None

    location_id_to_check = employee.location_id
    
    if location_id_to_check is None:
        return None

    # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–º–µ–Ω—É –≤ —Ñ–∏–ª–∏–∞–ª–µ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫/–≤–ª–∞–¥–µ–ª–µ—Ü.
    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞, —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞ "—ç—Ç–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞".
    active_shift = db.query(Shift).filter(
        Shift.company_id == employee.company_id,
        Shift.location_id == location_id_to_check,
        Shift.end_time == None
    ).first()

    return active_shift

# main.py (–§—É–Ω–∫—Ü–∏—è get_all_active_shifts)

@app.get("/api/shifts/all_active", tags=["–°–º–µ–Ω—ã"], response_model=List[ShiftOut])
def get_all_active_shifts(
    employee: Employee = Depends(get_company_owner),
    db: Session = Depends(get_db)
):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–º–µ–Ω—ã –¥–ª—è –¢–ï–ö–£–©–ï–ô –∫–æ–º–ø–∞–Ω–∏–∏."""
    active_shifts = db.query(Shift).options(
        joinedload(Shift.employee) # <-- –≠–¢–û –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ß–ê–°–¢–¨
    ).filter(
        Shift.company_id == employee.company_id,
        Shift.end_time == None
    ).all()
    return active_shifts
    
# === –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –§–£–ù–ö–¶–ò–ò get_active_shift ===

# === –ù–ê–ß–ê–õ–û –ü–û–õ–ù–û–ô –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –§–£–ù–ö–¶–ò–ò open_shift ===
@app.post("/api/shifts/open", tags=["–ö–∞—Å—Å–∞ –∏ –°–º–µ–Ω—ã"], response_model=ShiftOut)
def open_shift(
    payload: ShiftOpenPayload,
    opener_employee: Employee = Depends(get_current_active_employee), # –°–æ—Ç—Ä—É–¥–Ω–∏–∫, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π –¥–µ–π—Å—Ç–≤–∏–µ
    db: Session = Depends(get_db)
):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é —Å–º–µ–Ω—É."""
    # --- –î–û–ë–ê–í–õ–ï–ù–û –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---
    print(f"--- –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É ---")
    print(f"–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç: ID={opener_employee.id}, –ò–º—è={opener_employee.full_name}, –†–æ–ª—å={opener_employee.role.name}, –ö–æ–º–ø–∞–Ω–∏—è={opener_employee.company_id}")
    print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (payload): {payload.dict()}")
    # --- –ö–û–ù–ï–¶ –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ---

    try: # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å—é –ª–æ–≥–∏–∫—É –≤ try...except
        if opener_employee.company_id is None:
             print("[–û–®–ò–ë–ö–ê] –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Å–º–µ–Ω—ã.") # –õ–æ–≥
             raise HTTPException(status_code=403, detail="–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Å–º–µ–Ω—ã.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã
        opener_perms = {p.codename for p in opener_employee.role.permissions}
        if 'open_close_shift' not in opener_perms:
            print(f"[–û–®–ò–ë–ö–ê] –£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ID={opener_employee.id} –Ω–µ—Ç –ø—Ä–∞–≤ 'open_close_shift'.") # –õ–æ–≥
            raise HTTPException(status_code=403, detail="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω.")

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞: –°–æ—Ç—Ä—É–¥–Ω–∏–∫, –§–ò–õ–ò–ê–õ –∏ –ö–æ–º–ø–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ID={payload.employee_id} –∏ —Ñ–∏–ª–∏–∞–ª–∞ ID={payload.location_id} –≤ –∫–æ–º–ø–∞–Ω–∏–∏ ID={opener_employee.company_id}...") # –õ–æ–≥
        target_employee = db.query(Employee).filter(
             Employee.id == payload.employee_id,
             Employee.company_id == opener_employee.company_id
        ).first()
        target_location = db.query(Location).filter(
             Location.id == payload.location_id,
             Location.company_id == opener_employee.company_id
        ).first()

        if not target_employee:
             print(f"[–û–®–ò–ë–ö–ê] –¶–µ–ª–µ–≤–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ ID={payload.employee_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–ø–∞–Ω–∏–∏ ID={opener_employee.company_id}.") # –õ–æ–≥
             raise HTTPException(status_code=404, detail="–¶–µ–ª–µ–≤–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")
        if not target_location:
             print(f"[–û–®–ò–ë–ö–ê] –¶–µ–ª–µ–≤–æ–π —Ñ–∏–ª–∏–∞–ª ID={payload.location_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–ø–∞–Ω–∏–∏ ID={opener_employee.company_id}.") # –õ–æ–≥
             raise HTTPException(status_code=404, detail="–¶–µ–ª–µ–≤–æ–π —Ñ–∏–ª–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")
        print(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –∏ —Ñ–∏–ª–∏–∞–ª –Ω–∞–π–¥–µ–Ω—ã: –°–æ—Ç—Ä—É–¥–Ω–∏–∫='{target_employee.full_name}', –§–∏–ª–∏–∞–ª='{target_location.name}'.") # –õ–æ–≥

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞: –í —ç—Ç–æ–º —Ñ–∏–ª–∏–∞–ª–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–º–µ–Ω—ã
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã –≤ —Ñ–∏–ª–∏–∞–ª–µ ID={payload.location_id}...") # –õ–æ–≥
        existing_active_shift = db.query(Shift).filter(
            Shift.company_id == opener_employee.company_id,
            Shift.location_id == payload.location_id, # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–µ–Ω–Ω–æ –¶–ï–õ–ï–í–û–ô —Ñ–∏–ª–∏–∞–ª
            Shift.end_time == None
        ).first()
        if existing_active_shift:
            print(f"[–û–®–ò–ë–ö–ê] –ê–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞ ID={existing_active_shift.id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ñ–∏–ª–∏–∞–ª–µ ID={payload.location_id}.") # –õ–æ–≥
            raise HTTPException(status_code=400, detail=f"–ù–µ–ª—å–∑—è –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é —Å–º–µ–Ω—É –≤ —Ñ–∏–ª–∏–∞–ª–µ '{target_location.name}', –ø–æ–∫–∞ –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è.")
        print("–ê–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã –≤ —ç—Ç–æ–º —Ñ–∏–ª–∏–∞–ª–µ –Ω–µ—Ç. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º...") # –õ–æ–≥

        # 3. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–º–µ–Ω—É
        print("–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Shift...") # –õ–æ–≥
        new_shift = Shift(
            starting_cash=payload.starting_cash,
            exchange_rate_usd=payload.exchange_rate_usd,
            price_per_kg_usd=payload.price_per_kg_usd,
            employee_id=payload.employee_id, # –°–æ—Ç—Ä—É–¥–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
            location_id=payload.location_id, # –§–∏–ª–∏–∞–ª, –≥–¥–µ –æ—Ç–∫—Ä—ã—Ç–∞ —Å–º–µ–Ω–∞
            company_id=opener_employee.company_id # –ö–æ–º–ø–∞–Ω–∏—è
        )
        print(f"–û–±—ä–µ–∫—Ç Shift —Å–æ–∑–¥–∞–Ω (–µ—â–µ –Ω–µ –≤ –ë–î): {new_shift.__dict__}") # –õ–æ–≥

        try:
            print("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω—ã –≤ —Å–µ—Å—Å–∏—é (db.add)...") # –õ–æ–≥
            db.add(new_shift)
            print("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ db.commit...") # –õ–æ–≥
            db.commit()
            print("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ db.refresh...") # –õ–æ–≥
            db.refresh(new_shift)
            print(f"–°–º–µ–Ω–∞ ID={new_shift.id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î.") # –õ–æ–≥
            return new_shift
        except Exception as e_db:
            db.rollback()
            import traceback
            print(f"!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–º–µ–Ω—ã:\n{traceback.format_exc()}") # –õ–æ–≥
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω—ã: {e_db}")

    except HTTPException as http_exc:
         # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–∞–ª—å—à–µ
         raise http_exc
    except Exception as e_main:
        # –õ–æ–≤–∏–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        import traceback
        print(f"!!! –ù–ï–û–ñ–ò–î–ê–ù–ù–ê–Ø –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ —Ñ—É–Ω–∫—Ü–∏–∏ open_shift:\n{traceback.format_exc()}") # –õ–æ–≥
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω—ã: {e_main}")

# === –ö–û–ù–ï–¶ –ü–û–õ–ù–û–ô –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –§–£–ù–ö–¶–ò–ò open_shift ===

@app.post("/api/shifts/close", tags=["–ö–∞—Å—Å–∞ –∏ –°–º–µ–Ω—ã"], response_model=ShiftOut)
def close_shift(
    payload: ShiftClosePayload,
    closer_employee: Employee = Depends(get_current_active_employee),
    db: Session = Depends(get_db)
):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –¢–ï–ö–£–©–£–Æ –ê–ö–¢–ò–í–ù–£–Æ —Å–º–µ–Ω—É –≤ –§–ò–õ–ò–ê–õ–ï —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞."""
    if closer_employee.is_super_admin:
         raise HTTPException(status_code=403, detail="–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—Ç—å —Å–º–µ–Ω—ã.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã
    closer_perms = {p.codename for p in closer_employee.role.permissions}
    if 'open_close_shift' not in closer_perms:
         raise HTTPException(status_code=403, detail="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω.")

    # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–º–µ–Ω—É –≤ –¢–ï–ö–£–©–ï–ú —Ñ–∏–ª–∏–∞–ª–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    active_shift = db.query(Shift).filter(
        Shift.company_id == closer_employee.company_id,
        Shift.location_id == closer_employee.location_id, # –í–∞–∂–Ω–æ: –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–º–µ–Ω—É —Å–≤–æ–µ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
        Shift.end_time == None
    ).first()

    if not active_shift:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º 404, —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –ø–æ–Ω—è–ª, —á—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã –Ω–µ—Ç
        raise HTTPException(status_code=404, detail="–ê–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞ –≤ –≤–∞—à–µ–º —Ñ–∏–ª–∏–∞–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–º–µ–Ω—É
    active_shift.end_time = datetime.now() # –ò—Å–ø–æ–ª—å–∑—É–µ–º aware datetime
    active_shift.closing_cash = payload.closing_cash
    db.commit()
    db.refresh(active_shift)
    return active_shift


# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –¢–∏–ø–æ–≤ –†–∞—Å—Ö–æ–¥–æ–≤ ---

@app.get("/api/expense_types", tags=["–†–∞—Å—Ö–æ–¥—ã (–í–ª–∞–¥–µ–ª–µ—Ü)"], response_model=List[ExpenseTypeOut])
def get_expense_types(
    employee: Employee = Depends(get_current_company_employee), # <-- –ò–°–ü–†–ê–í–õ–ï–ù–û
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ç–∏–ø—ã —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è –¢–ï–ö–£–©–ï–ô –∫–æ–º–ø–∞–Ω–∏–∏."""
    types = db.query(ExpenseType).filter(
        ExpenseType.company_id == employee.company_id
    ).order_by(ExpenseType.name).all()
    return types

@app.post("/api/expense_types", tags=["–†–∞—Å—Ö–æ–¥—ã (–í–ª–∞–¥–µ–ª–µ—Ü)"], response_model=ExpenseTypeOut)
def create_expense_type(
    payload: ExpenseTypeCreate,
    employee: Employee = Depends(get_company_owner),
    db: Session = Depends(get_db)
):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–∏–ø —Ä–∞—Å—Ö–æ–¥–∞ –¥–ª—è –¢–ï–ö–£–©–ï–ô –∫–æ–º–ø–∞–Ω–∏–∏."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —Ö–æ—Ç—è‰æùËµñ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∞)
    perms = {p.codename for p in employee.role.permissions}
    if 'manage_expense_types' not in perms:
         raise HTTPException(status_code=403, detail="–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞–º–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –∏–º–µ–Ω–∏ –í–ù–£–¢–†–ò –∫–æ–º–ø–∞–Ω–∏–∏
    if db.query(ExpenseType).filter(ExpenseType.name == payload.name, ExpenseType.company_id == employee.company_id).first():
        raise HTTPException(status_code=400, detail="–¢–∏–ø —Ä–∞—Å—Ö–æ–¥–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

    new_type = ExpenseType(
        name=payload.name,
        company_id=employee.company_id
    )
    db.add(new_type)
    db.commit()
    db.refresh(new_type)
    return new_type

@app.patch("/api/expense_types/{type_id}", tags=["–†–∞—Å—Ö–æ–¥—ã (–í–ª–∞–¥–µ–ª–µ—Ü)"], response_model=ExpenseTypeOut)
def update_expense_type(
    type_id: int,
    payload: ExpenseTypeUpdate,
    employee: Employee = Depends(get_company_owner),
    db: Session = Depends(get_db)
):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ä–∞—Å—Ö–æ–¥–∞ –¢–ï–ö–£–©–ï–ô –∫–æ–º–ø–∞–Ω–∏–∏."""
    perms = {p.codename for p in employee.role.permissions}
    if 'manage_expense_types' not in perms:
         raise HTTPException(status_code=403, detail="–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞–º–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤.")

    exp_type = db.query(ExpenseType).filter(
        ExpenseType.id == type_id,
        ExpenseType.company_id == employee.company_id
    ).first()
    if not exp_type:
        raise HTTPException(status_code=404, detail="–¢–∏–ø —Ä–∞—Å—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
    if payload.name != exp_type.name and db.query(ExpenseType).filter(ExpenseType.name == payload.name, ExpenseType.company_id == employee.company_id).first():
         raise HTTPException(status_code=400, detail="–¢–∏–ø —Ä–∞—Å—Ö–æ–¥–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–≤—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

    exp_type.name = payload.name
    db.commit()
    db.refresh(exp_type)
    return exp_type

@app.delete("/api/expense_types/{type_id}", tags=["–†–∞—Å—Ö–æ–¥—ã (–í–ª–∞–¥–µ–ª–µ—Ü)"], status_code=status.HTTP_204_NO_CONTENT)
def delete_expense_type(
    type_id: int,
    employee: Employee = Depends(get_company_owner),
    db: Session = Depends(get_db)
):
    """–£–¥–∞–ª—è–µ—Ç —Ç–∏–ø —Ä–∞—Å—Ö–æ–¥–∞ –¢–ï–ö–£–©–ï–ô –∫–æ–º–ø–∞–Ω–∏–∏."""
    perms = {p.codename for p in employee.role.permissions}
    if 'manage_expense_types' not in perms:
         raise HTTPException(status_code=403, detail="–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞–º–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤.")

    exp_type = db.query(ExpenseType).filter(
        ExpenseType.id == type_id,
        ExpenseType.company_id == employee.company_id
    ).first()
    if not exp_type:
        raise HTTPException(status_code=404, detail="–¢–∏–ø —Ä–∞—Å—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ —Ç–∏–ø –≤ –∫–∞–∫–∏—Ö-–ª–∏–±–æ —Ä–∞—Å—Ö–æ–¥–∞—Ö
    expense_count = db.query(Expense).filter(Expense.expense_type_id == type_id).count()
    if expense_count > 0:
        raise HTTPException(status_code=400, detail=f"–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ç–∏–ø '{exp_type.name}', —Ç–∞–∫ –∫–∞–∫ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ {expense_count} –∑–∞–ø–∏—Å—è—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö.")

    db.delete(exp_type)
    db.commit()
    return None

# === –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê (–†–ê–°–•–û–î–´) ===

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –†–∞—Å—Ö–æ–¥–æ–≤ ---

# main.py (–ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–ú–ï–ù–Ø–ï–¢ create_expense)
@app.post("/api/expenses", tags=["–†–∞—Å—Ö–æ–¥—ã"], response_model=ExpenseOut)
def create_expense(
    payload: ExpenseCreate, # –¢–µ–ø–µ—Ä—å payload —Å–æ–¥–µ—Ä–∂–∏—Ç shift_id
    employee: Employee = Depends(get_current_active_employee), 
    db: Session = Depends(get_db)
):
    if employee.company_id is None:
        raise HTTPException(status_code=403, detail="–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

    perms = {p.codename for p in employee.role.permissions}
    if 'add_expense' not in perms:
        raise HTTPException(status_code=403, detail="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤.")

    expense_type = db.query(ExpenseType).filter(
        ExpenseType.id == payload.expense_type_id,
        ExpenseType.company_id == employee.company_id
    ).first()
    if not expense_type:
        raise HTTPException(status_code=404, detail="–£–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–∞—Å—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    shift_id_for_expense = None 

    if employee.role.name == '–í–ª–∞–¥–µ–ª–µ—Ü':
        # –í–ª–∞–¥–µ–ª–µ—Ü: –ò—Å–ø–æ–ª—å–∑—É–µ–º shift_id –∏–∑ payload (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –≤–∞–ª–∏–¥–µ–Ω)
        if payload.shift_id is not None:
            shift_check = db.query(Shift).filter(
                Shift.id == payload.shift_id, 
                Shift.company_id == employee.company_id,
                Shift.end_time == None).first()
            if shift_check:
                shift_id_for_expense = payload.shift_id
                print(f"[Expense] –í–ª–∞–¥–µ–ª–µ—Ü ID={employee.id} –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥ –∫ —Å–º–µ–Ω–µ ID={payload.shift_id}")
            else:
                print(f"[Expense] –í–ª–∞–¥–µ–ª–µ—Ü ID={employee.id} –ø—ã—Ç–∞–ª—Å—è –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ä–∞—Å—Ö–æ–¥ –∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π/—á—É–∂–æ–π —Å–º–µ–Ω–µ {payload.shift_id}. –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ –û–±—â–∏–π.")
                shift_id_for_expense = None 
        else:
            shift_id_for_expense = None
            print(f"[Expense] –í–ª–∞–¥–µ–ª–µ—Ü ID={employee.id} –¥–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Ö–æ–¥ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ (–û–±—â–∏–π).")
    else:
        # –°–æ—Ç—Ä—É–¥–Ω–∏–∫: –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞ –≤ –µ–≥–æ —Ñ–∏–ª–∏–∞–ª–µ
        active_shift = db.query(Shift).filter(
            Shift.company_id == employee.company_id,
            Shift.location_id == employee.location_id,
            Shift.end_time == None
        ).first()
        if not active_shift:
            raise HTTPException(status_code=400, detail="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞. –û—Ç–∫—Ä–æ–π—Ç–µ —Å–º–µ–Ω—É.")
        shift_id_for_expense = active_shift.id 
        print(f"[Expense] –°–æ—Ç—Ä—É–¥–Ω–∏–∫ ID={employee.id} –¥–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Ö–æ–¥ –∫ —Å–º–µ–Ω–µ ID={active_shift.id}")

    new_expense = Expense(
        amount=payload.amount,
        notes=payload.notes,
        expense_type_id=payload.expense_type_id,
        shift_id=shift_id_for_expense, 
        company_id=employee.company_id 
    )

    try:
        db.add(new_expense)
        db.commit()
        db.refresh(new_expense)
        db.refresh(new_expense, attribute_names=['expense_type'])
        print(f"[Expense] –†–∞—Å—Ö–æ–¥ ID={new_expense.id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
        return new_expense
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

# main.py (–ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–ú–ï–ù–Ø–ï–¢ get_expenses)

@app.get("/api/expenses", tags=["–†–∞—Å—Ö–æ–¥—ã"], response_model=List[ExpenseOut])
def get_expenses(
    start_date: date, # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
    end_date: date,   # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞
    employee: Employee = Depends(get_current_active_employee), # –õ—é–±–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏
    # –î–û–ë–ê–í–õ–ï–ù –≠–¢–û–¢ –ü–ê–†–ê–ú–ï–¢–†:
    location_id: Optional[int] = Query(None), # <-- –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ñ–∏–ª–∏–∞–ª—É
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤ –¢–ï–ö–£–©–ï–ô –∫–æ–º–ø–∞–Ω–∏–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ñ–∏–ª–∏–∞–ª—É."""
    # === –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–®–ò–ë–ö–ò: –ò—Å–ø–æ–ª—å–∑—É–µ–º company_id –≤–º–µ—Å—Ç–æ is_super_admin ===
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –°—É–ø–µ—Ä-–ê–¥–º–∏–Ω
    if employee.company_id is None:
         # –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É –ø–æ–∫–∞ –Ω–µ –¥–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—Ö–æ–¥–∞–º –∫–æ–º–ø–∞–Ω–∏–π
         raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—Ö–æ–¥–∞–º –¥–ª—è SuperAdmin –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.")
    # === –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ===

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤
    perms = {p.codename for p in employee.role.permissions}
    # –†–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–æ –Ω–∞ –æ—Ç—á–µ—Ç –ø–æ —Å–º–µ–Ω–µ –ò–õ–ò –Ω–∞ –ø–æ–ª–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
    if 'view_shift_report' not in perms and 'view_full_reports' not in perms:
        raise HTTPException(status_code=403, detail="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤.")

    print(f"[Expense] –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID={employee.company_id} –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–∏–æ–¥–∞ (–≤–∫–ª—é—á–∞—è –≤–µ—Å—å –¥–µ–Ω—å end_date)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º datetime –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å DateTime –ø–æ–ª–µ–º created_at
    start_datetime = datetime.combine(start_date, datetime.min.time())
    # –ö–æ–Ω–µ—Ü –¥–Ω—è end_date (23:59:59.999999)
    end_datetime = datetime.combine(end_date, datetime.max.time())

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–ö–ò –ó–ê–ì–†–£–ó–ö–ò ---
    # –ù–∞—á–∏–Ω–∞–µ–º —Å—Ç—Ä–æ–∏—Ç—å –±–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, —Å—Ä–∞–∑—É –ø–æ–¥–≥—Ä—É–∂–∞—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    query = db.query(Expense).options(
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –¢–∏–ø –†–∞—Å—Ö–æ–¥–∞
        joinedload(Expense.expense_type),
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –°–º–µ–Ω—É –∏ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å–º–µ–Ω—ã
        joinedload(Expense.shift).joinedload(Shift.employee)
    ).filter(
    # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ---
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
        Expense.company_id == employee.company_id,
        Expense.created_at >= start_datetime,
        Expense.created_at <= end_datetime # –ò—Å–ø–æ–ª—å–∑—É–µ–º <= —Å –∫–æ–Ω—Ü–æ–º –¥–Ω—è
    ) # –ü–æ–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º .all()

    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ü–û –§–ò–õ–ò–ê–õ–£ –î–õ–Ø –†–ê–°–•–û–î–û–í ---
    if employee.role.name == '–í–ª–∞–¥–µ–ª–µ—Ü':
        # –í–ª–∞–¥–µ–ª–µ—Ü: —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ location_id, –ï–°–õ–ò –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω
        if location_id is not None:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∏–ª–∏–∞–ª –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–æ–º–ø–∞–Ω–∏–∏ (–∑–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
            loc_check = db.query(Location).filter(Location.id == location_id, Location.company_id == employee.company_id).first()
            if not loc_check:
                 raise HTTPException(status_code=404, detail="–£–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∏–ª–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã:
            # 1. –ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ —Å–º–µ–Ω–∞–º –ò–ú–ï–ù–ù–û –≠–¢–û–ì–û —Ñ–∏–ª–∏–∞–ª–∞
            # 2. –ò–õ–ò "–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã" –í–ª–∞–¥–µ–ª—å—Ü–∞ (–≥–¥–µ shift_id = NULL)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º LEFT JOIN (isouter=True), —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –±–µ–∑ —Å–º–µ–Ω—ã
            query = query.join(Shift, Expense.shift_id == Shift.id, isouter=True).filter(
                 or_(
                      Shift.location_id == location_id, # –†–∞—Å—Ö–æ–¥—ã —Å–º–µ–Ω —ç—Ç–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
                      Expense.shift_id == None          # –ò–õ–ò –æ–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
                 )
            )
            print(f"[–†–∞—Å—Ö–æ–¥—ã] –í–ª–∞–¥–µ–ª–µ—Ü ID={employee.id} —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã –ø–æ —Ñ–∏–ª–∏–∞–ª—É ID={location_id}")
        else:
             # –ï—Å–ª–∏ location_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –í–ª–∞–¥–µ–ª–µ—Ü –≤–∏–¥–∏—Ç –í–°–ï —Ä–∞—Å—Ö–æ–¥—ã –∫–æ–º–ø–∞–Ω–∏–∏ (–≤—Å–µ—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤ + –æ–±—â–∏–µ)
             print(f"[–†–∞—Å—Ö–æ–¥—ã] –í–ª–∞–¥–µ–ª–µ—Ü ID={employee.id} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã –í–°–ï–• —Ñ–∏–ª–∏–∞–ª–æ–≤ –∏ –û–±—â–∏–µ.")
             # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å query –Ω–µ –Ω—É–∂–Ω–æ, –±–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ company_id —É–∂–µ –µ—Å—Ç—å
             pass
    else:
        # –û–ë–´–ß–ù–´–ô –°–û–¢–†–£–î–ù–ò–ö: –í—Å–µ–≥–¥–∞ –≤–∏–¥–∏—Ç —Ä–∞—Å—Ö–æ–¥—ã –¢–û–õ–¨–ö–û —Å–≤–æ–µ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ —Å–º–µ–Ω–∞–º
        if employee.location_id is None:
             # –ï—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ñ–∏–ª–∏–∞–ª—É, –æ–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å —Ä–∞—Å—Ö–æ–¥—ã —Å–º–µ–Ω
             print(f"[–†–∞—Å—Ö–æ–¥—ã][–û–®–ò–ë–ö–ê] –°–æ—Ç—Ä—É–¥–Ω–∏–∫ ID={employee.id} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ñ–∏–ª–∏–∞–ª—É! –ù–µ –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å —Ä–∞—Å—Ö–æ–¥—ã —Å–º–µ–Ω.")
             return [] # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ —Å–º–µ–Ω–∞–º –ï–ì–û —Ñ–∏–ª–∏–∞–ª–∞
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º INNER JOIN (isouter=False - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é), —Ç.–∫. —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤–∏–¥–∏—Ç –¢–û–õ–¨–ö–û —Ä–∞—Å—Ö–æ–¥—ã —Å–º–µ–Ω
        query = query.join(Shift, Expense.shift_id == Shift.id).filter(
            Shift.location_id == employee.location_id
        )
        print(f"[–†–∞—Å—Ö–æ–¥—ã] –°–æ—Ç—Ä—É–¥–Ω–∏–∫ ID={employee.id} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã —Å–≤–æ–µ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞ ID={employee.location_id}")
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ü–û –§–ò–õ–ò–ê–õ–£ ---

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –≤–≤–µ—Ä—Ö—É) –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    expenses = query.order_by(Expense.created_at.desc()).all()

    print(f"[Expense] –ù–∞–π–¥–µ–Ω–æ {len(expenses)} —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥ (—Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞ —Ñ–∏–ª–∏–∞–ª–∞).")
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (FastAPI —Å–∞–º –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ JSON –±–ª–∞–≥–æ–¥–∞—Ä—è response_model)
    return expenses


@app.patch("/api/expenses/{expense_id}", tags=["–†–∞—Å—Ö–æ–¥—ã"], response_model=ExpenseOut)
def update_expense(
    expense_id: int,
    payload: ExpenseUpdate,
    employee: Employee = Depends(get_current_active_employee),
    db: Session = Depends(get_db)
):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–∞—Å—Ö–æ–¥."""
    if employee.company_id is None:
         raise HTTPException(status_code=403, detail="–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã.")

    # –ù–∞—Ö–æ–¥–∏–º —Ä–∞—Å—Ö–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
    expense = db.query(Expense).options(
         joinedload(Expense.shift) # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–º–µ–Ω—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã
    ).filter(
        Expense.id == expense_id,
        Expense.company_id == employee.company_id # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ä–∞—Å—Ö–æ–¥ –∏–∑ —Ç–æ–π –∂–µ –∫–æ–º–ø–∞–Ω–∏–∏
    ).first()

    if not expense:
        raise HTTPException(status_code=404, detail="–†–∞—Å—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ü—Ä–∞–≤ –Ω–∞ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ---
    can_edit = False
    perms = {p.codename for p in employee.role.permissions}

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å–º–µ–Ω–∞, –∫ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏–≤—è–∑–∞–Ω —Ä–∞—Å—Ö–æ–¥
    is_shift_active = expense.shift and expense.shift.end_time is None
    
    # 1. –ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –≤ –¢–ï–ö–£–©–ï–ô –ê–ö–¢–ò–í–ù–û–ô —Å–º–µ–Ω–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–æ 'add_expense'
    if is_shift_active and 'add_expense' in perms:
          can_edit = True
          print(f"[Expense Update] –†–∞–∑—Ä–µ—à–µ–Ω–æ: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω–µ.")

    # 2. –í–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –õ–Æ–ë–´–ï —Ä–∞—Å—Ö–æ–¥—ã —Å–≤–æ–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
    if employee.role.name == '–í–ª–∞–¥–µ–ª–µ—Ü':
         can_edit = True
         print(f"[Expense Update] –†–∞–∑—Ä–µ—à–µ–Ω–æ: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –í–ª–∞–¥–µ–ª—å—Ü–µ–º.")

    if not can_edit:
        print(f"[Expense Update] –ó–∞–ø—Ä–µ—â–µ–Ω–æ: –°–æ—Ç—Ä—É–¥–Ω–∏–∫ ID={employee.id} –Ω–µ –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥ ID={expense_id} (–°–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤).")
        raise HTTPException(status_code=403, detail="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∏–∑ –∑–∞–∫—Ä—ã—Ç–æ–π —Å–º–µ–Ω—ã).")
    # --- –ö–æ–Ω–µ—Ü –ü—Ä–æ–≤–µ—Ä–∫–∏ –ü—Ä–∞–≤ ---


    update_data = payload.dict(exclude_unset=True) # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø —Ä–∞—Å—Ö–æ–¥–∞, –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω
    if 'expense_type_id' in update_data:
        new_expense_type = db.query(ExpenseType).filter(
            ExpenseType.id == update_data['expense_type_id'],
            ExpenseType.company_id == employee.company_id
        ).first()
        if not new_expense_type:
            raise HTTPException(status_code=404, detail="–ù–æ–≤—ã–π —Ç–∏–ø —Ä–∞—Å—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    print(f"[Expense Update] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ ID={expense_id}. –î–∞–Ω–Ω—ã–µ:", update_data)
    for key, value in update_data.items():
        setattr(expense, key, value)

    try:
        db.commit()
        db.refresh(expense)
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø —Ä–∞—Å—Ö–æ–¥–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        db.refresh(expense, attribute_names=['expense_type'])
        print(f"[Expense Update] –†–∞—Å—Ö–æ–¥ ID={expense_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
        return expense
    except Exception as e:
        db.rollback()
        import traceback
        print(f"!!! –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞ ID={expense_id}:\n{traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞: {e}")

# === –ù–ê–ß–ê–õ–û –ù–û–í–û–ô –§–£–ù–ö–¶–ò–ò DELETE ===
@app.delete("/api/expenses/{expense_id}", tags=["–†–∞—Å—Ö–æ–¥—ã"], status_code=status.HTTP_204_NO_CONTENT)
def delete_expense(
    expense_id: int,
    employee: Employee = Depends(get_current_active_employee),
    db: Session = Depends(get_db),
    password: str = Query(...) # –¢—Ä–µ–±—É–µ–º –ø–∞—Ä–æ–ª—å –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–ø—Ä–æ—Å–∞
):
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ —Ä–∞—Å—Ö–æ–¥–µ (–¢–û–õ–¨–ö–û –î–õ–Ø –í–õ–ê–î–ï–õ–¨–¶–ê –ò –¢–†–ï–ë–£–ï–¢ –ü–ê–†–û–õ–¨)."""
    
    if employee.company_id is None:
        raise HTTPException(status_code=403, detail="–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∫–æ–º–ø–∞–Ω–∏–π.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –¢–æ–ª—å–∫–æ –í–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Ä–∞—Å—Ö–æ–¥—ã
    if employee.role.name != '–í–ª–∞–¥–µ–ª–µ—Ü':
        raise HTTPException(status_code=403, detail="–¢–æ–ª—å–∫–æ –í–ª–∞–¥–µ–ª–µ—Ü –∫–æ–º–ø–∞–Ω–∏–∏ –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∑–∞–ø–∏—Å–∏ –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö.")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –í–ª–∞–¥–µ–ª—å—Ü–∞
    if employee.password != password:
        raise HTTPException(status_code=403, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –í–ª–∞–¥–µ–ª—å—Ü–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è.")

    # –ù–∞—Ö–æ–¥–∏–º —Ä–∞—Å—Ö–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
    expense = db.query(Expense).options(
        joinedload(Expense.shift)
    ).filter(
        Expense.id == expense_id,
        Expense.company_id == employee.company_id # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ä–∞—Å—Ö–æ–¥ –∏–∑ —Ç–æ–π –∂–µ –∫–æ–º–ø–∞–Ω–∏–∏
    ).first()

    if not expense:
        raise HTTPException(status_code=404, detail="–†–∞—Å—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")

    # –ó–∞–ø—Ä–µ—â–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å–º–µ–Ω–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –º–µ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
    if expense.shift and expense.shift.end_time is not None:
        raise HTTPException(status_code=400, detail="–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ –∏–∑ –∑–∞–∫—Ä—ã—Ç–æ–π —Å–º–µ–Ω—ã.")

    # –£–¥–∞–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥
    try:
        db.delete(expense)
        db.commit()
        print(f"[Expense Delete] –†–∞—Å—Ö–æ–¥ ID={expense_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –í–ª–∞–¥–µ–ª—å—Ü–µ–º ID={employee.id}.")
        return None
    except Exception as e:
        db.rollback()
        import traceback
        print(f"!!! –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞ ID={expense_id}:\n{traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞: {e}")
# === –ö–û–ù–ï–¶ –ù–û–í–û–ô –§–£–ù–ö–¶–ò–ò DELETE ===

# === –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê (–†–ê–°–•–û–î–´) ===

# main.py (–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –±–ª–æ–∫ –¥–ª—è –í—ã–¥–∞—á–∏)

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –í—ã–¥–∞—á–∏ –ó–∞–∫–∞–∑–æ–≤ ---
# main.py (–ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ—Ç get_orders_ready_for_issue)

@app.get("/api/orders/ready_for_issue", tags=["–í—ã–¥–∞—á–∞"], response_model=List[OrderOut])
def get_orders_ready_for_issue(
    employee: Employee = Depends(get_current_active_employee), 
    db: Session = Depends(get_db),
    # --- –ù–û–í–´–ô –ü–ê–†–ê–ú–ï–¢–†: –§–∏–ª—å—Ç—Ä –ø–æ —Ñ–∏–ª–∏–∞–ª—É (–¥–ª—è –í–ª–∞–¥–µ–ª—å—Ü–∞) ---
    location_id: Optional[int] = Query(None) 
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ'.
    - –í–ª–∞–¥–µ–ª–µ—Ü: –ú–æ–∂–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ location_id –∏–ª–∏ –≤–∏–¥–µ—Ç—å –≤—Å–µ.
    - –°–æ—Ç—Ä—É–¥–Ω–∏–∫: –í—Å–µ–≥–¥–∞ –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã —Å–≤–æ–µ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞.
    –¢—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤–∞ 'issue_orders'.
    """
    if employee.company_id is None:
        raise HTTPException(status_code=403, detail="–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è SuperAdmin.")

    perms = {p.codename for p in employee.role.permissions}
    if 'issue_orders' not in perms:
        raise HTTPException(status_code=403, detail="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –≤—ã–¥–∞—á–∏.")

    query = db.query(Order).options(
        joinedload(Order.client) 
    ).filter(
        Order.company_id == employee.company_id,
        Order.status == "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ" # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≤—ã–¥–∞—á–∏
    )

    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ü–û –§–ò–õ–ò–ê–õ–£ ---
    if employee.role.name == '–í–ª–∞–¥–µ–ª–µ—Ü':
        if location_id is not None:
            loc_check = db.query(Location).filter(Location.id == location_id, Location.company_id == employee.company_id).first()
            if not loc_check:
                 raise HTTPException(status_code=404, detail="–£–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∏–ª–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            query = query.filter(Order.location_id == location_id)
            print(f"[–í—ã–¥–∞—á–∞] –í–ª–∞–¥–µ–ª–µ—Ü ID={employee.id} —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ —Ñ–∏–ª–∏–∞–ª—É ID={location_id}")
        else:
             print(f"[–í—ã–¥–∞—á–∞] –í–ª–∞–¥–µ–ª–µ—Ü ID={employee.id} –≤–∏–¥–∏—Ç –≥–æ—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –í–°–ï–• —Ñ–∏–ª–∏–∞–ª–æ–≤.")
             pass # –í–ª–∞–¥–µ–ª–µ—Ü –≤–∏–¥–∏—Ç –≤—Å–µ, –µ—Å–ª–∏ location_id –Ω–µ —É–∫–∞–∑–∞–Ω
    else:
        # –û–ë–´–ß–ù–´–ô –°–û–¢–†–£–î–ù–ò–ö: –í—Å–µ–≥–¥–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –µ–≥–æ location_id
        if employee.location_id is None:
             print(f"[–í—ã–¥–∞—á–∞][–û–®–ò–ë–ö–ê] –°–æ—Ç—Ä—É–¥–Ω–∏–∫ ID={employee.id} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ñ–∏–ª–∏–∞–ª—É!")
             return [] 
        query = query.filter(Order.location_id == employee.location_id)
        print(f"[–í—ã–¥–∞—á–∞] –°–æ—Ç—Ä—É–¥–Ω–∏–∫ ID={employee.id} –≤–∏–¥–∏—Ç –≥–æ—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã —Å–≤–æ–µ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞ ID={employee.location_id}")
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    orders = query.order_by(Order.client_id, Order.id).all() 

    print(f"[–í—ã–¥–∞—á–∞] –ù–∞–π–¥–µ–Ω–æ {len(orders)} –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ (—Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞ —Ñ–∏–ª–∏–∞–ª–∞).")
    return orders

@app.post("/api/orders/issue", tags=["–í—ã–¥–∞—á–∞"])
def issue_orders(
    payload: IssuePayload,
    employee: Employee = Depends(get_current_active_employee),
    db: Session = Depends(get_db)
):
    """
    –û—Ñ–æ—Ä–º–ª—è–µ—Ç –≤—ã–¥–∞—á—É –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–∫–∞–∑–æ–≤.
    –¢—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤–∞ 'issue_orders' –∏ –∞–∫—Ç–∏–≤–Ω—É—é —Å–º–µ–Ω—É.
    """
    if employee.company_id is None:
        raise HTTPException(status_code=403, detail="–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è SuperAdmin.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    perms = {p.codename for p in employee.role.permissions}
    if 'issue_orders' not in perms:
        raise HTTPException(status_code=403, detail="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–¥–∞—á—É –∑–∞–∫–∞–∑–æ–≤.")

    order_ids = [item.order_id for item in payload.orders]
    
    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏
    orders_to_issue = db.query(Order).filter(
        Order.id.in_(order_ids),
        Order.company_id == employee.company_id
    ).all()

    # --- –ù–û–í–´–ô –ë–õ–û–ö –ü–†–û–í–ï–†–ö–ò –°–ú–ï–ù–´ (–≤—Å—Ç–∞–≤–∏—Ç—å —Å—é–¥–∞) ---
    if not orders_to_issue:
         # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é, –Ω–æ –Ω—É–∂–Ω–∞ –∑–¥–µ—Å—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
         raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    # 1. –ü–æ–ª—É—á–∞–µ–º location_id –∏–∑ –ü–ï–†–í–û–ì–û –∑–∞–∫–∞–∑–∞
    order_location_id = orders_to_issue[0].location_id

    # 2. –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –∑–∞–∫–∞–∑—ã –∏–∑ –û–î–ù–û–ì–û —Ñ–∏–ª–∏–∞–ª–∞
    if not all(o.location_id == order_location_id for o in orders_to_issue):
        raise HTTPException(status_code=400, detail="–ù–µ–ª—å–∑—è –≤—ã–¥–∞—Ç—å –∑–∞–∫–∞–∑—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.")

    # 3. –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–º–µ–Ω—É –≤ –§–ò–õ–ò–ê–õ–ï –ó–ê–ö–ê–ó–ê (–∞ –Ω–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É)
    active_shift = db.query(Shift).filter(
        Shift.company_id == employee.company_id,
        Shift.location_id == order_location_id, # <-- –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
        Shift.end_time == None
    ).first()

    if not active_shift:
        # –ù–∞—Ö–æ–¥–∏–º –∏–º—è —Ñ–∏–ª–∏–∞–ª–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–π –æ—à–∏–±–∫–∏
        location_name_obj = db.query(Location.name).filter(Location.id == order_location_id).first()
        location_name = location_name_obj[0] if location_name_obj else f"ID {order_location_id}"
        raise HTTPException(status_code=400, detail=f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã –≤ —Ñ–∏–ª–∏–∞–ª–µ '{location_name}'. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –≤—ã–¥–∞—á—É.")
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---

    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    if len(orders_to_issue) != len(order_ids):
        found_ids = {o.id for o in orders_to_issue}
        missing_ids = [oid for oid in order_ids if oid not in found_ids]
        raise HTTPException(status_code=404, detail=f"–ó–∞–∫–∞–∑—ã —Å ID {missing_ids} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")
        
    for order in orders_to_issue:
        if order.status != "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ":
            raise HTTPException(status_code=400, detail=f"–ó–∞–∫–∞–∑ #{order.id} ({order.track_code}) –Ω–µ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ (—Å—Ç–∞—Ç—É—Å: {order.status}).")
            
    # –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—É–º–º—ã –∫ –æ–ø–ª–∞—Ç–µ
    total_cost_to_pay = 0
    order_weights = {item.order_id: item.weight_kg for item in payload.orders}
    
    for order in orders_to_issue:
        weight = order_weights.get(order.id)
        if not weight or weight <= 0:
             raise HTTPException(status_code=400, detail=f"–ù–µ —É–∫–∞–∑–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order.id}.")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—Ä–∞—Å—á–∏—Ç–∞–Ω–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å, –ï–°–õ–ò –æ–Ω–∞ –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Å—á–∏—Ç–∞–µ–º –ø–æ –¥–∞–Ω–Ω—ã–º –∏–∑ payload
        if order.calculated_final_cost_som and order.calculated_weight_kg == weight:
             cost = order.calculated_final_cost_som
        else:
             cost = weight * payload.price_per_kg_usd * payload.exchange_rate_usd
        
        total_cost_to_pay += cost

    total_paid = payload.paid_cash + payload.paid_card
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã (–æ–ø–ª–∞—á–µ–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ, —á–µ–º –∫ –æ–ø–ª–∞—Ç–µ)
    # –î–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤ 1 —Å–æ–º
    if total_paid < (total_cost_to_pay - 1): 
         raise HTTPException(status_code=400, detail=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø–ª–∞—Ç—ã. –ö –æ–ø–ª–∞—Ç–µ: {total_cost_to_pay:.2f} —Å–æ–º, –û–ø–ª–∞—á–µ–Ω–æ: {total_paid:.2f} —Å–æ–º.")

    # –û—Ñ–æ—Ä–º–ª—è–µ–º –≤—ã–¥–∞—á—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
    now = datetime.now() # –í—Ä–µ–º—è –≤—ã–¥–∞—á–∏
    issued_count = 0
    try:
        for order in orders_to_issue:
            item_data = next((item for item in payload.orders if item.order_id == order.id), None)
            if item_data: # –î–æ–ª–∂–µ–Ω –≤—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è
                order.status = "–í—ã–¥–∞–Ω"
                order.weight_kg = item_data.weight_kg # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –≤–µ—Å –ø—Ä–∏ –≤—ã–¥–∞—á–µ
                order.price_per_kg_usd = payload.price_per_kg_usd
                order.exchange_rate_usd = payload.exchange_rate_usd
                # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º final_cost_som –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤—ã–¥–∞—á–µ
                order.final_cost_som = (item_data.weight_kg * payload.price_per_kg_usd * payload.exchange_rate_usd)
                
                # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–ª–∞—Ç—É –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - –¥–µ–ª–∏–º –ø–æ—Ä–æ–≤–Ω—É)
                # TODO: –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                order.paid_cash_som = payload.paid_cash / len(orders_to_issue)
                order.paid_card_som = payload.paid_card / len(orders_to_issue)
                order.card_payment_type = payload.card_payment_type if payload.paid_card > 0 else None
                
                order.issued_at = now # –í—Ä–µ–º—è –≤—ã–¥–∞—á–∏
                order.shift_id = active_shift.id # –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Å–º–µ–Ω–µ
                order.reverted_at = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤–æ–∑–≤—Ä–∞—Ç–∞, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
                issued_count += 1
                
        db.commit()
        print(f"[–í—ã–¥–∞—á–∞] –£—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ {issued_count} –∑–∞–∫–∞–∑–æ–≤. –°–º–µ–Ω–∞ ID={active_shift.id}, –°–æ—Ç—Ä—É–¥–Ω–∏–∫ ID={employee.id}")
        return {"status": "ok", "message": f"–£—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ {issued_count} –∑–∞–∫–∞–∑–æ–≤."}
        
    except Exception as e:
        db.rollback()
        import traceback
        print(f"!!! –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –≤—ã–¥–∞—á–∏:\n{traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –≤—ã–¥–∞—á–∏: {e}")


# main.py (–ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–ú–ï–ù–Ø–ï–¢ get_issued_orders)

@app.get("/api/orders/issued", tags=["–í—ã–¥–∞—á–∞"], response_model=List[OrderOut])
def get_issued_orders(
    start_date: date, 
    end_date: date,
    employee: Employee = Depends(get_current_active_employee),
    db: Session = Depends(get_db),
    # --- –ù–û–í–´–ô –ù–ï–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –ü–ê–†–ê–ú–ï–¢–† ---
    location_id: Optional[int] = Query(None)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤—ã–¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥.
    - –í–ª–∞–¥–µ–ª–µ—Ü: –ú–æ–∂–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ location_id –∏–ª–∏ –≤–∏–¥–µ—Ç—å –≤—Å–µ.
    - –°–æ—Ç—Ä—É–¥–Ω–∏–∫: –í–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–π —Ñ–∏–ª–∏–∞–ª.
    """
    if employee.company_id is None:
        raise HTTPException(status_code=403, detail="–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è SuperAdmin.")
        
    perms = {p.codename for p in employee.role.permissions}
    if 'view_shift_report' not in perms and 'view_full_reports' not in perms:
        raise HTTPException(status_code=403, detail="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–¥–∞–Ω–Ω—ã—Ö.")

    print(f"[–í—ã–¥–∞—á–∞ –ò—Å—Ç–æ—Ä–∏—è] –ó–∞–ø—Ä–æ—Å –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID={employee.company_id} –∑–∞ {start_date} - {end_date}")

    start_datetime = datetime.combine(start_date, datetime.min.time())
    end_datetime = datetime.combine(end_date, datetime.max.time())

    query = db.query(Order).options(
        joinedload(Order.client)
    ).filter(
        Order.company_id == employee.company_id,
        Order.status == "–í—ã–¥–∞–Ω",
        Order.issued_at >= start_datetime,
        Order.issued_at <= end_datetime
    )

    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ü–û –§–ò–õ–ò–ê–õ–£ ---
    if employee.role.name == '–í–ª–∞–¥–µ–ª–µ—Ü':
        if location_id is not None:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª–∏–∞–ª –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            loc_check = db.query(Location).filter(Location.id == location_id, Location.company_id == employee.company_id).first()
            if not loc_check:
                 raise HTTPException(status_code=404, detail="–£–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∏–ª–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            query = query.filter(Order.location_id == location_id)
            print(f"[–í—ã–¥–∞—á–∞ –ò—Å—Ç–æ—Ä–∏—è] –í–ª–∞–¥–µ–ª–µ—Ü ID={employee.id} —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ —Ñ–∏–ª–∏–∞–ª—É ID={location_id}")
        # else: –í–ª–∞–¥–µ–ª–µ—Ü –≤–∏–¥–∏—Ç –≤—Å–µ, –µ—Å–ª–∏ location_id –Ω–µ —É–∫–∞–∑–∞–Ω
            
    else:
        # –û–ë–´–ß–ù–´–ô –°–û–¢–†–£–î–ù–ò–ö: –í—Å–µ–≥–¥–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –µ–≥–æ location_id
        if employee.location_id is None:
             print(f"[–í—ã–¥–∞—á–∞ –ò—Å—Ç–æ—Ä–∏—è][–û–®–ò–ë–ö–ê] –°–æ—Ç—Ä—É–¥–Ω–∏–∫ ID={employee.id} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ñ–∏–ª–∏–∞–ª—É!")
             return [] 
        query = query.filter(Order.location_id == employee.location_id)
        print(f"[–í—ã–¥–∞—á–∞ –ò—Å—Ç–æ—Ä–∏—è] –°–æ—Ç—Ä—É–¥–Ω–∏–∫ ID={employee.id} –≤–∏–¥–∏—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–≤–æ–µ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞ ID={employee.location_id}")
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---

    orders = query.order_by(Order.issued_at.desc()).all()

    print(f"[–í—ã–¥–∞—á–∞ –ò—Å—Ç–æ—Ä–∏—è] –ù–∞–π–¥–µ–Ω–æ {len(orders)} –≤—ã–¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥ (—Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞).")
    return orders

@app.patch("/api/orders/{order_id}/revert_status", tags=["–í—ã–¥–∞—á–∞"], response_model=OrderOut)
def revert_order_status(
    order_id: int,
    employee: Employee = Depends(get_current_active_employee),
    db: Session = Depends(get_db)
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—ã–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ '–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ'.
    –¢—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤–∞ 'issue_orders'. –î–æ—Å—Ç—É–ø–Ω–æ –í–ª–∞–¥–µ–ª—å—Ü—É –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω–µ.
    """
    if employee.company_id is None:
        raise HTTPException(status_code=403, detail="–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è SuperAdmin.")

    perms = {p.codename for p in employee.role.permissions}
    if 'issue_orders' not in perms: # –¢—Ä–µ–±—É–µ–º —Ç–µ –∂–µ –ø—Ä–∞–≤–∞, —á—Ç–æ –∏ –Ω–∞ –≤—ã–¥–∞—á—É
        raise HTTPException(status_code=403, detail="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–º–µ–Ω—É –≤—ã–¥–∞—á–∏.")

    order = db.query(Order).options(joinedload(Order.shift)).filter( # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–º–µ–Ω—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        Order.id == order_id,
        Order.company_id == employee.company_id
    ).first()

    if not order:
        raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")
    if order.status != "–í—ã–¥–∞–Ω":
        raise HTTPException(status_code=400, detail="–ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–í—ã–¥–∞–Ω'.")

    # --- –ü–†–û–í–ï–†–ö–ê –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –í–û–ó–í–†–ê–¢–ê ---
    can_revert = False
    if employee.role.name == '–í–ª–∞–¥–µ–ª–µ—Ü':
        can_revert = True # –í–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –≤—Å–µ–≥–¥–∞
    else:
        # –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –°–ú–ï–ù–ê, –≤ –∫–æ—Ç–æ—Ä—É—é –±—ã–ª–∞ –≤—ã–¥–∞—á–∞, –ï–©–ï –ê–ö–¢–ò–í–ù–ê
        if order.shift and order.shift.end_time is None:
            # –ò –µ—Å–ª–∏ —ç—Ç–æ —Å–º–µ–Ω–∞ –¢–ï–ö–£–©–ï–ì–û –°–û–¢–†–£–î–ù–ò–ö–ê (–¥–æ–ø. –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
            if order.shift.employee_id == employee.id:
                 can_revert = True
    
    if not can_revert:
         raise HTTPException(status_code=403, detail="–û—Ç–º–µ–Ω–∞ –≤—ã–¥–∞—á–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ (—Å–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤).")
    # --- –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò ---

    try:
        order.status = "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ"
        order.reverted_at = datetime.now() # –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        # –û–±–Ω—É–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–¥–∞—á–µ
        order.issued_at = None
        order.shift_id = None
        order.weight_kg = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –≤–µ—Å
        order.final_cost_som = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        order.paid_cash_som = None
        order.paid_card_som = None
        order.card_payment_type = None
        
        db.commit()
        db.refresh(order)
        db.refresh(order, attribute_names=['client']) # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        print(f"[–í—ã–¥–∞—á–∞] –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ID={order_id} –≤–æ–∑–≤—Ä–∞—â–µ–Ω –Ω–∞ '–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ'. –°–æ—Ç—Ä—É–¥–Ω–∏–∫ ID={employee.id}")
        return order
        
    except Exception as e:
        db.rollback()
        import traceback
        print(f"!!! –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ ID={order_id}:\n{traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")

# --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –í–´–î–ê–ß–ò ---

# main.py (–î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –±–ª–æ–∫)

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –û—Ç—á–µ—Ç–æ–≤ (Multi-Tenant) ---

def calculate_shift_report_data(db: Session, shift: Shift) -> ShiftReport:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–¥–Ω–æ–π —Å–º–µ–Ω–µ."""
    
    # 1. –î–æ—Ö–æ–¥—ã (—Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã, –≤—ã–¥–∞–Ω–Ω—ã–µ –≤ –≠–¢–£ —Å–º–µ–Ω—É)
    issued_orders_in_shift = db.query(Order).filter(
        Order.shift_id == shift.id, 
        Order.status == "–í—ã–¥–∞–Ω"
    ).all()
    total_cash_income = sum(o.paid_cash_som for o in issued_orders_in_shift if o.paid_cash_som)
    total_card_income = sum(o.paid_card_som for o in issued_orders_in_shift if o.paid_card_som)

    # 2. –†–∞—Å—Ö–æ–¥—ã (—Ç–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ –≠–¢–û–ô —Å–º–µ–Ω–µ)
    # –ò—Å–∫–ª—é—á–∞–µ–º –ó–ü –∏ –ê–≤–∞–Ω—Å –∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å–º–µ–Ω—ã
    expenses_in_shift = db.query(Expense).join(ExpenseType).filter(
        Expense.shift_id == shift.id,
        ExpenseType.name.notin_(['–ó–∞—Ä–ø–ª–∞—Ç–∞', '–ê–≤–∞–Ω—Å']) 
    ).all()
    total_expenses = sum(exp.amount for exp in expenses_in_shift)

    # 3. –í–æ–∑–≤—Ä–∞—Ç—ã (–ó–∞–∫–∞–∑—ã, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã–µ –í –¢–ï–ß–ï–ù–ò–ï —ç—Ç–æ–π —Å–º–µ–Ω—ã)
    # (–≠—Ç–∞ –ª–æ–≥–∏–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–æ–π, –µ—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –¥—Ä—É–≥—É—é —Å–º–µ–Ω—É, –ø–æ–∫–∞ —É–ø—Ä–æ—â–∞–µ–º)
    total_returns = 0 # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –≤–æ–∑–≤—Ä–∞—Ç–æ–≤, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è

    # 4. –†–∞—Å—á–µ—Ç
    calculated_cash = shift.starting_cash + total_cash_income - total_expenses - total_returns
    discrepancy = None
    if shift.end_time and shift.closing_cash is not None:
        discrepancy = shift.closing_cash - calculated_cash

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã)
    location_name = db.query(Location.name).filter(Location.id == shift.location_id).scalar() or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª–∏–∞–ª"
    employee_name = db.query(Employee.full_name).filter(Employee.id == shift.employee_id).scalar() or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫"

    return ShiftReport(
        shift_id=shift.id,
        shift_start_time=shift.start_time,
        shift_end_time=shift.end_time,
        employee_name=employee_name,
        location_name=location_name,
        starting_cash=shift.starting_cash,
        cash_income=total_cash_income,
        card_income=total_card_income,
        total_expenses=total_expenses,
        total_returns=total_returns,
        calculated_cash=calculated_cash,
        actual_closing_cash=shift.closing_cash,
        discrepancy=discrepancy
    )

@app.get("/api/reports/shift/current", tags=["–û—Ç—á–µ—Ç—ã"], response_model=ShiftReport)
def get_current_shift_report(
    employee: Employee = Depends(get_current_active_employee),
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—á–µ—Ç –¥–ª—è –¢–ï–ö–£–©–ï–ô –ê–ö–¢–ò–í–ù–û–ô —Å–º–µ–Ω—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
    –î–æ—Å—Ç—É–ø–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º —Å –ø—Ä–∞–≤–æ–º 'view_shift_report'.
    """
    if employee.company_id is None:
        raise HTTPException(status_code=403, detail="–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
        
    perms = {p.codename for p in employee.role.permissions}
    if 'view_shift_report' not in perms:
        raise HTTPException(status_code=403, detail="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–∞ –ø–æ —Å–º–µ–Ω–µ.")

    if employee.location_id is None:
         raise HTTPException(status_code=400, detail="–í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Ñ–∏–ª–∏–∞–ª—É.")

    # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–º–µ–Ω—É –≤ —Ñ–∏–ª–∏–∞–ª–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    active_shift = db.query(Shift).filter(
        Shift.company_id == employee.company_id,
        Shift.location_id == employee.location_id,
        Shift.end_time == None
    ).first()

    if not active_shift:
        raise HTTPException(status_code=404, detail="–ê–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞ –≤ –≤–∞—à–µ–º —Ñ–∏–ª–∏–∞–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç
    report_data = calculate_shift_report_data(db, active_shift)
    return report_data

# main.py (–î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –ù–û–í–´–ô —ç–Ω–¥–ø–æ–∏–Ω—Ç)

@app.get("/api/reports/shift/location/{location_id}", tags=["–û—Ç—á–µ—Ç—ã"], response_model=ShiftReport)
def get_current_shift_report_by_location(
    location_id: int,
    employee: Employee = Depends(get_current_active_employee),
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—á–µ—Ç –¥–ª—è –ê–ö–¢–ò–í–ù–û–ô —Å–º–µ–Ω—ã –≤ –£–ö–ê–ó–ê–ù–ù–û–ú –§–ò–õ–ò–ê–õ–ï.
    –î–æ—Å—Ç—É–ø–Ω–æ –í–ª–∞–¥–µ–ª—å—Ü—É –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É —ç—Ç–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞.
    """
    if employee.company_id is None:
        raise HTTPException(status_code=403, detail="–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

    perms = {p.codename for p in employee.role.permissions}
    if 'view_shift_report' not in perms:
        raise HTTPException(status_code=403, detail="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–∞.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ–∏–ª–∏–∞–ª –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–æ–º–ø–∞–Ω–∏–∏
    loc_check = db.query(Location).filter(Location.id == location_id, Location.company_id == employee.company_id).first()
    if not loc_check:
         raise HTTPException(status_code=404, detail="–§–∏–ª–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")

    # –í–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å –ª—é–±–æ–π —Å–≤–æ–π —Ñ–∏–ª–∏–∞–ª
    if employee.role.name != '–í–ª–∞–¥–µ–ª–µ—Ü':
        # –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –º–æ–∂–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π —Ñ–∏–ª–∏–∞–ª
        if employee.location_id != location_id:
             raise HTTPException(status_code=403, detail="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã –¥—Ä—É–≥–∏—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤.")

    # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–º–µ–Ω—É –≤ –£–ö–ê–ó–ê–ù–ù–û–ú —Ñ–∏–ª–∏–∞–ª–µ
    active_shift = db.query(Shift).filter(
        Shift.company_id == employee.company_id,
        Shift.location_id == location_id, # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º location_id –∏–∑ URL
        Shift.end_time == None
    ).first()

    if not active_shift:
        raise HTTPException(status_code=404, detail=f"–ê–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞ –≤ —Ñ–∏–ª–∏–∞–ª–µ '{loc_check.name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç
    report_data = calculate_shift_report_data(db, active_shift)
    return report_data

@app.get("/api/reports/shift/{shift_id}", tags=["–û—Ç—á–µ—Ç—ã"], response_model=ShiftReport)
def get_past_shift_report(
    shift_id: int,
    employee: Employee = Depends(get_current_active_employee),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—á–µ—Ç –¥–ª—è –£–ö–ê–ó–ê–ù–ù–û–ô (–∑–∞–∫—Ä—ã—Ç–æ–π) —Å–º–µ–Ω—ã. –î–æ—Å—Ç—É–ø–Ω–æ –í–ª–∞–¥–µ–ª—å—Ü—É."""
    # (–ú—ã –º–æ–∂–µ–º —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø—Ä–∞–≤–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    perms = {p.codename for p in employee.role.permissions}
    if 'view_full_reports' not in perms: # –¢–æ–ª—å–∫–æ —Ç–µ, –∫—Ç–æ –≤–∏–¥–∏—Ç —Å–≤–æ–¥–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
        raise HTTPException(status_code=403, detail="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç—á–µ—Ç–æ–≤.")

    shift = db.query(Shift).filter(
        Shift.id == shift_id,
        Shift.company_id == employee.company_id # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏
    ).first()

    if not shift:
        raise HTTPException(status_code=404, detail="–°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")

    report_data = calculate_shift_report_data(db, shift)
    return report_data

# main.py (–ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ—Ç get_summary_report)

@app.get("/api/reports/summary", tags=["–û—Ç—á–µ—Ç—ã"]) # –£–±–∏—Ä–∞–µ–º response_model, —Ç.–∫. –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
def get_summary_report(
    start_date: date,
    end_date: date,
    location_id: Optional[int] = Query(None), # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ñ–∏–ª–∏–∞–ª—É
    db: Session = Depends(get_db),
    # –ú–ï–ù–Ø–ï–ú –ó–ê–í–ò–°–ò–ú–û–°–¢–¨ –Ω–∞ get_current_active_employee
    current_employee: Employee = Depends(get_current_active_employee) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –¥–æ—Ö–æ–¥–∞–º, —Ä–∞—Å—Ö–æ–¥–∞–º –∏ —Å–º–µ–Ω–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥.
    - –í–ª–∞–¥–µ–ª–µ—Ü: –ú–æ–∂–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ location_id –∏–ª–∏ –≤–∏–¥–µ—Ç—å –≤—Å–µ.
    - –°–æ—Ç—Ä—É–¥–Ω–∏–∫: –í—Å–µ–≥–¥–∞ –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–π —Ñ–∏–ª–∏–∞–ª.
    –¢—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤–∞ 'view_full_reports'.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ (—Ç–æ–ª—å–∫–æ —Ç–µ, –∫—Ç–æ –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å –ø–æ–ª–Ω—ã–µ –æ—Ç—á–µ—Ç—ã)
    perms = {p.codename for p in current_employee.role.permissions}
    if 'view_full_reports' not in perms:
        raise HTTPException(status_code=403, detail="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–¥–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –Ω–µ –°—É–ø–µ—Ä-–ê–¥–º–∏–Ω
    if current_employee.company_id is None:
        raise HTTPException(status_code=403, detail="–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è SuperAdmin.")

    company_id = current_employee.company_id # ID –∫–æ–º–ø–∞–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

    print(f"[Summary Report] –ó–∞–ø—Ä–æ—Å –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID={company_id}, –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}, —Ñ–∏–ª—å—Ç—Ä —Ñ–∏–ª–∏–∞–ª–∞: {location_id}")

    # --- –õ–û–ì–ò–ö–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –§–ò–õ–ò–ê–õ–û–í –î–õ–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–ò ---
    accessible_location_ids = [] # –°–ø–∏—Å–æ–∫ ID —Ñ–∏–ª–∏–∞–ª–æ–≤, –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –≤ –æ—Ç—á–µ—Ç
    if current_employee.role.name == '–í–ª–∞–¥–µ–ª–µ—Ü':
        if location_id is not None: # –ï—Å–ª–∏ –í–ª–∞–¥–µ–ª–µ—Ü –≤—ã–±—Ä–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∏–ª–∏–∞–ª
             # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª–∏–∞–ª –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
             location = db.query(Location).filter(Location.id == location_id, Location.company_id == company_id).first()
             if not location:
                  raise HTTPException(status_code=404, detail="–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")
             accessible_location_ids = [location_id]
             print(f"[Summary Report] –í–ª–∞–¥–µ–ª–µ—Ü —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ —Ñ–∏–ª–∏–∞–ª—É ID={location_id}")
        else: # –ï—Å–ª–∏ –í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –≤—ã–±—Ä–∞–ª —Ñ–∏–ª–∏–∞–ª (–æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–π –∫–æ–º–ø–∞–Ω–∏–∏)
             # –ü–æ–ª—É—á–∞–µ–º ID –≤—Å–µ—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏
             accessible_location_ids = [loc.id for loc in db.query(Location.id).filter(Location.company_id == company_id).all()]
             print(f"[Summary Report] –í–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –í–°–ï–ú —Ñ–∏–ª–∏–∞–ª–∞–º.")
    else: # –û–±—ã—á–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤–∏–¥–∏—Ç –æ—Ç—á–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ —Å–≤–æ–µ–º—É —Ñ–∏–ª–∏–∞–ª—É
        if current_employee.location_id is None:
             # –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
             raise HTTPException(status_code=400, detail="–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ñ–∏–ª–∏–∞–ª—É.")
        accessible_location_ids = [current_employee.location_id]
        print(f"[Summary Report] –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –æ—Ç—á–µ—Ç –ø–æ —Å–≤–æ–µ–º—É —Ñ–∏–ª–∏–∞–ª—É ID={current_employee.location_id}")

    if not accessible_location_ids:
         # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤ –ø—É—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ—Ç —Ñ–∏–ª–∏–∞–ª–æ–≤)
         # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ—Ç—á–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫—É, –∑–¥–µ—Å—å –≤–µ—Ä–Ω–µ–º –ø—É—Å—Ç–æ–π
         print("[Summary Report] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞.")
         # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
         empty_summary = {
             "start_date": start_date, "end_date": end_date, "location_id_filter": location_id,
             "total_income": 0, "total_cash_income": 0, "total_card_income": 0,
             "total_expenses": 0, "expenses_by_type": {}, "net_profit": 0, "shifts": []
         }
         return {"status": "ok", "summary": empty_summary}
    # --- –ö–û–ù–ï–¶ –õ–û–ì–ò–ö–ò –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –§–ò–õ–ò–ê–õ–û–í ---


    # --- –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç ---
    start_datetime = datetime.combine(start_date, time.min) # –ù–∞—á–∞–ª–æ –¥–Ω—è start_date 00:00:00
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–µ—Ü –¥–Ω—è end_date (23:59:59...) –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ–≥–æ –¥–Ω—è
    end_datetime = datetime.combine(end_date, time.max)

    # --- –§–∏–ª—å—Ç—Ä—É–µ–º –≤—ã–¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ñ–∏–ª–∏–∞–ª–∞–º –∏ –¥–∞—Ç–µ ---
    issued_orders_query = db.query(Order).filter(
        Order.company_id == company_id,
        Order.location_id.in_(accessible_location_ids), # –§–∏–ª—å—Ç—Ä –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ñ–∏–ª–∏–∞–ª–∞–º
        Order.status == "–í—ã–¥–∞–Ω",
        Order.issued_at >= start_datetime,
        Order.issued_at <= end_datetime # –ò—Å–ø–æ–ª—å–∑—É–µ–º <= —Å –∫–æ–Ω—Ü–æ–º –¥–Ω—è
    )
    issued_orders = issued_orders_query.all()
    print(f"[Summary Report] –ù–∞–π–¥–µ–Ω–æ –≤—ã–¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len(issued_orders)}")

    # --- –§–∏–ª—å—Ç—Ä—É–µ–º –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ñ–∏–ª–∏–∞–ª–∞–º –∏ –¥–∞—Ç–µ ---
    all_expenses_query = db.query(Expense).options(joinedload(Expense.expense_type)).filter(
        Expense.company_id == company_id,
        Expense.created_at >= start_datetime,
        Expense.created_at <= end_datetime # –ò—Å–ø–æ–ª—å–∑—É–µ–º <= —Å –∫–æ–Ω—Ü–æ–º –¥–Ω—è
    )
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ shift.location_id –ò–õ–ò —É—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã (shift_id is NULL),
    # –ù–û –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –í–ª–∞–¥–µ–ª–µ—Ü —Å–º–æ—Ç—Ä–∏—Ç –æ—Ç—á–µ—Ç –ø–æ –í–°–ï–ô –∫–æ–º–ø–∞–Ω–∏–∏ (location_id is None)
    # –ò–õ–ò –µ—Å–ª–∏ –í–ª–∞–¥–µ–ª–µ—Ü —Å–º–æ—Ç—Ä–∏—Ç –æ—Ç—á–µ—Ç –ø–æ –ö–û–ù–ö–†–ï–¢–ù–û–ú–£ —Ñ–∏–ª–∏–∞–ª—É (–≤–∫–ª—é—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã —ç—Ç–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞ + –æ–±—â–∏–µ)
    # –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤–∏–¥–∏—Ç –¢–û–õ–¨–ö–û —Ä–∞—Å—Ö–æ–¥—ã —Å–≤–æ–µ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞ (–±–µ–∑ –æ–±—â–∏—Ö)
    if current_employee.role.name == '–í–ª–∞–¥–µ–ª–µ—Ü':
        # –ï—Å–ª–∏ –æ—Ç—á–µ—Ç –ø–æ –í–°–ï–ú —Ñ–∏–ª–∏–∞–ª–∞–º (location_id –Ω–µ –∑–∞–¥–∞–Ω), –≤–∫–ª—é—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –í–°–ï–• —Ñ–∏–ª–∏–∞–ª–æ–≤ + –û–±—â–∏–µ
        if location_id is None:
            all_expenses_query = all_expenses_query.join(Shift, Expense.shift_id == Shift.id, isouter=True).filter(
                 or_(
                      Shift.location_id.in_(accessible_location_ids), # –†–∞—Å—Ö–æ–¥—ã —Å–º–µ–Ω –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤
                      Expense.shift_id == None                      # –ò –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
                 )
            )
        else: # –ï—Å–ª–∏ –æ—Ç—á–µ—Ç –ø–æ –ö–û–ù–ö–†–ï–¢–ù–û–ú–£ —Ñ–∏–ª–∏–∞–ª—É, –≤–∫–ª—é—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã —ç—Ç–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞ + –û–±—â–∏–µ
             all_expenses_query = all_expenses_query.join(Shift, Expense.shift_id == Shift.id, isouter=True).filter(
                 or_(
                      Shift.location_id == location_id, # –†–∞—Å—Ö–æ–¥—ã —Å–º–µ–Ω –¢–û–õ–¨–ö–û —ç—Ç–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
                      Expense.shift_id == None          # –ò –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
                 )
            )
    else: # –û–±—ã—á–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
         # –í–∏–¥–∏—Ç –¢–û–õ–¨–ö–û —Ä–∞—Å—Ö–æ–¥—ã —Å–º–µ–Ω —Å–≤–æ–µ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞ (INNER JOIN)
         all_expenses_query = all_expenses_query.join(Shift, Expense.shift_id == Shift.id).filter(
             Shift.location_id == current_employee.location_id
         )

    all_expenses = all_expenses_query.all()
    print(f"[Summary Report] –ù–∞–π–¥–µ–Ω–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {len(all_expenses)}")

    # --- –†–∞—Å—á–µ—Ç—ã (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    total_cash_income = sum(o.paid_cash_som for o in issued_orders if o.paid_cash_som)
    total_card_income = sum(o.paid_card_som for o in issued_orders if o.paid_card_som)
    total_income = total_cash_income + total_card_income

    total_expenses = sum(e.amount for e in all_expenses)

    expenses_by_type = {}
    for exp in all_expenses:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∏–º—è —Ç–∏–ø–∞ —Ä–∞—Å—Ö–æ–¥–∞
        type_name = exp.expense_type.name if exp.expense_type else "–ë–µ–∑ —Ç–∏–ø–∞"
        if type_name not in expenses_by_type:
            expenses_by_type[type_name] = 0
        expenses_by_type[type_name] += exp.amount

    net_profit = total_income - total_expenses

    # --- –§–∏–ª—å—Ç—Ä—É–µ–º —Å–º–µ–Ω—ã –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ñ–∏–ª–∏–∞–ª–∞–º –∏ –¥–∞—Ç–µ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    shifts_in_period_query = db.query(Shift).options(
        joinedload(Shift.employee),
        joinedload(Shift.location) # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞—Ü–∏—é
    ).filter(
        Shift.company_id == company_id,
        Shift.location_id.in_(accessible_location_ids), # –§–∏–ª—å—Ç—Ä –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ñ–∏–ª–∏–∞–ª–∞–º
        Shift.start_time >= start_datetime, # –°–º–µ–Ω—ã, –Ω–∞—á–∞–≤—à–∏–µ—Å—è –≤ –ø–µ—Ä–∏–æ–¥–µ
        Shift.start_time <= end_datetime # –ò—Å–ø–æ–ª—å–∑—É–µ–º <=
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ end_time, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –ó–ê–í–ï–†–®–ï–ù–ù–´–ï —Å–º–µ–Ω—ã
        # Shift.end_time != None,
        # Shift.end_time <= end_datetime
    )
    shifts_in_period = shifts_in_period_query.order_by(Shift.start_time.desc()).all()
    print(f"[Summary Report] –ù–∞–π–¥–µ–Ω–æ —Å–º–µ–Ω: {len(shifts_in_period)}")

    # --- –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç (—Å–ª–æ–≤–∞—Ä—å) ---
    summary = {
        "start_date": start_date.isoformat(), # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è JSON
        "end_date": end_date.isoformat(),
        "location_id_filter": location_id, # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å—Ç—Ä–µ
        "total_income": total_income,
        "total_cash_income": total_cash_income,
        "total_card_income": total_card_income,
        "total_expenses": total_expenses,
        "expenses_by_type": expenses_by_type,
        "net_profit": net_profit,
        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –æ —Å–º–µ–Ω–∞—Ö –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        "shifts": [
            {
                "id": shift.id,
                "start_time": shift.start_time.isoformat(),
                "end_time": shift.end_time.isoformat() if shift.end_time else None,
                "employee": {
                    "id": shift.employee.id,
                    "full_name": shift.employee.full_name
                } if shift.employee else None,
                 "location": { # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª–∏–∞–ª–µ —Å–º–µ–Ω—ã
                     "id": shift.location.id,
                     "name": shift.location.name
                 } if shift.location else None,
                 # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å cash/card income –∏ expenses –¥–ª—è —ç—Ç–æ–π —Å–º–µ–Ω—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            } for shift in shifts_in_period
        ]
    }
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ Pydantic –º–æ–¥–µ–ª–∏
    return {"status": "ok", "summary": summary}

# main.py (–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –ù–û–í–´–ô —ç–Ω–¥–ø–æ–∏–Ω—Ç)

@app.get("/api/reports/buyout", tags=["–û—Ç—á–µ—Ç—ã"])
def get_buyout_report(
    start_date: date,
    end_date: date,
    location_id: Optional[int] = Query(None), # –§–∏–ª—å—Ç—Ä –ø–æ —Ñ–∏–ª–∏–∞–ª—É
    db: Session = Depends(get_db),
    current_employee: Employee = Depends(get_current_active_employee) # –û–±—â–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –≤—ã–∫—É–ø–ª–µ–Ω–Ω—ã–º –∑–∞–∫–∞–∑–∞–º –∏ –∫—É—Ä—Å–æ–≤–æ–π —Ä–∞–∑–Ω–∏—Ü–µ –∑–∞ –ø–µ—Ä–∏–æ–¥.
    - –í–ª–∞–¥–µ–ª–µ—Ü: –ú–æ–∂–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ location_id –∏–ª–∏ –≤–∏–¥–µ—Ç—å –≤—Å–µ.
    - –°–æ—Ç—Ä—É–¥–Ω–∏–∫: –í–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–π —Ñ–∏–ª–∏–∞–ª.
    –¢—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤–∞ 'view_full_reports'.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    perms = {p.codename for p in current_employee.role.permissions}
    if 'view_full_reports' not in perms:
        raise HTTPException(status_code=403, detail="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –≤—ã–∫—É–ø—É.")

    if current_employee.company_id is None:
        raise HTTPException(status_code=403, detail="–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è SuperAdmin.")

    company_id = current_employee.company_id
    print(f"[Buyout Report] –ó–∞–ø—Ä–æ—Å –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID={company_id}, –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}, —Ñ–∏–ª—å—Ç—Ä —Ñ–∏–ª–∏–∞–ª–∞: {location_id}")

    # --- –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –î–û–°–¢–£–ü–ù–´–• –§–ò–õ–ò–ê–õ–û–í (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –°–≤–æ–¥–Ω–æ–º—É –æ—Ç—á–µ—Ç—É) ---
    accessible_location_ids = []
    if current_employee.role.name == '–í–ª–∞–¥–µ–ª–µ—Ü':
        if location_id is not None:
             location = db.query(Location).filter(Location.id == location_id, Location.company_id == company_id).first()
             if not location: raise HTTPException(status_code=404, detail="–§–∏–ª–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
             accessible_location_ids = [location_id]
             print(f"[Buyout Report] –í–ª–∞–¥–µ–ª–µ—Ü —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ —Ñ–∏–ª–∏–∞–ª—É ID={location_id}")
        else:
             accessible_location_ids = [loc.id for loc in db.query(Location.id).filter(Location.company_id == company_id).all()]
             print(f"[Buyout Report] –í–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –í–°–ï–ú —Ñ–∏–ª–∏–∞–ª–∞–º.")
    else: # –û–±—ã—á–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
        if current_employee.location_id is None: raise HTTPException(status_code=400, detail="–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ñ–∏–ª–∏–∞–ª—É.")
        accessible_location_ids = [current_employee.location_id]
        print(f"[Buyout Report] –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –æ—Ç—á–µ—Ç –ø–æ —Å–≤–æ–µ–º—É —Ñ–∏–ª–∏–∞–ª—É ID={current_employee.location_id}")

    if not accessible_location_ids:
         print("[Buyout Report] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤.")
         return {"status": "ok", "report": {"items": [], "total_profit": 0}} # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ—Ç—á–µ—Ç
    # --- –ö–û–ù–ï–¶ –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –§–ò–õ–ò–ê–õ–û–í ---

    # --- –î–∞—Ç—ã (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –°–≤–æ–¥–Ω–æ–º—É –æ—Ç—á–µ—Ç—É) ---
    start_datetime = datetime.combine(start_date, time.min)
    end_datetime = datetime.combine(end_date, time.max)

    # --- –ó–ê–ü–†–û–° –ö –ë–î ---
    # –í—ã–±–∏—Ä–∞–µ–º –∑–∞–∫–∞–∑—ã —Ç–∏–ø–∞ "–í—ã–∫—É–ø", —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ò –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ñ–∏–ª–∏–∞–ª–∞–º
    buyout_orders_query = db.query(Order).options(joinedload(Order.client)).filter(
        Order.company_id == company_id,
        Order.location_id.in_(accessible_location_ids), # –§–∏–ª—å—Ç—Ä –ø–æ —Ñ–∏–ª–∏–∞–ª–∞–º
        Order.purchase_type == "–í—ã–∫—É–ø",
        Order.created_at >= start_datetime, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –°–û–ó–î–ê–ù–ò–Ø –∑–∞–∫–∞–∑–∞ –¥–ª—è –≤—ã–∫—É–ø–∞
        Order.created_at <= end_datetime
    ).order_by(Order.created_at.desc()) # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è

    buyout_orders = buyout_orders_query.all()
    print(f"[Buyout Report] –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –≤—ã–∫—É–ø: {len(buyout_orders)}")

    # --- –†–ê–°–ß–ï–¢ –î–ê–ù–ù–´–• –û–¢–ß–ï–¢–ê ---
    report_items = []
    total_profit = 0
    for order in buyout_orders:
        price_for_client = 0
        actual_cost = 0
        profit = 0

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
        if order.buyout_item_cost_cny and order.buyout_rate_for_client:
            # –°—á–∏—Ç–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é (–∏—Å–ø–æ–ª—å–∑—É–µ–º % –∏–∑ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ 10% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            commission_percent = order.buyout_commission_percent if order.buyout_commission_percent is not None else 10.0
            commission_amount = order.buyout_item_cost_cny * (commission_percent / 100.0)
            # –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ = (–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ + –ö–æ–º–∏—Å—Å–∏—è) * –ö—É—Ä—Å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
            price_for_client = (order.buyout_item_cost_cny + commission_amount) * order.buyout_rate_for_client

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∫—É—Ä—Å)
        if order.buyout_item_cost_cny and order.buyout_actual_rate:
            actual_cost = order.buyout_item_cost_cny * order.buyout_actual_rate

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±–µ —Å—É–º–º—ã –ø–æ—Å—á–∏—Ç–∞–Ω—ã)
        if price_for_client > 0 and actual_cost > 0:
            profit = price_for_client - actual_cost

        total_profit += profit # –î–æ–±–∞–≤–ª—è–µ–º –∫ –æ–±—â–µ–π –ø—Ä–∏–±—ã–ª–∏

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–∫–∞–∑—É –≤ —Å–ø–∏—Å–æ–∫
        report_items.append({
            "order_id": order.id,
            "track_code": order.track_code,
            "created_at": order.created_at.isoformat(), # –í —Å—Ç—Ä–æ–∫—É –¥–ª—è JSON
            "client_name": order.client.full_name if order.client else "?",
            "item_cost_cny": order.buyout_item_cost_cny,
            "commission_percent": order.buyout_commission_percent, # –î–æ–±–∞–≤–∏–ª–∏ %
            "rate_for_client": order.buyout_rate_for_client,
            "price_for_client": price_for_client, # –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞
            "actual_rate": order.buyout_actual_rate, # –†–µ–∞–ª—å–Ω—ã–π –∫—É—Ä—Å
            "actual_cost": actual_cost, # –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
            "profit": profit # –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å
        })
    # --- –ö–û–ù–ï–¶ –†–ê–°–ß–ï–¢–ê ---

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return {
        "status": "ok",
        "report": {
            "items": report_items,
            "total_profit": total_profit
        }
    }

# --- –î–û–ë–ê–í–ò–¢–¨ –≠–¢–û–¢ –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢ ---
@app.post("/api/orders/calculate", tags=["–ó–∞–∫–∞–∑—ã (–í–ª–∞–¥–µ–ª–µ—Ü)"])
async def calculate_orders( # –î–æ–±–∞–≤–ª—è–µ–º async –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    payload: CalculatePayload,
    employee: Employee = Depends(get_current_active_employee), # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
    db: Session = Depends(get_db)
):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
    –ú–æ–∂–µ—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤.
    –î–æ—Å—Ç—É–ø–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º —Å –ø—Ä–∞–≤–æ–º 'manage_orders'.
    """
    if employee.company_id is None:
        raise HTTPException(status_code=403, detail="–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è SuperAdmin.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'manage_orders' –∏–ª–∏ 'issue_orders'?)
    # –î–∞–≤–∞–π—Ç–µ –ø–æ–∫–∞ —Ä–∞–∑—Ä–µ—à–∏–º —Ç–µ–º, –∫—Ç–æ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑–∞–º–∏
    perms = {p.codename for p in employee.role.permissions}
    if 'manage_orders' not in perms:
        raise HTTPException(status_code=403, detail="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–æ–≤.")

    order_ids = [item.order_id for item in payload.orders]
    if not order_ids:
        raise HTTPException(status_code=400, detail="–ù–µ –≤—ã–±—Ä–∞–Ω—ã –∑–∞–∫–∞–∑—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω)
    if payload.new_status and payload.new_status not in ORDER_STATUSES:
        raise HTTPException(status_code=400, detail=f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {payload.new_status}")

    # 1. –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑—ã –≤ –±–∞–∑–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Å—Ç–∞—Ç—É—Å
    orders_to_update_query = db.query(Order).options(joinedload(Order.client)).filter(
        Order.id.in_(order_ids),
        Order.company_id == employee.company_id
    )
    orders_to_update = orders_to_update_query.all()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—Å–µ –ª–∏ –∑–∞–∫–∞–∑—ã –Ω–∞–π–¥–µ–Ω—ã
    found_ids = {o.id for o in orders_to_update}
    missing_ids = [oid for oid in order_ids if oid not in found_ids]
    if missing_ids:
        raise HTTPException(status_code=404, detail=f"–ó–∞–∫–∞–∑—ã —Å ID {missing_ids} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∑–∞–∫–∞–∑—ã –Ω–µ –≤—ã–¥–∞–Ω—ã
    issued_orders = [o.track_code for o in orders_to_update if o.status == "–í—ã–¥–∞–Ω"]
    if issued_orders:
        raise HTTPException(status_code=400, detail=f"–ù–µ–ª—å–∑—è –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —É–∂–µ –≤—ã–¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã: {issued_orders}")

    # 2. –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å—Ç–∞—Ç—É—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
    updated_count = 0
    notifications_to_send = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
    try:
        for order in orders_to_update:
            item_data = next((item for item in payload.orders if item.order_id == order.id), None)
            if item_data: # –î–æ–ª–∂–µ–Ω –≤—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è
                original_status = order.status # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç–Ω—ã–µ –ø–æ–ª—è
                order.calculated_weight_kg = item_data.weight_kg
                order.calculated_price_per_kg_usd = payload.price_per_kg_usd
                order.calculated_exchange_rate_usd = payload.exchange_rate_usd
                order.calculated_final_cost_som = (
                    item_data.weight_kg * payload.price_per_kg_usd * payload.exchange_rate_usd
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω –∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
                if payload.new_status and payload.new_status != original_status:
                    order.status = payload.new_status
                    # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    if order.client and order.client.telegram_chat_id:
                        client_id = order.client.id
                        if client_id not in notifications_to_send:
                            notifications_to_send[client_id] = {"client": order.client, "track_codes": []}
                        notifications_to_send[client_id]["track_codes"].append(order.track_code)

                updated_count += 1

        db.commit() # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        print(f"[Calculate Orders] –†–∞—Å—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è {updated_count} –∑–∞–∫–∞–∑–æ–≤. –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {payload.new_status or '–Ω–µ –∏–∑–º–µ–Ω–µ–Ω'}")

        # --- –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ---
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∏–∑–º–µ–Ω–µ–Ω —Å—Ç–∞—Ç—É—Å –∏ –µ—Å—Ç—å –ª–∏
        # –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if payload.new_status and notifications_to_send:
            print(f"[Calculate Orders] –û—Ç–ø—Ä–∞–≤–∫–∞ {len(notifications_to_send)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ '{payload.new_status}'...")
            for client_id, data in notifications_to_send.items():
                asyncio.create_task(generate_and_send_notification(
                    client=data["client"],
                    new_status=payload.new_status,
                    track_codes=data["track_codes"]
                ))
            print(f"[Calculate Orders] –ó–∞–¥–∞—á–∏ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω—ã.")
        # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

        return {"status": "ok", "message": f"–†–∞—Å—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è {updated_count} –∑–∞–∫–∞–∑–æ–≤." + (f" –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{payload.new_status}'." if payload.new_status else "")}

    except Exception as e:
        db.rollback()
        import traceback
        print(f"!!! –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ –∑–∞–∫–∞–∑–æ–≤:\n{traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å—á–µ—Ç–∞: {e}")

# --- –ù–û–í–´–ï –ú–æ–¥–µ–ª–∏ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ë–æ—Ç–æ–º ---
class BotIdentifyPayload(BaseModel):
    company_id: int
    telegram_chat_id: str # ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
    phone_number: Optional[str] = None # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç)

# --- –ò–ó–ú–ï–ù–ò–¢–¨ ClientBotInfo ---
class ClientBotInfo(ClientOut): # –ù–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç ClientOut
    pass # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –Ω–µ—Ç
    # –î–û–ë–ê–í–ò–¢–¨ Config (–¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏, —Ö–æ—Ç—è –¥–æ–ª–∂–Ω–æ –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å—Å—è)
    class Config:
        from_attributes = True # <--- –î–û–ë–ê–í–õ–ï–ù–û
# --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ClientBotInfo ---

class BotIdentifyResponse(BaseModel):
    client: ClientBotInfo
    is_owner: bool
    employee_id: Optional[int] = None
    # –î–û–ë–ê–í–ò–¢–¨ Config –∏ —Å—é–¥–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–ª–æ–∂–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å —Å from_attributes
    class Config:
        from_attributes = True

# --- –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢ –¥–ª—è –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ë–æ—Ç–æ–º ---
@app.post("/api/bot/identify_user", tags=["Telegram Bot"], response_model=BotIdentifyResponse)
def identify_bot_user(
    payload: BotIdentifyPayload,
    db: Session = Depends(get_db)
):
    """
    –ò—â–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ Telegram Chat ID –∏–ª–∏ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.
    –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –ø–æ –Ω–æ–º–µ—Ä—É, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç Chat ID.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Ñ–ª–∞–≥, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω –í–ª–∞–¥–µ–ª—å—Ü–µ–º.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è Telegram-–±–æ—Ç–æ–º.
    """
    client = None
    is_owner = False
    print(f"[Bot Identify] –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Company ID: {payload.company_id}, Chat ID: {payload.telegram_chat_id}, Phone: {payload.phone_number}")

    # --- –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ ---
    company = db.query(Company).filter(Company.id == payload.company_id).first()
    if not company:
        print(f"!!! [Bot Identify] –û—à–∏–±–∫–∞: –ö–æ–º–ø–∞–Ω–∏—è ID {payload.company_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        raise HTTPException(status_code=404, detail=f"–ö–æ–º–ø–∞–Ω–∏—è —Å ID {payload.company_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    # --- –®–∞–≥ 2: –ü–æ–∏—Å–∫ –ø–æ Telegram Chat ID ---
    if payload.telegram_chat_id:
        client = db.query(Client).filter(
            Client.telegram_chat_id == payload.telegram_chat_id,
            Client.company_id == payload.company_id
        ).first()
        if client:
             print(f"[Bot Identify] –ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –ø–æ Chat ID: {client.id} - {client.full_name}")

    # --- –®–∞–≥ 3: –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ Chat ID –∏ –Ω–æ–º–µ—Ä –ø–µ—Ä–µ–¥–∞–Ω) ---
    if not client and payload.phone_number:
        
        # --- –ù–û–í–ê–Ø –£–õ–¨–¢–†–ê-–ù–ê–î–ï–ñ–ù–ê–Ø –õ–û–ì–ò–ö–ê –ü–û–ò–°–ö–ê ---
        
        # 1. –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç –±–æ—Ç–∞ (–±–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç '996555366386')
        phone_from_bot = re.sub(r'\D', '', str(payload.phone_number))
        
        # 2. –ò–∑–≤–ª–µ–∫–∞–µ–º –ü–û–°–õ–ï–î–ù–ò–ï 9 —Ü–∏—Ñ—Ä (e.g., '555366386')
        last_9_digits = ""
        if len(phone_from_bot) >= 9:
            last_9_digits = phone_from_bot[-9:]
            print(f"[Bot Identify] –ü–æ–∏—Å–∫ –ø–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–º—É –∫–ª—é—á—É (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 9 —Ü–∏—Ñ—Ä): {last_9_digits}")

            # 3. –ò—â–µ–º –≤ –ë–î, –°–†–ê–í–ù–ò–í–ê–Ø –¢–û–õ–¨–ö–û –ö–û–ù–ï–¶ —Å—Ç—Ä–æ–∫–∏ –≤ –±–∞–∑–µ
            # (–≠—Ç–æ –Ω–∞–π–¥–µ—Ç '996555366386', '0555366386', '555366386' –∏ –¥–∞–∂–µ '+996555366386')
            client = db.query(Client).filter(
                Client.company_id == payload.company_id,
                Client.phone.endswith(last_9_digits) 
            ).first()
            
        else:
            # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –æ—Ç –±–æ—Ç–∞ –ø–æ—á–µ–º—É-—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π, –∏—â–µ–º –∫–∞–∫ –µ—Å—Ç—å
            print(f"[Bot Identify] –ù–æ–º–µ—Ä –æ—Ç –±–æ—Ç–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –∏—â–µ–º –∫–∞–∫ –µ—Å—Ç—å: {phone_from_bot}")
            client = db.query(Client).filter(
                Client.company_id == payload.company_id,
                Client.phone == phone_from_bot
            ).first()
        # --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---

        if client:
            # (–≠—Ç–æ—Ç –±–ª–æ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            print(f"[Bot Identify] –ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –ø–æ –Ω–æ–º–µ—Ä—É (—Ñ–æ—Ä–º–∞—Ç –≤ –ë–î: {client.phone}): {client.id} - {client.full_name}")
            
            # --- –ü—Ä–∏–≤—è–∑–∫–∞ Chat ID, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –¥—Ä—É–≥–æ–π ---
            if client.telegram_chat_id != payload.telegram_chat_id:
                 existing_client_with_chat_id = db.query(Client).filter(
                     Client.telegram_chat_id == payload.telegram_chat_id,
                     Client.company_id == payload.company_id
                 ).first()
                 if existing_client_with_chat_id:
                      print(f"!!! [Bot Identify] –û—à–∏–±–∫–∞: Chat ID {payload.telegram_chat_id} —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É (ID: {existing_client_with_chat_id.id}) –≤ —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.")
                      raise HTTPException(status_code=409, detail="–≠—Ç–æ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É.")
                 else:
                     print(f"[Bot Identify] –ü—Ä–∏–≤—è–∑–∫–∞ Chat ID {payload.telegram_chat_id} –∫ –∫–ª–∏–µ–Ω—Ç—É ID {client.id}")
                     client.telegram_chat_id = payload.telegram_chat_id
                     try:
                         db.commit()
                         db.refresh(client)
                     except Exception as e_commit:
                          db.rollback()
                          print(f"!!! [Bot Identify] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ Chat ID: {e_commit}")
                          raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ Telegram.")
        else:
             print(f"[Bot Identify] –ö–ª–∏–µ–Ω—Ç —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º (–∫–ª—é—á: {last_9_digits}) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–ø–∞–Ω–∏–∏ {payload.company_id}.")

    # --- –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –í–ª–∞–¥–µ–ª—å—Ü–µ–º ---
    if client:
        # –ò—â–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞-–≤–ª–∞–¥–µ–ª—å—Ü–∞ –í –≠–¢–û–ô –∫–æ–º–ø–∞–Ω–∏–∏ —Å —Ç–∞–∫–∏–º –∂–µ –ü–û–õ–ù–´–ú –ò–ú–ï–ù–ï–ú
        owner_employee = db.query(Employee).join(Role).filter(
            Employee.company_id == payload.company_id,
            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
            Employee.full_name == client.full_name, # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –ø–æ–ª–Ω–æ–º—É –∏–º–µ–Ω–∏
            # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
            Role.name == "–í–ª–∞–¥–µ–ª–µ—Ü"
        ).first()
        if owner_employee:
            is_owner = True
            print(f"[Bot Identify] –ù–∞–π–¥–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç (ID: {client.id}) —è–≤–ª—è–µ—Ç—Å—è –í–ª–∞–¥–µ–ª—å—Ü–µ–º (ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {owner_employee.id}).")
        else:
             print(f"[Bot Identify] –ù–∞–π–¥–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç (ID: {client.id}) –ù–ï —è–≤–ª—è–µ—Ç—Å—è –í–ª–∞–¥–µ–ª—å—Ü–µ–º.")

    # --- –®–∞–≥ 5: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ 404 ---
    if client:
        try:
            client_response_data = ClientBotInfo.from_orm(client)
            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
            return BotIdentifyResponse(
                client=client_response_data, 
                is_owner=is_owner,
                # –ü–µ—Ä–µ–¥–∞–µ–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –µ—Å–ª–∏ —ç—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü
                employee_id=owner_employee.id if is_owner and owner_employee else None 
            )
        except Exception as pydantic_error:
            # –õ–æ–≤–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –≤ Pydantic –º–æ–¥–µ–ª—å
            import traceback
            print(f"!!! [Bot Identify] –û—à–∏–±–∫–∞ Pydantic –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ID {client.id}:\n{traceback.format_exc()}")
            raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞: {pydantic_error}")
    else:
        # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –ø–æ Chat ID, –Ω–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        raise HTTPException(status_code=404, detail="–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")

# --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –§–£–ù–ö–¶–ò–ò ---

# main.py

# --- –ù–û–í–ê–Ø –ú–æ–¥–µ–ª—å Pydantic –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ ---
class BotClientRegisterPayload(BaseModel):
    full_name: str
    phone: str
    company_id: int
    telegram_chat_id: str
    client_code_prefix: Optional[str] = "TG" # –ü—Ä–µ—Ñ–∏–∫—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –±–æ—Ç-—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π

# --- –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢ –î–õ–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –ö–õ–ò–ï–ù–¢–ê –ë–û–¢–û–ú (–ü–£–ë–õ–ò–ß–ù–´–ô) ---
@app.post("/api/bot/register_client", tags=["Telegram Bot"], response_model=ClientOut)
def register_client_from_bot(
    payload: BotClientRegisterPayload, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é Pydantic –º–æ–¥–µ–ª—å
    db: Session = Depends(get_db)
    # –ù–ï–¢ –ó–ê–í–ò–°–ò–ú–û–°–¢–ò (Depends) - —ç—Ç–æ –ø—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ Telegram-–±–æ—Ç–∞.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –±–æ—Ç–æ–º, –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    """
    print(f"[Bot Register] –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {payload.dict()}")

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏
    company = db.query(Company.id).filter(Company.id == payload.company_id).first()
    if not company:
        print(f"!!! [Bot Register] –û—à–∏–±–∫–∞: –ö–æ–º–ø–∞–Ω–∏—è ID {payload.company_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        raise HTTPException(status_code=404, detail=f"–ö–æ–º–ø–∞–Ω–∏—è (ID: {payload.company_id}) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –í–ù–£–¢–†–ò –∫–æ–º–ø–∞–Ω–∏–∏
    if db.query(Client).filter(Client.phone == payload.phone, Client.company_id == payload.company_id).first():
        print(f"!!! [Bot Register] –û—à–∏–±–∫–∞: –¢–µ–ª–µ—Ñ–æ–Ω {payload.phone} —É–∂–µ –∑–∞–Ω—è—Ç.")
        raise HTTPException(status_code=400, detail="–ö–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.")

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ Chat ID –í–ù–£–¢–†–ò –∫–æ–º–ø–∞–Ω–∏–∏
    if db.query(Client).filter(Client.telegram_chat_id == payload.telegram_chat_id, Client.company_id == payload.company_id).first():
        print(f"!!! [Bot Register] –û—à–∏–±–∫–∞: Chat ID {payload.telegram_chat_id} —É–∂–µ –∑–∞–Ω—è—Ç.")
        raise HTTPException(status_code=409, detail="–≠—Ç–æ—Ç Telegram-–∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É.")

    # 4. –ê–≤—Ç–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –∫–ª–∏–µ–Ω—Ç–∞ (–ª–æ–≥–∏–∫–∞ –∏–∑ /api/clients)
    max_code_result = db.query(func.max(Client.client_code_num)).filter(
        Client.company_id == payload.company_id
    ).scalar()
    new_code_num = (max_code_result + 1) if max_code_result else 1001
    print(f"[Bot Register] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: {new_code_num}")

    # 5. –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    new_client = Client(
        full_name=payload.full_name,
        phone=payload.phone,
        telegram_chat_id=payload.telegram_chat_id,
        company_id=payload.company_id,
        client_code_prefix=payload.client_code_prefix or "TG", # "TG" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        client_code_num=new_code_num
    )

    try:
        db.add(new_client)
        db.commit()
        db.refresh(new_client)
        print(f"[Bot Register] –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∫–ª–∏–µ–Ω—Ç ID={new_client.id}")
        return new_client # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    except Exception as e_db:
        db.rollback()
        print(f"!!! [Bot Register] –û—à–∏–±–∫–∞ –ë–î: {e_db}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞.")

# main.py (–î–û–ë–ê–í–ò–¢–¨ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –≤ get_client_by_id)

@app.get("/api/clients/{client_id}", tags=["–ö–ª–∏–µ–Ω—Ç—ã (–í–ª–∞–¥–µ–ª–µ—Ü)", "Telegram Bot"], response_model=ClientOut)
def get_client_by_id(
    client_id: int,
    company_id: int = Query(...), # –¢—Ä–µ–±—É–µ–º company_id
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏."""
    # --- –î–û–ë–ê–í–ò–¢–¨ –õ–û–ì ---
    print(f"--- [Get Client By ID] –ó–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞ ID={client_id} –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID={company_id} ---")
    # --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø ---
    client = db.query(Client).filter(
        Client.id == client_id,
        Client.company_id == company_id
    ).first()
    if not client:
        # --- –î–û–ë–ê–í–ò–¢–¨ –õ–û–ì ---
        print(f"!!! [Get Client By ID] –ö–ª–∏–µ–Ω—Ç ID={client_id} –ù–ï –ù–ê–ô–î–ï–ù –≤ –∫–æ–º–ø–∞–Ω–∏–∏ ID={company_id}.")
        # --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø ---
        raise HTTPException(status_code=404, detail=f"–ö–ª–∏–µ–Ω—Ç ID {client_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–ø–∞–Ω–∏–∏ ID {company_id}.")
    # --- –î–û–ë–ê–í–ò–¢–¨ –õ–û–ì ---
    print(f"--- [Get Client By ID] –ö–ª–∏–µ–Ω—Ç ID={client_id} –Ω–∞–π–¥–µ–Ω: {client.full_name} ---")
    # --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø ---
    return client

# main.py (–î–û–ë–ê–í–ò–¢–¨ —ç—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç)

# --- –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–º–ø–∞–Ω–∏–∏ (–¥–ª—è –±–æ—Ç–∞ –∏ –õ–ö) ---
# –ú–æ–¥–µ–ª—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞
class SettingOut(BaseModel):
    key: str
    value: Optional[str]

@app.get("/api/settings", tags=["–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "Telegram Bot"], response_model=List[SettingOut])
def get_company_settings(
    company_id: int = Query(...), # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π ID –∫–æ–º–ø–∞–Ω–∏–∏
    keys: Optional[List[str]] = Query(None), # –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    db: Session = Depends(get_db)
    # –ó–¥–µ—Å—å –Ω–µ –Ω—É–∂–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, —Ç.–∫. –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –±–æ—Ç–æ–º/–õ–ö
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.
    –ú–æ–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ —Å–ø–∏—Å–∫—É –∫–ª—é—á–µ–π (–ø–∞—Ä–∞–º–µ—Ç—Ä 'keys').
    """
    print(f"[Get Settings] –ó–∞–ø—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è Company ID: {company_id}. –ö–ª—é—á–∏: {keys}")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–º–ø–∞–Ω–∏—è
    company = db.query(Company.id).filter(Company.id == company_id).first()
    if not company:
        raise HTTPException(status_code=404, detail=f"–ö–æ–º–ø–∞–Ω–∏—è —Å ID {company_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
    query = db.query(Setting).filter(Setting.company_id == company_id)

    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–∏–º
    if keys:
        query = query.filter(Setting.key.in_(keys))

    settings = query.all()
    print(f"[Get Settings] –ù–∞–π–¥–µ–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {len(settings)}")

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Pydantic –Ω–∞–ø—Ä—è–º—É—é)
    # FastAPI —Å–¥–µ–ª–∞–µ—Ç —ç—Ç–æ —Å–∞–º –±–ª–∞–≥–æ–¥–∞—Ä—è response_model=List[SettingOut]
    return settings

# --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –≠–ù–î–ü–û–ò–ù–¢–ê ---

# main.py (–î–û–ë–ê–í–ò–¢–¨ –≠–¢–û–¢ –≠–ù–î–ü–û–ò–ù–¢)
@app.patch("/api/settings", tags=["–ù–∞—Å—Ç—Ä–æ–π–∫–∏"])
def update_company_settings(
    payload: List[SettingUpdate], # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    employee: Employee = Depends(get_company_owner), # –¢–æ–ª—å–∫–æ –í–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å
    db: Session = Depends(get_db)
):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ –í–ª–∞–¥–µ–ª—å—Ü–∞."""
    updated_count = 0
    errors = []
    company_id = employee.company_id
    print(f"[Update Settings] –í–ª–∞–¥–µ–ª–µ—Ü ID={employee.id} –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID={company_id}")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –ë–î –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    current_settings = {s.key: s for s in db.query(Setting).filter(Setting.company_id == company_id).all()}

    for item in payload:
        key_to_update = item.key
        new_value = item.value # –ú–æ–∂–µ—Ç –±—ã—Ç—å None –∏–ª–∏ ""

        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ –∫–ª—é—á—É
        setting_obj = current_settings.get(key_to_update)

        if setting_obj:
            # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            if setting_obj.value != new_value:
                print(f"  - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ '{key_to_update}': '{setting_obj.value}' -> '{new_value}'")
                setting_obj.value = new_value
                updated_count += 1
            else:
                 print(f"  - –ö–ª—é—á '{key_to_update}': –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.")
        else:
            # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —Ç–∞–∫–∏–º –∫–ª—é—á–æ–º –Ω–µ—Ç, –°–û–ó–î–ê–ï–ú –µ–µ
            print(f"  - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞ '{key_to_update}' —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º '{new_value}'")
            new_setting = Setting(key=key_to_update, value=new_value, company_id=company_id)
            db.add(new_setting)
            updated_count += 1 # –°—á–∏—Ç–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
    if updated_count > 0:
        try:
            db.commit()
            print(f"[Update Settings] –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ/—Å–æ–∑–¥–∞–Ω–æ {updated_count} –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
            return {"status": "ok", "message": f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ({updated_count} —à—Ç.) —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."}
        except Exception as e:
            db.rollback()
            import traceback
            print(f"!!! [Update Settings] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:\n{traceback.format_exc()}")
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    else:
        print("[Update Settings] –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
        return {"status": "ok", "message": "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è."}


# main.py (–î–û–ë–ê–í–ò–¢–¨ –≠–¢–û–¢ –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢)

@app.get("/api/bot/locations", tags=["Telegram Bot"], response_model=List[LocationOut])
def get_locations_for_bot(
    company_id: int = Query(...), # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π ID –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ç –±–æ—Ç–∞
    db: Session = Depends(get_db)
    # –ù–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ (–¥–ª—è –±–æ—Ç–∞)."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–º–ø–∞–Ω–∏—è
    company = db.query(Company.id).filter(Company.id == company_id).first()
    if not company:
        raise HTTPException(status_code=404, detail=f"–ö–æ–º–ø–∞–Ω–∏—è —Å ID {company_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    locations = db.query(Location).filter(Location.company_id == company_id).order_by(Location.name).all()
    print(f"INFO: [Bot Locations] –ó–∞–ø—Ä–æ—Å —Ñ–∏–ª–∏–∞–ª–æ–≤ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID {company_id}. –ù–∞–π–¥–µ–Ω–æ: {len(locations)}")
    return locations

# --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –≠–ù–î–ü–û–ò–ù–¢–ê ---

# --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ---

# main.py

# --- –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢ ---
@app.get("/api/locations/{location_id}", tags=["–ü–µ—Ä—Å–æ–Ω–∞–ª (–í–ª–∞–¥–µ–ª–µ—Ü)", "Telegram Bot"], response_model=LocationOut)
def get_location_by_id(
    location_id: int,
    company_id: int = Query(...), # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π ID –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ç –±–æ—Ç–∞/–õ–ö
    db: Session = Depends(get_db)
    # –ù–µ —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞ –ø–æ ID (–¥–ª—è –±–æ—Ç–∞/–õ–ö)."""
    
    print(f"[Get Location By ID] –ó–∞–ø—Ä–æ—Å —Ñ–∏–ª–∏–∞–ª–∞ ID={location_id} –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID={company_id}")
    location = db.query(Location).filter(
        Location.id == location_id,
        Location.company_id == company_id
    ).first()

    if not location:
        print(f"!!! [Get Location By ID] –§–∏–ª–∏–∞–ª ID={location_id} –ù–ï –ù–ê–ô–î–ï–ù –≤ –∫–æ–º–ø–∞–Ω–∏–∏ ID={company_id}.")
        raise HTTPException(status_code=404, detail="–§–∏–ª–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.")
    
    return location
# --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –≠–ù–î–ü–û–ò–ù–¢–ê ---

# main.py

# --- –î–æ–±–∞–≤—å —ç—Ç–∏ Pydantic –º–æ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ BotClientRegisterPayload) ---
class BotIdentifyCompanyPayload(BaseModel):
    token: str

class BotIdentifyCompanyResponse(BaseModel):
    company_id: int
    company_name: str
# --- –ö–æ–Ω–µ—Ü Pydantic –º–æ–¥–µ–ª–µ–π ---


# --- –î–û–ë–ê–í–¨ –≠–¢–û–¢ –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢ ---
@app.post("/api/bot/identify_company", tags=["Telegram Bot"], response_model=BotIdentifyCompanyResponse)
def identify_company_by_token(
    payload: BotIdentifyCompanyPayload,
    db: Session = Depends(get_db)
):
    """
    –ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∫–æ–º–ø–∞–Ω–∏—é –ø–æ —Ç–æ–∫–µ–Ω—É –±–æ—Ç–∞.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –±–æ—Ç–æ–º –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫ –∫–∞–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –æ–Ω –æ—Ç–Ω–æ—Å–∏—Ç—Å—è.
    """
    print(f"[Bot Identify Company] –ü–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ —Ç–æ–∫–µ–Ω—É: ...{payload.token[-6:]}")
    
    # –ò—â–µ–º –∫–æ–º–ø–∞–Ω–∏—é —Å —ç—Ç–∏–º —Ç–æ–∫–µ–Ω–æ–º –≤ –ë–î
    company = db.query(Company).filter(
        Company.telegram_bot_token == payload.token
    ).first()

    if not company:
        print(f"!!! [Bot Identify Company] –ö–æ–º–ø–∞–Ω–∏—è —Å —Ç–æ–∫–µ–Ω–æ–º ...{payload.token[-6:]} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        raise HTTPException(
            status_code=404, 
            detail="–ö–æ–º–ø–∞–Ω–∏—è —Å —Ç–∞–∫–∏–º —Ç–æ–∫–µ–Ω–æ–º Telegram-–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ."
        )
    
    if not company.is_active:
         print(f"!!! [Bot Identify Company] –ö–æ–º–ø–∞–Ω–∏—è {company.name} (ID: {company.id}) –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
         raise HTTPException(
            status_code=403, 
            detail="–ö–æ–º–ø–∞–Ω–∏—è, –∫ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏–≤—è–∑–∞–Ω —ç—Ç–æ—Ç –±–æ—Ç, –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞."
        )

    print(f"[Bot Identify Company] –¢–æ–∫–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏: {company.name} (ID: {company.id})")
    return BotIdentifyCompanyResponse(
        company_id=company.id, 
        company_name=company.name
    )
# --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –≠–ù–î–ü–û–ò–ù–¢–ê ---

# main.py

# --- –î–æ–±–∞–≤—å —ç—Ç–∏ Pydantic –º–æ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ BotClientRegisterPayload) ---
class BotBroadcastPayload(BaseModel):
    text: str = Field(..., min_length=1)

class BotBroadcastResponse(BaseModel):
    status: str
    message: str
    sent_to_clients: int
# --- –ö–æ–Ω–µ—Ü Pydantic –º–æ–¥–µ–ª–µ–π ---


# --- –î–û–ë–ê–í–¨ –≠–¢–û–¢ –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢ ---
@app.post("/api/bot/broadcast", tags=["Telegram Bot"], response_model=BotBroadcastResponse)
async def bot_broadcast( # <--- –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é async
    payload: BotBroadcastPayload,
    # –¢—Ä–µ–±—É–µ–º, —á—Ç–æ–±—ã –∑–∞–ø—Ä–æ—Å –¥–µ–ª–∞–ª –í–ª–∞–¥–µ–ª–µ—Ü
    employee: Employee = Depends(get_company_owner), 
    db: Session = Depends(get_db)
):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –∫–æ–º–ø–∞–Ω–∏–∏, –ø—Ä–∏–≤—è–∑–∞–≤—à–∏–º –±–æ—Ç–∞.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –±–æ—Ç–æ–º, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç—Å—è –ø–æ X-Employee-ID –í–ª–∞–¥–µ–ª—å—Ü–∞.
    """
    company_id = employee.company_id
    print(f"[Broadcast] –í–ª–∞–¥–µ–ª–µ—Ü {employee.full_name} (ID: {employee.id}) –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {company_id}")

    # 1. –ù–∞—Ö–æ–¥–∏–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∫–æ–º–ø–∞–Ω–∏–∏ (–±–µ—Ä–µ–º –∏–∑ –º–æ–¥–µ–ª–∏ Company)
    company = db.query(Company).filter(Company.id == company_id).first()
    if not company or not company.telegram_bot_token:
        print(f"!!! [Broadcast] –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {company_id}")
        raise HTTPException(status_code=400, detail="–¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")

    bot_token = company.telegram_bot_token

    # 2. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏ —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º Telegram
    clients_to_notify = db.query(Client).filter(
        Client.company_id == company_id,
        Client.telegram_chat_id != None
    ).all()

    if not clients_to_notify:
        return BotBroadcastResponse(status="ok", message="–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", sent_to_clients=0)

    # 3. –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É
    tasks = []
    bot = telegram.Bot(token=bot_token)
    
    for client in clients_to_notify:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É
        tasks.append(
            send_telegram_message(
                token=bot_token, # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –µ—Å—Ç—å –≤ main.py
                chat_id=client.telegram_chat_id,
                text=payload.text # –¢–µ–∫—Å—Ç –∏–∑ payload
            )
        )
    
    # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
    await asyncio.gather(*tasks)

    sent_count = len(clients_to_notify)
    print(f"[Broadcast] –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {company_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count} —Å–æ–æ–±—â–µ–Ω–∏–π.")
    
    return BotBroadcastResponse(
        status="ok",
        message=f"–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.",
        sent_to_clients=sent_count
    )
# --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –≠–ù–î–ü–û–ò–ù–¢–ê ---

# main.py

# --- –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢ –î–õ–Ø –í–´–•–û–î–ê –ò–ó –°–ò–°–¢–ï–ú–´ (–û–¢–†–´–í–ö–ò) ---
@app.post("/api/bot/unlink", tags=["Telegram Bot"])
def unlink_bot_user(
    payload: BotUnlinkPayload,
    db: Session = Depends(get_db)
):
    """
    –û—Ç–≤—è–∑—ã–≤–∞–µ—Ç Telegram Chat ID –æ—Ç –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –±–æ—Ç–æ–º –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /logout.
    """
    chat_id = payload.telegram_chat_id
    company_id = payload.company_id
    
    logger.info(f"[Bot Unlink] –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–≤—è–∑–∫–∏ Chat ID {chat_id} –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ {company_id}")

    # –ù–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω —ç—Ç–æ—Ç Chat ID
    client_to_unlink = db.query(Client).filter(
        Client.company_id == company_id,
        Client.telegram_chat_id == chat_id
    ).first()

    if not client_to_unlink:
        logger.warning(f"[Bot Unlink] Chat ID {chat_id} –Ω–µ –±—ã–ª –Ω–∏ –∫ –∫–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º.")
        # –í—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö, —Ç.–∫. —Ü–µ–ª—å (–æ—Ç–≤—è–∑–∫–∞) –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞
        return {"status": "ok", "message": "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –±—ã–ª –ø—Ä–∏–≤—è–∑–∞–Ω."}

    try:
        # --- –ì–õ–ê–í–ù–û–ï –î–ï–ô–°–¢–í–ò–ï ---
        client_to_unlink.telegram_chat_id = None
        db.commit()
        # --- –ö–û–ù–ï–¶ –ì–õ–ê–í–ù–û–ì–û –î–ï–ô–°–¢–í–ò–Ø ---
        
        logger.info(f"[Bot Unlink] Chat ID {chat_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ID {client_to_unlink.id} ({client_to_unlink.full_name})")
        return {"status": "ok", "message": "–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω."}
        
    except Exception as e:
        db.rollback()
        logger.error(f"!!! [Bot Unlink] –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ Chat ID {chat_id}: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞.")
# --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –≠–ù–î–ü–û–ò–ù–¢–ê ---

# --- 7. –£–¢–ò–õ–ò–¢–´ ---

# –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, —Ç.–∫. —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
# @app.get("/api/create_tables", tags=["–£—Ç–∏–ª–∏—Ç—ã"])
# def create_tables_endpoint():
#     try:  
#         Base.metadata.create_all(bind=engine)
#         return {"status": "ok", "message": "–¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω—ã!"}
#     except Exception as e:  
#         raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {e}")

# –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–∞–º –ø–æ–∫–∞ –Ω–µ –Ω—É–∂–µ–Ω
# @app.get("/api/order_statuses", tags=["–£—Ç–∏–ª–∏—Ç—ã"])
# def get_order_statuses():  
#     return {"status": "ok", "statuses": ORDER_STATUSES}

@app.on_event("startup")
def on_startup():
    """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç."""
    try:
        Base.metadata.create_all(bind=engine)
        print("–¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã.")
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")


@app.get("/", tags=["–£—Ç–∏–ª–∏—Ç—ã"])
def read_root():  
    return {"status": "ok", "message": "–°–µ—Ä–≤–µ—Ä –ö–∞—Ä–≥–æ CRM (Multi-Tenant) –∑–∞–ø—É—â–µ–Ω!"}
