# bot_template.py (–ü–æ–ª–Ω–∞—è –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è 2 –¥–ª—è –í–∞—Ä–∏–∞–Ω—Ç–∞ 1)

import os
import httpx # –î–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
import asyncio
import logging
import re # –î–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
import sys # –î–ª—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
import argparse # –î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤

from typing import Optional, Dict, Any, List # –î–æ–±–∞–≤–ª–µ–Ω List –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
from dotenv import load_dotenv # –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ã

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É python-telegram-bot
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, filters, ContextTypes
from telegram.constants import ParseMode # –î–ª—è HTML –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö

# --- –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ---
# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤ –∏ —É—Ä–æ–≤–µ–Ω—å (INFO - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
# –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤ –æ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ httpx (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –æ—à–∏–±–∫–∏)
logging.getLogger("httpx").setLevel(logging.WARNING)
# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
logger = logging.getLogger(__name__)

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï (–±—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤) ---
BOT_TOKEN: str = ""        # –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
COMPANY_ID: int = 0        # ID –∫–æ–º–ø–∞–Ω–∏–∏, –∫ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏–≤—è–∑–∞–Ω —ç—Ç–æ—Ç –±–æ—Ç
ADMIN_API_URL: str = ""    # URL –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±—ç–∫–µ–Ω–¥–∞ (FastAPI)

# --- –î–û–ë–ê–í–õ–ï–ù–û: –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤ (–Ω—É–∂–Ω—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏) ---
ORDER_STATUSES = ["–í –æ–±—Ä–∞–±–æ—Ç–∫–µ", "–û–∂–∏–¥–∞–µ—Ç –≤—ã–∫—É–ø–∞", "–í—ã–∫—É–ø–ª–µ–Ω", "–ù–∞ —Å–∫–ª–∞–¥–µ –≤ –ö–∏—Ç–∞–µ", "–í –ø—É—Ç–∏", "–ù–∞ —Å–∫–ª–∞–¥–µ –≤ –ö–†", "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ", "–í—ã–¥–∞–Ω"]

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–ú–µ–Ω—é) ---
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –û–ë–´–ß–ù–û–ì–û –ö–õ–ò–ï–ù–¢–ê
client_main_menu_keyboard = [
    ["üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã"],
    ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", "üá®üá≥ –ê–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–æ–≤"],
    ["üá∞üá¨ –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã"]
]
client_main_menu_markup = ReplyKeyboardMarkup(client_main_menu_keyboard, resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –í–õ–ê–î–ï–õ–¨–¶–ê
owner_main_menu_keyboard = [
    ["üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "üì¶ –í—Å–µ –ó–∞–∫–∞–∑—ã"],
    ["üë• –ö–ª–∏–µ–Ω—Ç—ã", "üè¢ –§–∏–ª–∏–∞–ª—ã"],
    ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", "üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ"],
    ["üá®üá≥ –ê–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–æ–≤", "üá∞üá¨ –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã"]
]
owner_main_menu_markup = ReplyKeyboardMarkup(owner_main_menu_keyboard, resize_keyboard=True)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler'–æ–≤ ---
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞ –≤ –¥–∏–∞–ª–æ–≥–∞—Ö
# –î–∏–∞–ª–æ–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:
ASK_PHONE, GET_NAME = range(2)
# –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:
CHOOSE_LOCATION, TRACK_CODE, COMMENT = range(2, 5) # –ù–∞—á–∏–Ω–∞–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é —Å 2, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è

# --- –§—É–Ω–∫—Ü–∏–∏-–ø–æ–º–æ—â–Ω–∏–∫–∏ ---

def normalize_phone_number(phone_str: str) -> str:
    """–û—á–∏—â–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —Ñ–æ—Ä–º–∞—Ç—É 996XXXXXXXXX."""
    if not phone_str: return "" # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –Ω–∞ –≤—Ö–æ–¥–µ –ø—É—Å—Ç–æ
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    digits = "".join(filter(str.isdigit, phone_str))
    # –õ–æ–≥–∏–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–∞
    if len(digits) == 12 and digits.startswith("996"):
        return digits # –£–∂–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (996555123456)
    if len(digits) == 10 and digits.startswith("0"):
        return "996" + digits[1:] # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º 0555123456 -> 996555123456
    if len(digits) == 9:
        return "996" + digits # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º 555123456 -> 996555123456
    # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä: {phone_str} -> {digits}")
    return ""

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API ---
async def api_request(method: str, endpoint: str, **kwargs) -> Optional[Dict[str, Any]]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –±—ç–∫–µ–Ω–¥–∞.
    Args:
        method (str): HTTP –º–µ—Ç–æ–¥ ('GET', 'POST', 'PATCH', 'DELETE').
        endpoint (str): –ü—É—Ç—å –∫ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—É (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '/api/...').
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è httpx (json, params, data, headers).
    Returns:
        Optional[Dict[str, Any]]: –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π JSON-–æ—Ç–≤–µ—Ç –æ—Ç API –∏–ª–∏ None/—Å–ª–æ–≤–∞—Ä—å —Å –æ—à–∏–±–∫–æ–π.
    """
    global ADMIN_API_URL, COMPANY_ID # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è URL –∏ ID –∫–æ–º–ø–∞–Ω–∏–∏
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ URL API
    if not ADMIN_API_URL:
        logger.error("ADMIN_API_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å API –∑–∞–ø—Ä–æ—Å.")
        return {"error": "URL API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.", "status_code": 500}
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL
    url = f"{ADMIN_API_URL}{endpoint}"

    # --- –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –±–æ—Ç–∞/–∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ API ---
    # –î–æ–±–∞–≤–ª—è–µ–º company_id –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã GET –∏–ª–∏ —Ç–µ–ª–æ POST/PATCH/PUT
    if method.upper() == 'GET':
        params = kwargs.get('params', {})
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ company_id –µ—â–µ –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é
        if 'company_id' not in params:
            params['company_id'] = COMPANY_ID
        kwargs['params'] = params
    elif method.upper() in ['POST', 'PATCH', 'PUT']:
        json_data = kwargs.get('json') # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º .get() —Å default={}, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–µ—Ä–µ–¥–∞—Ç—å None
        if json_data is not None: # –î–æ–±–∞–≤–ª—è–µ–º company_id, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–ª–æ JSON –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ company_id –µ—â–µ –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é
            if 'company_id' not in json_data:
                json_data['company_id'] = COMPANY_ID
            kwargs['json'] = json_data
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è 'data' –≤–º–µ—Å—Ç–æ 'json', –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ company_id —Ç–∞–º —É–∂–µ –µ—Å—Ç—å –∏–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω
    # --------------------------------------------------------------------

    headers = kwargs.pop('headers', {'Content-Type': 'application/json'}) # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º httpx.AsyncClient –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        async with httpx.AsyncClient(timeout=15.0) as client: # –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º–∞—É—Ç –¥–æ 15 —Å–µ–∫
            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
            logger.debug(f"API Request: {method} {url} | Headers: {headers} | Data/Params: {kwargs}")
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = await client.request(method, url, headers=headers, **kwargs)
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            logger.debug(f"API Response: {response.status_code} for {method} {url}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ >400, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏—Å–∫–ª—é—á–µ–Ω–∏–µ HTTPStatusError
            response.raise_for_status()

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            if response.status_code == 204: # No Content (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è DELETE)
                return {"status": "ok"} # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ª–æ–≤–Ω—ã–π —É—Å–ø–µ—Ö

            # –ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
            if response.content:
                try:
                    return response.json()
                except Exception as json_err:
                    logger.error(f"API Error: Failed to decode JSON response from {url}. Status: {response.status_code}. Content: {response.text[:200]}...", exc_info=True)
                    return {"error": "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.", "status_code": 500}
            else:
                 # –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ —Ç–µ–ª–∞
                 return {"status": "ok"}

    except httpx.HTTPStatusError as e:
        # –û—à–∏–±–∫–∞ –æ—Ç API (4xx, 5xx) - –±—ç–∫–µ–Ω–¥ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É
        error_detail = f"–û—à–∏–±–∫–∞ API ({e.response.status_code})"
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Å–æ–æ–±—â–µ–Ω–∏–µ 'detail' –∏–∑ JSON-–æ—Ç–≤–µ—Ç–∞ –æ—à–∏–±–∫–∏
            error_data = e.response.json()
            error_detail = error_data.get("detail", str(error_data))
        except Exception:
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ JSON, –±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            error_detail = e.response.text or str(e)
        logger.error(f"API Error ({e.response.status_code}) for {method} {url}: {error_detail}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –æ—à–∏–±–∫–æ–π
        return {"error": error_detail, "status_code": e.response.status_code}
    except httpx.RequestError as e:
        # –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ (–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Å–µ—Ä–≤–µ—Ä, —Ç–∞–π–º–∞—É—Ç DNS –∏ —Ç.–¥.)
        logger.error(f"Network Error for {method} {url}: {e}")
        return {"error": "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", "status_code": 503} # Service Unavailable
    except Exception as e:
        # –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        logger.error(f"Unexpected Error during API request to {url}: {e}", exc_info=True) # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π traceback
        return {"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.", "status_code": 500}

# bot_template.py (–ó–ê–ú–ï–ù–ò–¢–¨ –ü–û–õ–ù–û–°–¢–¨–Æ —Ñ—É–Ω–∫—Ü–∏—é start)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–ª–∏–µ–Ω—Ç—É –≤ –≠–¢–û–ô –∫–æ–º–ø–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ API.
    –ï—Å–ª–∏ –¥–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞).
    –ï—Å–ª–∏ –Ω–µ—Ç - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è ConversationHandler.
    """
    user = update.effective_user
    chat_id = str(user.id) # ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.full_name} (ID: {chat_id}) –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {COMPANY_ID}")

    # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Chat ID
    api_response = await api_request(
        "POST",
        "/api/bot/identify_user", # –≠–Ω–¥–ø–æ–∏–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Å–æ–∑–¥–∞–ª–∏ –≤ main.py
        json={"telegram_chat_id": chat_id, "company_id": COMPANY_ID} # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ID —á–∞—Ç–∞ –∏ ID –∫–æ–º–ø–∞–Ω–∏–∏
    )

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç API
    if api_response and "error" not in api_response:
        # –£—Å–ø–µ—Ö: API –Ω–∞—à–µ–ª –∫–ª–∏–µ–Ω—Ç–∞ –∏ –≤–µ—Ä–Ω—É–ª –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
        client_data = api_response.get("client")
        is_owner = api_response.get("is_owner", False) # –ü–æ–ª—É—á–∞–µ–º —Ñ–ª–∞–≥ –í–ª–∞–¥–µ–ª—å—Ü–∞

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã
        if not client_data or not client_data.get("id"):
             logger.error(f"–û—à–∏–±–∫–∞ API /api/bot/identify_user: –ù–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —É—Å–ø–µ—à–Ω–æ–º –æ—Ç–≤–µ—Ç–µ. –û—Ç–≤–µ—Ç: {api_response}")
             await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –ø–æ–∑–∂–µ.", reply_markup=ReplyKeyboardRemove())
             return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ user_data –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö
        context.user_data['client_id'] = client_data.get("id")
        context.user_data['is_owner'] = is_owner
        context.user_data['full_name'] = client_data.get("full_name")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ ClientID: {client_data.get('id')}, IsOwner: {is_owner}")

        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = owner_main_menu_markup if is_owner else client_main_menu_markup
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –¥–ª—è –í–ª–∞–¥–µ–ª—å—Ü–∞
        role_text = " (–í–ª–∞–¥–µ–ª–µ—Ü)" if is_owner else ""
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_html(
            f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{client_data.get('full_name')}</b>{role_text}!\n\n–†–∞–¥ –≤–∞—Å —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.",
            reply_markup=markup
        )
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
        return ConversationHandler.END
    elif api_response and api_response.get("status_code") == 404:
        # –û—à–∏–±–∫–∞ 404 –æ—Ç API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Chat ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ Chat ID –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {COMPANY_ID}. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω.")
        # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await update.message.reply_text(
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üåü\n\n–ü–æ—Ö–æ–∂–µ, –º—ã –µ—â–µ –Ω–µ –∑–Ω–∞–∫–æ–º—ã –∏–ª–∏ –≤–∞—à Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω."
            "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ç–æ—Ç, —á—Ç–æ –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –∫–∞—Ä–≥–æ).",
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—Ä–æ—Å–∏—Ç –∫–æ–Ω—Ç–∞–∫—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", request_contact=True)]], # request_contact=True - –º–∞–≥–∏—è Telegram
                resize_keyboard=True, one_time_keyboard=True # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥ —Ä–∞–∑–º–µ—Ä, –∏—Å—á–µ–∑–∞–µ—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
            )
        )
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ASK_PHONE, –æ–∂–∏–¥–∞—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
        return ASK_PHONE
    else:
        # –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ API (500, 400 –∏ —Ç.–¥.) –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏
        error_msg = api_response.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.") if api_response else "–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ /api/bot/identify_user (Chat ID): {error_msg}")
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
        await update.message.reply_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {error_msg}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –Ω–∞–∂–∞–≤ /start.",
            reply_markup=ReplyKeyboardRemove() # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        return ConversationHandler.END

async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞) –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä".
    –ü—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —á–µ—Ä–µ–∑ API.
    –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω - –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç Telegram –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é.
    –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –ø–µ—Ä–µ—Ö–æ–¥—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ GET_NAME.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è ConversationHandler.
    """
    user = update.effective_user
    chat_id = str(user.id)
    contact = update.message.contact # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–µ–Ω
    if not contact:
        logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞, —Ö–æ—Ç—è –æ–∂–∏–¥–∞–ª—Å—è.")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=ReplyKeyboardRemove())
        return ASK_PHONE # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞

    phone_number = contact.phone_number
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä –∫ —Ñ–æ—Ä–º–∞—Ç—É 996...
    normalized_phone = normalize_phone_number(phone_number)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    if not normalized_phone:
         await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞—á–∏–Ω–∞—è —Å 0 –∏–ª–∏ 996).", reply_markup=ReplyKeyboardRemove())
         return ASK_PHONE # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞

    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç {user.full_name} (ID: {chat_id}): {phone_number} -> {normalized_phone}")

    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –ù–û–ú–ï–†–£ –¢–ï–õ–ï–§–û–ù–ê —á–µ—Ä–µ–∑ API
    api_response = await api_request(
        "POST",
        "/api/bot/identify_user", # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç
        json={"telegram_chat_id": chat_id, "phone_number": normalized_phone, "company_id": COMPANY_ID}
    )

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç API
    if api_response and "error" not in api_response:
        # –£—Å–ø–µ—Ö: –ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –ø–æ –Ω–æ–º–µ—Ä—É, API –ø—Ä–∏–≤—è–∑–∞–ª Chat ID
        client_data = api_response.get("client")
        is_owner = api_response.get("is_owner", False)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞
        if not client_data or not client_data.get("id"):
             logger.error(f"–û—à–∏–±–∫–∞ API /api/bot/identify_user (Phone): –ù–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞. –û—Ç–≤–µ—Ç: {api_response}")
             await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.", reply_markup=ReplyKeyboardRemove())
             return ConversationHandler.END

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ user_data
        context.user_data['client_id'] = client_data.get("id")
        context.user_data['is_owner'] = is_owner
        context.user_data['full_name'] = client_data.get("full_name")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ ClientID: {client_data.get('id')}, IsOwner: {is_owner}")

        # –í—ã–±–∏—Ä–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        markup = owner_main_menu_markup if is_owner else client_main_menu_markup
        role_text = " (–í–ª–∞–¥–µ–ª–µ—Ü)" if is_owner else ""
        await update.message.reply_html(
            f"üéâ –û—Ç–ª–∏—á–Ω–æ, <b>{client_data.get('full_name')}</b>{role_text}! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.",
            reply_markup=markup
        )
        # –£—Å–ø–µ—à–Ω–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
        return ConversationHandler.END
    elif api_response and api_response.get("status_code") == 404:
        # –û—à–∏–±–∫–∞ 404 –æ—Ç API: –ö–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –ù–ï –ù–ê–ô–î–ï–ù –≤ —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
        logger.info(f"–ö–ª–∏–µ–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º {normalized_phone} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {COMPANY_ID}. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        context.user_data['phone_to_register'] = normalized_phone
        # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∏–º—è
        await update.message.reply_html( # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            f"–ö–ª–∏–µ–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º <code>{normalized_phone}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω. –•–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ <b>–ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û)</b>.",
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardRemove() # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
        )
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ GET_NAME, –æ–∂–∏–¥–∞—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
        return GET_NAME
    else:
        # –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ API –∏–ª–∏ —Å–µ—Ç–∏
        error_msg = api_response.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.") if api_response else "–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ /api/bot/identify_user (Phone): {error_msg}")
        await update.message.reply_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–º–µ—Ä–∞: {error_msg}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –Ω–∞–∂–∞–≤ /start.",
            reply_markup=ReplyKeyboardRemove()
            )
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        return ConversationHandler.END

async def register_via_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è ConversationHandler'–æ–º, –∫–æ–≥–¥–∞ –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ GET_NAME.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ API.
    """
    user = update.effective_user
    chat_id = str(user.id)
    full_name = update.message.text # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ
    phone_to_register = context.user_data.get('phone_to_register')
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–º–µ—Ä (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    if not phone_to_register:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è {chat_id}: –ù–µ –Ω–∞–π–¥–µ–Ω phone_to_register –≤ user_data.")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ —Å /start.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ (–Ω–µ –ø—É—Å—Ç–æ–µ)
    if not full_name or len(full_name) < 2:
         await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û).")
         return GET_NAME # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏

    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞: –ò–º—è='{full_name}', –¢–µ–ª–µ—Ñ–æ–Ω='{phone_to_register}', –ö–æ–º–ø–∞–Ω–∏—è={COMPANY_ID}, ChatID={chat_id}")

    # --- –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è –°–û–ó–î–ê–ù–ò–Ø –∫–ª–∏–µ–Ω—Ç–∞ ---
    # –ë—ç–∫–µ–Ω–¥ —Å–∞–º —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç –¥—É–±–ª–∏–∫–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –µ—â–µ —Ä–∞–∑
    api_response = await api_request(
        "POST",
        "/api/clients", # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        json={
            "full_name": full_name,
            "phone": phone_to_register, # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
            "company_id": COMPANY_ID,   # –ü–µ—Ä–µ–¥–∞–µ–º ID –∫–æ–º–ø–∞–Ω–∏–∏
            "telegram_chat_id": chat_id # –°—Ä–∞–∑—É –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Telegram
            # client_code_prefix –∏ client_code_num –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º, –±—ç–∫–µ–Ω–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç
        }
    )

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç API
    if api_response and "error" not in api_response and "id" in api_response:
        # –£—Å–ø–µ—Ö: –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω
        client_data = api_response # –û—Ç–≤–µ—Ç POST /api/clients - —ç—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not client_data.get("id"):
             logger.error(f"–û—à–∏–±–∫–∞ API POST /api/clients: –ù–µ –ø–æ–ª—É—á–µ–Ω ID –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞. –û—Ç–≤–µ—Ç: {api_response}")
             await update.message.reply_text("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –ø–æ–∑–∂–µ.", reply_markup=ReplyKeyboardRemove())
             return ConversationHandler.END

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ user_data
        context.user_data['client_id'] = client_data.get("id")
        context.user_data['is_owner'] = False # –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç —Ç–æ—á–Ω–æ –Ω–µ –í–ª–∞–¥–µ–ª–µ—Ü
        context.user_data['full_name'] = client_data.get("full_name")
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        context.user_data.pop('phone_to_register', None)
        logger.info(f"–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ID={client_data.get('id')}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        await update.message.reply_html(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, <b>{full_name}</b>!\n\n"
            f"–í–∞—à –∫–æ–¥: <b>{client_data.get('client_code_prefix', '')}{client_data.get('client_code_num', '')}</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.",
            reply_markup=client_main_menu_markup # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞
        )
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
        return ConversationHandler.END
    else:
        # –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
        error_msg = api_response.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.") if api_response else "–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ POST /api/clients –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {error_msg}")
        await update.message.reply_text(
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {error_msg}\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, –∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start —Å–Ω–æ–≤–∞.",
            reply_markup=ReplyKeyboardRemove()
            )
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        return ConversationHandler.END

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–ò–ê–õ–û–ì–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ó–ê–ö–ê–ó–ê ---

async def add_order_start_conv(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: –≤—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞."""
    client_id = context.user_data.get('client_id')
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not client_id:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ /start.")
        return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–∞–µ–º, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {client_id} –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {COMPANY_ID}.")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
    api_response = await api_request("GET", "/api/locations", params={'company_id': COMPANY_ID})

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç API
    if not api_response or "error" in api_response or not isinstance(api_response, list) or not api_response:
        error_msg = api_response.get("error", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∏–ª–∏–∞–ª—ã.") if api_response else "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞."
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤ –¥–ª—è company_id={COMPANY_ID}: {error_msg}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {error_msg}")
        return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ

    locations = api_response # –°–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏ –∏–º–µ–Ω–∞ —Ñ–∏–ª–∏–∞–ª–æ–≤ –≤ user_data –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    context.user_data['available_locations'] = {loc['id']: loc['name'] for loc in locations}

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤
    keyboard = [
        # –°–æ–∑–¥–∞–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
        [InlineKeyboardButton(loc['name'], callback_data=f"loc_{loc['id']}") for loc in locations[i:i+2]]
        for i in range(0, len(locations), 2)
    ]
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_add_order")])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª–∏–∞–ª–∞
    await update.message.reply_text(
        "–®–∞–≥ 1/3: –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∑–∞–∫–∞–∑:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ CHOOSE_LOCATION, –æ–∂–∏–¥–∞—è –Ω–∞–∂–∞—Ç–∏—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    return CHOOSE_LOCATION

async def location_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª–∏–∞–ª–∞ (–Ω–∞–∂–∞—Ç–∏–µ Inline –∫–Ω–æ–ø–∫–∏)."""
    query = update.callback_query # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç CallbackQuery
    await query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å–∏–∫–∏ —É –∫–Ω–æ–ø–∫–∏

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ñ–∏–ª–∏–∞–ª–∞ –∏–∑ callback_data (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'loc_7' -> '7')
    location_id_str = query.data.split('_')[1]

    try:
        chosen_location_id = int(location_id_str) # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —á–∏—Å–ª–æ
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π ID –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º —Ä–∞–Ω–µ–µ
        available_locations = context.user_data.get('available_locations', {})
        if chosen_location_id not in available_locations:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤—ã–±—Ä–∞–ª –Ω–µ–≤–µ—Ä–Ω—ã–π location_id: {chosen_location_id}")
            await query.edit_message_text(text="–û—à–∏–±–∫–∞: –í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–∏–ª–∏–∞–ª.")
            return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π ID —Ñ–∏–ª–∏–∞–ª–∞ –≤ user_data
        context.user_data['chosen_location_id'] = chosen_location_id
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∏–ª–∏–∞–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        location_name = available_locations.get(chosen_location_id, f"ID {chosen_location_id}")

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤—ã–±—Ä–∞–ª —Ñ–∏–ª–∏–∞–ª {location_name} (ID: {chosen_location_id})")

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª–∏–∞–ª–æ–≤
        await query.edit_message_text(text=f"–§–∏–ª–∏–∞–ª '{location_name}' –≤—ã–±—Ä–∞–Ω.")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ç—Ä–µ–∫-–∫–æ–¥–∞ –∏ –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π "–û—Ç–º–µ–Ω–∞"
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–®–∞–≥ 2/3: –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫-–∫–æ–¥ –∑–∞–∫–∞–∑–∞:",
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
            reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True, one_time_keyboard=True)
        )
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ TRACK_CODE, –æ–∂–∏–¥–∞—è –≤–≤–æ–¥–∞ —Ç—Ä–µ–∫-–∫–æ–¥–∞
        return TRACK_CODE
    except (ValueError, IndexError, KeyError) as e: # –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª–∏–∞–ª–∞: {e}. Callback data: {query.data}", exc_info=True)
        await query.edit_message_text(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∏–ª–∏–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ

async def received_track_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω —Ç—Ä–µ–∫-–∫–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    track_code = update.message.text.strip() # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è (–Ω–µ –ø—É—Å—Ç–æ–π –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞)
    if not track_code or len(track_code) < 3: # –ü—Ä–∏–º–µ—Ä –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã - 3 —Å–∏–º–≤–æ–ª–∞
        await update.message.reply_text("–¢—Ä–µ–∫-–∫–æ–¥ –∫–∞–∂–µ—Ç—Å—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑:")
        return TRACK_CODE # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –æ–∂–∏–¥–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–∫-–∫–æ–¥ –≤ user_data
    context.user_data['track_code'] = track_code
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤–≤–µ–ª —Ç—Ä–µ–∫-–∫–æ–¥: {track_code}")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–û—Ç–º–µ–Ω–∞")
    keyboard = [
        ["‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"], # –ö–Ω–æ–ø–∫–∞ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
        ["–û—Ç–º–µ–Ω–∞"]       # –ö–Ω–æ–ø–∫–∞ –û—Ç–º–µ–Ω–∞
    ]
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    await update.message.reply_text(
        "–®–∞–≥ 3/3: –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫—Ä–∞—Å–Ω—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏') –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ COMMENT, –æ–∂–∏–¥–∞—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    return COMMENT

async def skip_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –Ω–∞ —à–∞–≥–µ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è."""
    context.user_data['comment'] = None # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ None
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≤–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.")
    # –°—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    # save_order_from_bot —Å–∞–º–∞ –∑–∞–≤–µ—Ä—à–∏—Ç –¥–∏–∞–ª–æ–≥ (–≤–µ—Ä–Ω–µ—Ç ConversationHandler.END)
    return await save_order_from_bot(update, context)

async def received_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    comment = update.message.text # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    context.user_data['comment'] = comment # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤–≤–µ–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
    # –°—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    # save_order_from_bot —Å–∞–º–∞ –∑–∞–≤–µ—Ä—à–∏—Ç –¥–∏–∞–ª–æ–≥ (–≤–µ—Ä–Ω–µ—Ç ConversationHandler.END)
    return await save_order_from_bot(update, context)

async def save_order_from_bot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ API."""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ user_data
    client_id = context.user_data.get('client_id')
    location_id = context.user_data.get('chosen_location_id')
    track_code = context.user_data.get('track_code')
    comment = context.user_data.get('comment') # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
    is_owner = context.user_data.get('is_owner', False)
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    markup = owner_main_menu_markup if is_owner else client_main_menu_markup

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –≤ –¥–∏–∞–ª–æ–≥–µ –∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç
    if not all([client_id, location_id, track_code]):
         await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ —Å–Ω–æ–≤–∞.", reply_markup=markup)
         logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö. client={client_id}, loc={location_id}, track={track_code}")
         # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
         context.user_data.pop('chosen_location_id', None)
         context.user_data.pop('track_code', None)
         context.user_data.pop('comment', None)
         context.user_data.pop('available_locations', None)
         return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –æ—à–∏–±–∫–æ–π

    # –§–æ—Ä–º–∏—Ä—É–µ–º payload –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç POST /api/orders
    payload = {
        "client_id": client_id,
        "location_id": location_id, # ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
        "track_code": track_code,
        "comment": comment, # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–º–æ–∂–µ—Ç –±—ã—Ç—å null)
        "purchase_type": "–î–æ—Å—Ç–∞–≤–∫–∞", # –ó–∞–∫–∞–∑—ã –∏–∑ –±–æ—Ç–∞ - –≤—Å–µ–≥–¥–∞ –î–æ—Å—Ç–∞–≤–∫–∞
        "company_id": COMPANY_ID # –ü–µ—Ä–µ–¥–∞–µ–º ID –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        # party_date –±—ç–∫–µ–Ω–¥ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç —Å–∞–º
    }
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞: {payload}")
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
    api_response = await api_request("POST", "/api/orders", json=payload)

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç API
    if api_response and "error" not in api_response and "id" in api_response:
        # –£—Å–ø–µ—Ö: –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω
        order_data = api_response
        logger.info(f"–ó–∞–∫–∞–∑ ID {order_data.get('id')} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")
        await update.message.reply_html(
            f"‚úÖ –ì–æ—Ç–æ–≤–æ! –í–∞—à –∑–∞–∫–∞–∑ —Å —Ç—Ä–µ–∫-–∫–æ–¥–æ–º <code>{track_code}</code> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.",
            reply_markup=markup # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        )
    else:
        # –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
        error_msg = api_response.get("error", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑.") if api_response else "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞."
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}: {error_msg}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {error_msg}", reply_markup=markup)

    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    context.user_data.pop('chosen_location_id', None)
    context.user_data.pop('track_code', None)
    context.user_data.pop('comment', None)
    context.user_data.pop('available_locations', None)
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
    return ConversationHandler.END

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î –ú–ï–ù–Æ (–≤–Ω–µ –¥–∏–∞–ª–æ–≥–æ–≤) ---
async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é). –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ –¥–∏–∞–ª–æ–≥–æ–º."""
    user = update.effective_user
    text = update.message.text
    client_id = context.user_data.get('client_id')
    is_owner = context.user_data.get('is_owner', False)
    chat_id = update.effective_chat.id

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ ---
    if not client_id:
        logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ '{text}' –æ—Ç –Ω–µ–∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}.")
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å. –ù–∞–∂–º–∏—Ç–µ /start.", reply_markup=ReplyKeyboardRemove())
        return

    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –æ—Ç {user.full_name} (ClientID: {client_id}, IsOwner: {is_owner}): '{text}'")
    markup = owner_main_menu_markup if is_owner else client_main_menu_markup

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é ---
    if text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        logger.info(f"–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ profile –¥–ª—è client_id={client_id}")
        await profile(update, context)
    elif text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã" and not is_owner: # "–ú–æ–∏ –∑–∞–∫–∞–∑—ã" —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        logger.info(f"–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ my_orders –¥–ª—è client_id={client_id}")
        await my_orders(update, context)
    # –ö–æ–º–∞–Ω–¥–∞ "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑" –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è ConversationHandler'–æ–º, –ø–æ—ç—Ç–æ–º—É –∑–¥–µ—Å—å –µ–µ –Ω–µ—Ç
    elif text == "üá®üá≥ –ê–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–æ–≤":
        logger.info(f"–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ china_addresses –¥–ª—è client_id={client_id}")
        await china_addresses(update, context)
    elif text == "üá∞üá¨ –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã":
        logger.info(f"–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ bishkek_contacts –¥–ª—è company_id={COMPANY_ID}")
        await bishkek_contacts(update, context)

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é –í–ª–∞–¥–µ–ª—å—Ü–∞ ---
    elif is_owner:
        if text == "üì¶ –í—Å–µ –ó–∞–∫–∞–∑—ã":
             logger.info(f"–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ owner_all_orders –¥–ª—è company_id={COMPANY_ID}")
             await owner_all_orders(update, context)
        elif text == "üë• –ö–ª–∏–µ–Ω—Ç—ã":
             logger.info(f"–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ owner_clients –¥–ª—è company_id={COMPANY_ID}")
             await owner_clients(update, context)
        elif text == "üè¢ –§–∏–ª–∏–∞–ª—ã":
             logger.info(f"–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ owner_locations –¥–ª—è company_id={COMPANY_ID}")
             await owner_locations(update, context)
        elif text == "üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ":
             logger.info(f"–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ owner_broadcast_start –¥–ª—è company_id={COMPANY_ID}")
             await owner_broadcast_start(update, context)
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –í–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
        else:
             logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –í–ª–∞–¥–µ–ª—å—Ü–∞: '{text}' –æ—Ç {client_id}")
             await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", reply_markup=markup)

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ---
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ö–ª–∏–µ–Ω—Ç–∞: '{text}' –æ—Ç {client_id}")
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.", reply_markup=markup)

# --- –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –§–£–ù–ö–¶–ò–ô-–ó–ê–ì–õ–£–®–ï–ö (—Å await) ---
# bot_template.py (–ó–ê–ú–ï–ù–ò–¢–¨ –ü–û–õ–ù–û–°–¢–¨–Æ —Ñ—É–Ω–∫—Ü–∏—é profile)

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ (–∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞), –∑–∞–ø—Ä–∞—à–∏–≤–∞—è –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API."""
    user = update.effective_user
    chat_id = str(user.id)
    client_id = context.user_data.get('client_id')
    is_owner = context.user_data.get('is_owner', False)
    markup = owner_main_menu_markup if is_owner else client_main_menu_markup

    if not client_id:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ profile –±–µ–∑ client_id –¥–ª—è chat_id={chat_id}")
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.", reply_markup=markup)
        return

    logger.info(f"–ó–∞–ø—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")
    await update.message.reply_text("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è...", reply_markup=markup) # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ

    # --- –®–∞–≥ 1: –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ ---
    api_response_client = await api_request("GET", f"/api/clients/{client_id}", params={'company_id': COMPANY_ID})

    if not api_response_client or "error" in api_response_client:
        error_msg = api_response_client.get("error", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.") if api_response_client else "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞."
        logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}: {error_msg}")
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∏ –≤—ã—Ö–æ–¥–∏–º ---
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: {error_msg}")
        return # –í—ã—Ö–æ–¥–∏–º –ø—Ä–∏ –æ—à–∏–±–∫–µ

    client = api_response_client # –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã

    # --- –®–∞–≥ 2: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è ---
    role_text = " (–í–ª–∞–¥–µ–ª–µ—Ü)" if is_owner else ""
    text = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>{role_text}\n\n"
        f"<b>‚ú® –§–ò–û:</b> {client.get('full_name', '?')}\n"
        f"<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</b> {client.get('phone', '?')}\n"
        f"<b>‚≠êÔ∏è –í–∞—à –∫–æ–¥:</b> {client.get('client_code_prefix', '')}{client.get('client_code_num', '–ù–µ—Ç –∫–æ–¥–∞')}\n"
        f"<b>üìä –°—Ç–∞—Ç—É—Å:</b> {client.get('status', '–†–æ–∑–Ω–∏—Ü–∞')}\n"
        f"\n<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥.</i>"
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –ë–ï–ó –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∞
    await update.message.reply_html(text, reply_markup=markup) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

    # --- –®–∞–≥ 3: –û–¢–î–ï–õ–¨–ù–´–ô –ó–∞–ø—Ä–æ—Å —Å—Å—ã–ª–∫–∏ –Ω–∞ –õ–ö ---
    logger.info(f"–ó–∞–ø—Ä–æ—Å —Å—Å—ã–ª–∫–∏ –õ–ö –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")
    # –ü–µ—Ä–µ–¥–∞–µ–º company_id –≤ —Ç–µ–ª–µ POST, —Ç–∞–∫ –∫–∞–∫ GET –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª (?)
    api_response_link = await api_request("POST", f"/api/clients/{client_id}/generate_lk_link", json={'company_id': COMPANY_ID})
    lk_url = None
    if api_response_link and "error" not in api_response_link:
        lk_url = api_response_link.get("link")
        logger.info(f"–°—Å—ã–ª–∫–∞ –õ–ö –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –ø–æ–ª—É—á–µ–Ω–∞: {lk_url}")
    else:
        error_msg_link = api_response_link.get("error", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞") if api_response_link else "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –õ–ö –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}: {error_msg_link} (–°—Ç–∞—Ç—É—Å: {api_response_link.get('status_code') if api_response_link else 'N/A'})")
        # –°–æ–æ–±—â–∞—Ç—å –æ–± –æ—à–∏–±–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –õ–ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ

    # --- –®–∞–≥ 4: –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –õ–ö (–µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –µ—Å—Ç—å) –û–¢–î–ï–õ–¨–ù–´–ú —Å–æ–æ–±—â–µ–Ω–∏–µ–º ---
    if lk_url:
        keyboard = [[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç", url=lk_url)]]
        reply_markup_inline = InlineKeyboardMarkup(keyboard)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π
        await update.message.reply_text("–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç:", reply_markup=reply_markup_inline)
        logger.info(f"–ö–Ω–æ–ø–∫–∞ –õ–ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É {client_id}")

async def my_orders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –û–ë–´–ß–ù–û–ì–û –ö–õ–ò–ï–ù–¢–ê, –∑–∞–ø—Ä–∞—à–∏–≤–∞—è –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API."""
    user = update.effective_user
    chat_id = str(user.id)
    client_id = context.user_data.get('client_id')
    is_owner = context.user_data.get('is_owner', False)
    markup = owner_main_menu_markup if is_owner else client_main_menu_markup

    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    if is_owner:
        logger.warning(f"–í–ª–∞–¥–µ–ª–µ—Ü {client_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–∑–≤–∞—Ç—å '–ú–æ–∏ –∑–∞–∫–∞–∑—ã' –≤–º–µ—Å—Ç–æ '–í—Å–µ –∑–∞–∫–∞–∑—ã'.")
        await update.message.reply_text("–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üì¶ –í—Å–µ –ó–∞–∫–∞–∑—ã'.", reply_markup=markup)
        return
    if not client_id:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ my_orders –±–µ–∑ client_id –¥–ª—è chat_id={chat_id}")
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.", reply_markup=markup)
        return

    logger.info(f"–ó–∞–ø—Ä–æ—Å '–ú–æ–∏ –∑–∞–∫–∞–∑—ã' –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")
    await update.message.reply_text("–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞—à–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤...", reply_markup=markup)

    # --- –ó–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ ---
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: ID –∫–ª–∏–µ–Ω—Ç–∞ –∏ –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã, –∫—Ä–æ–º–µ "–í—ã–¥–∞–Ω"
    params = {'client_id': client_id}
    # –ü–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö URL
    statuses_param = [s for s in ORDER_STATUSES if s != "–í—ã–¥–∞–Ω"]
    # –î–æ–±–∞–≤–ª—è–µ–º company_id
    params['company_id'] = COMPANY_ID

    # –í—ã–ø–æ–ª–Ω—è–µ–º GET –∑–∞–ø—Ä–æ—Å –∫ /api/orders
    # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ?statuses=–°—Ç–∞—Ç—É—Å1&statuses=–°—Ç–∞—Ç—É—Å2...
    api_response = await api_request("GET", "/api/orders", params={'client_id': client_id, 'statuses': statuses_param, 'company_id': COMPANY_ID})

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç API
    if not api_response or "error" in api_response or not isinstance(api_response, list):
        error_msg = api_response.get("error", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã.") if api_response else "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞."
        logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ {client_id}: {error_msg}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {error_msg}")
        return

    active_orders = api_response # –û—Ç–≤–µ—Ç - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤

    if not active_orders:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤. üöö", reply_markup=markup)
        return

    # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤ ---
    message = "üì¶ <b>–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã:</b>\n\n"
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID (–∏–ª–∏ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è), –Ω–æ–≤—ã–µ –≤–≤–µ—Ä—Ö—É
    for order in sorted(active_orders, key=lambda o: o.get('id', 0), reverse=True):
        message += f"<b>–¢—Ä–µ–∫:</b> <code>{order.get('track_code', '?')}</code>\n"
        message += f"<b>–°—Ç–∞—Ç—É—Å:</b> {order.get('status', '?')}\n"
        comment = order.get('comment')
        if comment:
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML-—Å–∏–º–≤–æ–ª—ã –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            import html
            message += f"<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> {html.escape(comment)}\n"

        # –î–æ–±–∞–≤–∏–º –≤–µ—Å –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å, –µ—Å–ª–∏ –æ–Ω–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã
        calc_weight = order.get('calculated_weight_kg')
        calc_cost = order.get('calculated_final_cost_som')
        if calc_weight is not None and calc_cost is not None:
             message += f"<b>–†–∞—Å—á–µ—Ç:</b> {calc_weight:.3f} –∫–≥ / {calc_cost:.0f} —Å–æ–º\n"

        message += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è Telegram (4096 —Å–∏–º–≤–æ–ª–æ–≤)
    if len(message) > 4000:
         message = message[:4000] + "\n... (—Å–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π)"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_html(message, reply_markup=markup)
    logger.info(f"–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ ({len(active_orders)}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É {client_id}")

# bot_template.py (–ó–ê–ú–ï–ù–ò–¢–¨ –ü–û–õ–ù–û–°–¢–¨–Æ china_addresses)

async def china_addresses(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ, –ø–æ–¥—Å—Ç–∞–≤–ª—è—è –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è—è –∫–Ω–æ–ø–∫—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."""
    user = update.effective_user
    chat_id = str(user.id)
    client_id = context.user_data.get('client_id')
    is_owner = context.user_data.get('is_owner', False)
    markup = owner_main_menu_markup if is_owner else client_main_menu_markup

    if not client_id:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.", reply_markup=markup)
        return

    logger.info(f"–ó–∞–ø—Ä–æ—Å –∞–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–∞ –ö–∏—Ç–∞—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")
    processing_message = await update.message.reply_text("–ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–∞...", reply_markup=markup)

    client_unique_code = "–í–ê–®_–ö–û–î" # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    address_text_template = "–ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ."
    instruction_link = None # –°—Å—ã–ª–∫–∞ –Ω–∞ PDF

    try:
        # --- –ó–∞–ø—Ä–æ—Å 1: –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ (–¥–ª—è –∫–æ–¥–∞) ---
        api_response_client = await api_request("GET", f"/api/clients/{client_id}", params={'company_id': COMPANY_ID})
        if api_response_client and "error" not in api_response_client:
            client = api_response_client
            client_code_num = client.get('client_code_num')
            client_code_prefix = client.get('client_code_prefix', 'PREFIX')
            if client_code_num:
                client_unique_code = f"{client_code_prefix}-{client_code_num}" # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–∏—Å –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            logger.info(f"–ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –ø–æ–ª—É—á–µ–Ω: {client_unique_code}")
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –¥–ª—è –∫–æ–¥–∞.")

        # --- –ó–∞–ø—Ä–æ—Å 2: –ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –ò –°–°–´–õ–ö–ê –ù–ê –ò–ù–°–¢–†–£–ö–¶–ò–Æ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---
        keys_to_fetch = ['china_warehouse_address', 'address_instruction_pdf_link'] # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±–∞ –∫–ª—é—á–∞
        api_response_settings = await api_request("GET", "/api/settings", params={'company_id': COMPANY_ID, 'keys': keys_to_fetch})

        if api_response_settings and "error" not in api_response_settings and isinstance(api_response_settings, list):
            settings_dict = {s.get('key'): s.get('value') for s in api_response_settings}
            logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥—Ä–µ—Å–∞/–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {COMPANY_ID} –ø–æ–ª—É—á–µ–Ω—ã: {settings_dict}")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å
            address_value = settings_dict.get('china_warehouse_address')
            if address_value:
                address_text_template = address_value
            else:
                logger.warning(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ 'china_warehouse_address' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {COMPANY_ID}.")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
            instruction_link = settings_dict.get('address_instruction_pdf_link')
            if instruction_link:
                 logger.info(f"–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –Ω–∞–π–¥–µ–Ω–∞: {instruction_link}")
            else:
                 logger.info(f"–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é ('address_instruction_pdf_link') –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {COMPANY_ID}.")

        else:
            error_msg = api_response_settings.get("error", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞") if isinstance(api_response_settings, dict) else "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞"
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å/–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {COMPANY_ID} –∏–∑ API: {error_msg}")

        # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ---
        # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —à–∞–±–ª–æ–Ω –∞–¥—Ä–µ—Å–∞
        address_text = address_text_template.replace("{{client_code}}", client_unique_code).replace("{client_code}", client_unique_code)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = (
            f"üá®üá≥ <b>–ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ</b>\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å –¥–ª—è –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫.\n\n"
            # --- –£–õ–£–ß–®–ï–ù–ù–´–ô –¢–ï–ö–°–¢ ---
            f"‚ùóÔ∏è –í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥: <pre>{client_unique_code}</pre>\n" # –í—ã–¥–µ–ª—è–µ–º –∫–æ–¥
            f"<i>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –µ–≥–æ –ü–û–õ–ù–û–°–¢–¨–Æ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞!</i>\n\n"
            f"üëá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–¥—Ä–µ—Å –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å:\n\n"
            f"<code>{address_text}</code>" # –ê–¥—Ä–µ—Å –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        )

        # --- –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ---
        inline_keyboard = []
        if instruction_link:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –µ—Å—Ç—å
            inline_keyboard.append([InlineKeyboardButton("üìÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∞–¥—Ä–µ—Å–∞", url=instruction_link)])

        reply_markup_inline = InlineKeyboardMarkup(inline_keyboard) if inline_keyboard else None

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ó–∞–≥—Ä—É–∑–∫–∞..."
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=processing_message.message_id)
        except Exception as del_err:
             logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ '–ó–∞–≥—Ä—É–∑–∫–∞...': {del_err}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–¥—Ä–µ—Å–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
        await update.message.reply_html(text, reply_markup=reply_markup_inline)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –±—ã–ª–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞
        if reply_markup_inline:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)

    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ china_addresses –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}: {e}", exc_info=True)
        try: await context.bot.delete_message(chat_id=chat_id, message_id=processing_message.message_id)
        except: pass
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–∞.", reply_markup=markup)

# bot_template.py (–ó–ê–ú–ï–ù–ò–¢–¨ –ü–û–õ–ù–û–°–¢–¨–Æ bishkek_contacts)

async def bishkek_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ñ–∏—Å–∞ –≤ –ë–∏—à–∫–µ–∫–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞—è –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API."""
    user = update.effective_user
    chat_id = str(user.id)
    client_id = context.user_data.get('client_id')
    is_owner = context.user_data.get('is_owner', False)
    markup = owner_main_menu_markup if is_owner else client_main_menu_markup

    logger.info(f"–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ë–∏—à–∫–µ–∫–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {COMPANY_ID}")
    processing_message = await update.message.reply_text("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...", reply_markup=markup)

    # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    address = "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω"
    phone = "–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω"
    whatsapp_link = None
    instagram_link = None
    map_link = None

    try:
        # --- –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ API ---
        keys_to_fetch = ['bishkek_office_address', 'contact_phone', 'whatsapp_link', 'instagram_link', 'map_link']
        api_response_settings = await api_request("GET", "/api/settings", params={'company_id': COMPANY_ID, 'keys': keys_to_fetch})

        if api_response_settings and "error" not in api_response_settings and isinstance(api_response_settings, list):
            settings_dict = {s.get('key'): s.get('value') for s in api_response_settings}
            logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {COMPANY_ID} –ø–æ–ª—É—á–µ–Ω—ã: {settings_dict}")
            address = settings_dict.get('bishkek_office_address') or address
            phone = settings_dict.get('contact_phone') or phone
            whatsapp_link = settings_dict.get('whatsapp_link')
            instagram_link = settings_dict.get('instagram_link')
            map_link = settings_dict.get('map_link')
        else:
            error_msg = api_response_settings.get("error", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞") if isinstance(api_response_settings, dict) else "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞"
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {COMPANY_ID} –∏–∑ API: {error_msg}")

        # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ---
        text = (
            "üá∞üá¨ <b>–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ –ë–∏—à–∫–µ–∫–µ</b>\n\n"
            f"üìç <b>–ê–¥—Ä–µ—Å:</b>\n{address}\n\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b>\n<code>{phone}</code> (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)"
        )

        # --- –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ ---
        keyboard = []
        if whatsapp_link: keyboard.append([InlineKeyboardButton("üí¨ WhatsApp", url=whatsapp_link)])
        if instagram_link: keyboard.append([InlineKeyboardButton("üì∏ Instagram", url=instagram_link)])
        if map_link: keyboard.append([InlineKeyboardButton("üó∫Ô∏è –ö–∞—Ä—Ç–∞", url=map_link)])

        # --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ---
        reply_markup_inline = InlineKeyboardMarkup(keyboard) if keyboard else None
        try: await context.bot.delete_message(chat_id=chat_id, message_id=processing_message.message_id)
        except Exception as del_err: logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ '–ó–∞–≥—Ä—É–∑–∫–∞...': {del_err}")
        await update.message.reply_html(text, reply_markup=reply_markup_inline)
        if reply_markup_inline: await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)
        logger.info(f"–ö–æ–Ω—Ç–∞–∫—Ç—ã –ë–∏—à–∫–µ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")

    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ bishkek_contacts –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {COMPANY_ID}: {e}", exc_info=True)
        try: await context.bot.delete_message(chat_id=chat_id, message_id=processing_message.message_id)
        except: pass
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.", reply_markup=markup)

# --- –§—É–Ω–∫—Ü–∏–∏-–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –í–ª–∞–¥–µ–ª—å—Ü–∞ (—Å await) ---
async def owner_all_orders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
     logger.info(f"–ó–∞–ø—Ä–æ—Å –í–ª–∞–¥–µ–ª—å—Ü–∞ '–í—Å–µ –ó–∞–∫–∞–∑—ã' –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {COMPANY_ID}")
     # TODO: –ó–∞–ø—Ä–æ—Å –∫ API GET /api/orders (–±–µ–∑ client_id, –Ω–æ —Å company_id)
     await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è '–í—Å–µ –ó–∞–∫–∞–∑—ã' (–í–ª–∞–¥–µ–ª–µ—Ü) –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.") # –ò—Å–ø–æ–ª—å–∑—É–µ–º await

async def owner_clients(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
     logger.info(f"–ó–∞–ø—Ä–æ—Å –í–ª–∞–¥–µ–ª—å—Ü–∞ '–ö–ª–∏–µ–Ω—Ç—ã' –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {COMPANY_ID}")
     # TODO: –ó–∞–ø—Ä–æ—Å –∫ API GET /api/clients (—Å company_id)
     await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è '–ö–ª–∏–µ–Ω—Ç—ã' (–í–ª–∞–¥–µ–ª–µ—Ü) –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.") # –ò—Å–ø–æ–ª—å–∑—É–µ–º await

async def owner_locations(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
     logger.info(f"–ó–∞–ø—Ä–æ—Å –í–ª–∞–¥–µ–ª—å—Ü–∞ '–§–∏–ª–∏–∞–ª—ã' –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {COMPANY_ID}")
     # TODO: –ó–∞–ø—Ä–æ—Å –∫ API GET /api/locations (—Å company_id)
     await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è '–§–∏–ª–∏–∞–ª—ã' (–í–ª–∞–¥–µ–ª–µ—Ü) –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.") # –ò—Å–ø–æ–ª—å–∑—É–µ–º await

async def owner_broadcast_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
     logger.info(f"–ó–∞–ø—Ä–æ—Å –í–ª–∞–¥–µ–ª—å—Ü–∞ '–°–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ' –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {COMPANY_ID}")
     # TODO: –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è '–°–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ' (–í–ª–∞–¥–µ–ª–µ—Ü) –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.") # –ò—Å–ø–æ–ª—å–∑—É–µ–º await

# --- –û–¢–ú–ï–ù–ê –î–ò–ê–õ–û–ì–ê ---
async def cancel_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –ª—é–±–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ ConversationHandler."""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–º–µ–Ω–∏–ª –¥–∏–∞–ª–æ–≥.")
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    is_owner = context.user_data.get('is_owner', False)
    markup = owner_main_menu_markup if is_owner else client_main_menu_markup

    message_text = "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."

    # –ï—Å–ª–∏ –æ—Ç–º–µ–Ω–∞ –ø—Ä–∏—à–ª–∞ –∏–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ (CallbackQuery)
    if update.callback_query:
        await update.callback_query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±—Ä–∞–≤ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await update.callback_query.edit_message_text(message_text, reply_markup=None)
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å (—Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–µ), –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ callback'–∞: {e}")
        # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=markup)
    else: # –ï—Å–ª–∏ –æ—Ç–º–µ–Ω–∞ –ø—Ä–∏—à–ª–∞ –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–û—Ç–º–µ–Ω–∞" –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /cancel
        await update.message.reply_text(message_text, reply_markup=markup)

    # –û—á–∏—â–∞–µ–º –í–°–ï –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–æ–≤ –∏–∑ user_data, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º
    keys_to_clear = ['chosen_location_id', 'track_code', 'comment', 'phone_to_register', 'available_locations']
    for key in keys_to_clear:
        context.user_data.pop(key, None)
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –¥—Ä—É–≥–∏—Ö –∫–ª—é—á–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –±—É–¥—É—â–∏—Ö –¥–∏–∞–ª–æ–≥–∞—Ö
    logger.debug(f"User data –æ—á–∏—â–µ–Ω –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
    return ConversationHandler.END

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---
def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    global BOT_TOKEN, COMPANY_ID, ADMIN_API_URL # –û–±—ä—è–≤–ª—è–µ–º, —á—Ç–æ –±—É–¥–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

    # --- –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ ---
    parser = argparse.ArgumentParser(description=f"Telegram Bot for Cargo CRM Company")
    parser.add_argument("--token", required=True, help="Telegram Bot Token")
    parser.add_argument("--company-id", required=True, type=int, help="Company ID this bot belongs to")
    parser.add_argument("--api-url", required=True, help="URL of the main Cargo CRM API (e.g., http://127.0.0.1:8000)")
    try:
        args = parser.parse_args()
        BOT_TOKEN = args.token
        COMPANY_ID = args.company_id
        ADMIN_API_URL = args.api_url.rstrip('/') # –£–±–∏—Ä–∞–µ–º —Å–ª—ç—à –≤ –∫–æ–Ω—Ü–µ URL
    except SystemExit:
         logger.critical("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã --token, --company-id, --api-url.")
         sys.exit(1) # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É
    # --- –ö–æ–Ω–µ—Ü –ø–∞—Ä—Å–∏–Ω–≥–∞ ---

    logger.info(f"--- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –ö–æ–º–ø–∞–Ω–∏–∏ ID: {COMPANY_ID} ---")
    logger.info(f"API URL: {ADMIN_API_URL}")

    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
    application = Application.builder().token(BOT_TOKEN).build()

    # --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ConversationHandler'–æ–≤ ---

    # –î–∏–∞–ª–æ–≥ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    registration_conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)], # –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∫–æ–º–∞–Ω–¥—ã /start
        states={
            ASK_PHONE: [MessageHandler(filters.CONTACT, handle_contact)], # –û–∂–∏–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_via_name)], # –û–∂–∏–¥–∞–µ–º –∏–º—è
        },
        fallbacks=[CommandHandler('cancel', cancel_dialog), MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel_dialog)],
        per_user=True, per_chat=True, name="registration", persistent=False,
    )

    # –î–∏–∞–ª–æ–≥ –î–æ–±–∞–≤–ª–µ–Ω–∏—è –ó–∞–∫–∞–∑–∞
    add_order_conv = ConversationHandler(
        # –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑"
        entry_points=[MessageHandler(filters.Regex('^‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑$'), add_order_start_conv)],
        states={
            CHOOSE_LOCATION: [CallbackQueryHandler(location_chosen, pattern='^loc_')], # –í—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞
            TRACK_CODE: [
                MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel_dialog), # –û—Ç–º–µ–Ω–∞
                MessageHandler(filters.TEXT & ~filters.COMMAND, received_track_code) # –í–≤–æ–¥ —Ç—Ä–µ–∫-–∫–æ–¥–∞
                ],
            COMMENT: [
                MessageHandler(filters.Regex('^‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å$'), skip_comment), # –ü—Ä–æ–ø—É—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel_dialog),       # –û—Ç–º–µ–Ω–∞
                MessageHandler(filters.TEXT & ~filters.COMMAND, received_comment) # –í–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            ],
        },
        fallbacks=[
             CommandHandler('cancel', cancel_dialog), # –ö–æ–º–∞–Ω–¥–∞ /cancel
             MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel_dialog), # –¢–µ–∫—Å—Ç "–û—Ç–º–µ–Ω–∞"
             CallbackQueryHandler(cancel_dialog, pattern='^cancel_add_order$') # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        ],
        per_user=True, per_chat=True, name="add_order", persistent=False,
    )

    # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ---
    # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤, –æ–Ω–∏ –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    application.add_handler(registration_conv)
    application.add_handler(add_order_conv)

    # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –í–°–ï–• –û–°–¢–ê–õ–¨–ù–´–• —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel –≤–Ω–µ –¥–∏–∞–ª–æ–≥–æ–≤
    application.add_handler(CommandHandler('cancel', cancel_dialog))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–ø—Ä–æ—Å...")
    application.run_polling()
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞: python bot_template.py ...
if __name__ == "__main__":
    main()
