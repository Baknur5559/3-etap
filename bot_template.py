#!/usr/bin/env python
# -*- coding: utf-8 -*-
# bot_template.py (–í–µ—Ä—Å–∏—è –¥–ª—è multi-location –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã)

import os
import httpx  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
import re     # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
from typing import Optional
from sqlalchemy.orm import Session
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    filters,
    ContextTypes
)
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, joinedload

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Location –∏ Setting ---
# –¢–µ–ø–µ—Ä—å –º—ã –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–º –Ω—É–∂–Ω—ã
from models import Client, Order, Location, Setting

# --- 1. –ù–ê–°–¢–†–û–ô–ö–ê ---
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

# URL —Ç–≤–æ–µ–≥–æ –≥–ª–∞–≤–Ω–æ–≥–æ API (main.py)
ADMIN_API_URL = os.getenv('ADMIN_API_URL')

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã
if not TELEGRAM_BOT_TOKEN or not DATABASE_URL or not ADMIN_API_URL:
    print("="*50)
    print("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: bot_template.py")
    print("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: TELEGRAM_BOT_TOKEN, DATABASE_URL –∏–ª–∏ ADMIN_API_URL.")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ .env —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.")
    print("="*50)
    exit()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
engine = create_engine(DATABASE_URL, pool_recycle=1800, pool_pre_ping=True)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# --- 2. –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–ú–µ–Ω—é) ---
main_menu_keyboard = [
    ["üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã"],
    ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", "üá®üá≥ –ê–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–æ–≤"],
    ["üá∞üá¨ –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã"]
]
main_menu_markup = ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True)

# --- 3. –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ (ConversationHandler) ---
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∞–≥–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
(
    # –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    ADD_ORDER_TRACK_CODE,
    ADD_ORDER_COMMENT,
    ADD_ORDER_LOCATION, # –ù–æ–≤—ã–π —à–∞–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª–∏–∞–ª–∞

    # –î–∏–∞–ª–æ–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    REGISTER_GET_NAME
) = range(4) # –¢–µ–ø–µ—Ä—å 4 —Å–æ—Å—Ç–æ—è–Ω–∏—è

# --- 4. –§—É–Ω–∫—Ü–∏–∏-–ø–æ–º–æ—â–Ω–∏–∫–∏ ---

def get_db() -> Session:
    """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    return SessionLocal()

def normalize_phone_number(phone_str: str) -> str:
    """–û—á–∏—â–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ '996...'."""
    if not phone_str:
        return ""
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    digits = re.sub(r'\D', '', phone_str)
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É 9-–∑–Ω–∞—á–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É (–±–µ–∑ 996 –∏–ª–∏ 0)
    if len(digits) == 12 and digits.startswith("996"): # 996555123456
        return digits[3:] # 555123456
    if len(digits) == 10 and digits.startswith("0"): # 0555123456
        return digits[1:] # 555123456
    if len(digits) == 9: # 555123456
        return digits
    
    # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å (–∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É)
    return digits

async def get_client_from_user_id(user_id: int, db: Session) -> Optional[Client]:
    """
    –ë—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ë–î –ø–æ –µ–≥–æ Telegram ID.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç Client –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    return db.query(Client).filter(Client.telegram_chat_id == str(user_id)).first()

# --- 5. –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫) ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[int]:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    db = get_db()
    try:
        # 1. –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ Telegram ID
        client = await get_client_from_user_id(user.id, db)
        
        if client:
            # 2. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º
            await update.message.reply_html(
                f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{client.full_name}</b>!\n\n"
                "–†–∞–¥ –≤–∞—Å —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
                reply_markup=main_menu_markup
            )
            return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
        else:
            # 3. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ—Å–∏–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            await update.message.reply_text(
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üåü\n\n"
                "–ß—Ç–æ–±—ã —è –º–æ–≥ –≤–∞—Å —É–∑–Ω–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ "
                "(—Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —É–∫–∞–∑—ã–≤–∞–ª–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏).",
                reply_markup=ReplyKeyboardRemove() # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
            # –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥, –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞ (—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∏–º–µ–Ω–∏)
            return None 
    finally:
        db.close()

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE, client: Client) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ –∫–ª–∏–µ–Ω—Ç–∞."""
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –õ–ö —á–µ—Ä–µ–∑ API
    lk_url = None
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º httpx –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
        async with httpx.AsyncClient() as http_client:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º POST, –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ main.py
            response = await http_client.post(f"{ADMIN_API_URL}/api/clients/{client.id}/generate_lk_link")
            if response.status_code == 200:
                lk_url = response.json().get("link")
            else:
                print(f"–û—à–∏–±–∫–∞ API (generate_lk_link): {response.text}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –õ–ö –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client.id}: {e}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    text = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"<b>‚ú® –§–ò–û:</b> {client.full_name}\n"
        f"<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</b> {client.phone}\n"
        f"<b>‚≠êÔ∏è –í–∞—à –∫–æ–¥:</b> {client.client_code_prefix or ''}{client.client_code_num or '–ù–ï –£–ö–ê–ó–ê–ù'}\n\n"
        f"<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –Ω–∞—à —Å–∫–ª–∞–¥.</i>"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞
    keyboard = []
    if lk_url:
        keyboard.append([InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç (–õ–ö)", url=lk_url)])

    await update.message.reply_html(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard) if keyboard else main_menu_markup
    )

async def my_orders(update: Update, context: ContextTypes.DEFAULT_TYPE, client: Client) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö (–Ω–µ "–í—ã–¥–∞–Ω") –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞."""
    db = get_db()
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –≤—Å–µ –µ–≥–æ –∑–∞–∫–∞–∑—ã
        client_with_orders = db.query(Client).options(
            joinedload(Client.orders)
        ).filter(Client.id == client.id).one()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        active_orders = [order for order in client_with_orders.orders if order.status != "–í—ã–¥–∞–Ω"]
        
        if not active_orders:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤. üöö", reply_markup=main_menu_markup)
            return

        message = "üì¶ <b>–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã:</b>\n\n"
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è, –Ω–æ–≤—ã–µ –≤–≤–µ—Ä—Ö—É)
        for order in sorted(active_orders, key=lambda o: o.created_at, reverse=True):
            message += f"<b>–¢—Ä–µ–∫:</b> <code>{order.track_code}</code>\n"
            message += f"<b>–°—Ç–∞—Ç—É—Å:</b> {order.status}\n"
            if order.comment:
                message += f"<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> {order.comment}\n"
            message += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            
        await update.message.reply_html(message, reply_markup=main_menu_markup)
    finally:
        db.close()

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§—É–Ω–∫—Ü–∏—è "–ê–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–æ–≤" ---
# –¢–µ–ø–µ—Ä—å –æ–Ω–∞ –±–µ—Ä–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î (—Ç–∞–±–ª–∏—Ü–∞ settings)
async def china_addresses(update: Update, context: ContextTypes.DEFAULT_TYPE, client: Client, db: Session) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞, –ø–æ–¥—Å—Ç–∞–≤–ª—è—è –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞."""
    try:
        # 1. –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞
        client_code = f"{client.client_code_prefix or ''}{client.client_code_num or '–í–ê–®_–ö–û–î'}"
        if client_code == '–í–ê–®_–ö–û–î':
             print(f"–í–Ω–∏–º–∞–Ω–∏–µ: –£ –∫–ª–∏–µ–Ω—Ç–∞ {client.full_name} (ID: {client.id}) –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ (prefix/num).")

        # 2. –ò—â–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–¥—Ä–µ—Å–∞ –≤ –ë–î (–¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞)
        address_setting = db.query(Setting).filter(
            Setting.company_id == client.company_id,
            Setting.key == 'china_warehouse_address' # –ö–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –≤–≤–æ–¥–∏—à—å –≤ –∞–¥–º–∏–Ω–∫–µ
        ).first()

        if not address_setting or not address_setting.value:
            # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞—è
            raise Exception("–ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (–ù–∞—Å—Ç—Ä–æ–π–∫–∏ -> –ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ).")

        # 3. –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —à–∞–±–ª–æ–Ω –∞–¥—Ä–µ—Å–∞
        # {{client_code}} –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–¥
        final_address_text = address_setting.value.replace("{{client_code}}", client_code)

        # 4. –ò—â–µ–º PDF-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        pdf_setting = db.query(Setting).filter(
            Setting.company_id == client.company_id,
            Setting.key == 'instruction_pdf_link' # –ö–ª—é—á –∏–∑ –∞–¥–º–∏–Ω–∫–∏
        ).first()

        # 5. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = (
            f"üá®üá≥ <b>–ê–¥—Ä–µ—Å –Ω–∞—à–µ–≥–æ —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ</b>\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å –¥–ª—è –≤—Å–µ—Ö –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫.\n"
            f"<i>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é, –≤–º–µ—Å—Ç–µ —Å –≤–∞—à–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º <b>{client_code}</b>!</i>\n\n"
            f"üëá –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–¥—Ä–µ—Å –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å:\n\n"
            f"<code>{final_address_text}</code>"
        )
        
        keyboard = []
        if pdf_setting and pdf_setting.value:
            keyboard.append([InlineKeyboardButton("üìÑ –°–∫–∞—á–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é (PDF)", url=pdf_setting.value)])
        
        await update.message.reply_html(text, reply_markup=InlineKeyboardMarkup(keyboard) if keyboard else main_menu_markup)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ china_addresses: {e}")
        await update.message.reply_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–∞.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ (–ü—Ä–µ—Ñ–∏–∫—Å/–ù–æ–º–µ—Ä –ö–æ–¥–∞) –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ (–ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞) –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.",
            reply_markup=main_menu_markup
        )

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§—É–Ω–∫—Ü–∏—è "–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã" ---
# –¢–µ–ø–µ—Ä—å –æ–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–æ–≤
async def bishkek_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE, client: Client, db: Session) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã. 
    –ï—Å–ª–∏ —Ñ–∏–ª–∏–∞–ª –æ–¥–∏–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ä–∞–∑—É. 
    –ï—Å–ª–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±–æ—Ä.
    """
    try:
        # 1. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∏–ª–∏–∞–ª—ã —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –ë–î
        locations = db.query(Location).filter(
            Location.company_id == client.company_id,
            # (–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä, –µ—Å–ª–∏ –Ω–µ –≤—Å–µ —Ñ–∏–ª–∏–∞–ª—ã –Ω–∞–¥–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å)
        ).order_by(Location.name).all() # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏

        if not locations:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Ñ–∏–ª–∏–∞–ª–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=main_menu_markup)
            return

        # 2. –ï—Å–ª–∏ —É –∫–æ–º–ø–∞–Ω–∏–∏ —Ç–æ–ª—å–∫–æ –û–î–ò–ù —Ñ–∏–ª–∏–∞–ª
        if len(locations) == 1:
            loc = locations[0]
            text = f"üá∞üá¨ <b>{loc.name}</b>\n\n"
            if loc.address:
                text += f"üìç <b>–ê–¥—Ä–µ—Å:</b> {loc.address}\n"
            if loc.phone:
                text += f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{loc.phone}</code>\n"
            
            keyboard = []
            if loc.whatsapp_link:
                keyboard.append([InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp", url=loc.whatsapp_link)])
            if loc.instagram_link:
                keyboard.append([InlineKeyboardButton("üì∏ –ù–∞—à Instagram", url=loc.instagram_link)])
            if loc.map_link:
                keyboard.append([InlineKeyboardButton("üó∫Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ", url=loc.map_link)])
            
            await update.message.reply_html(text, reply_markup=InlineKeyboardMarkup(keyboard) if keyboard else main_menu_markup)

        # 3. –ï—Å–ª–∏ —É –∫–æ–º–ø–∞–Ω–∏–∏ –ù–ï–°–ö–û–õ–¨–ö–û —Ñ–∏–ª–∏–∞–ª–æ–≤
        else:
            keyboard = []
            for loc in locations:
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å callback_data –≤–∏–¥–∞ "loc_contact_{ID_–§–ò–õ–ò–ê–õ–ê}"
                keyboard.append([InlineKeyboardButton(f"üìç {loc.name}", callback_data=f"loc_contact_{loc.id}")])
            
            await update.message.reply_text(
                "üá∞üá¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª, —á—å–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ bishkek_contacts: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.", reply_markup=main_menu_markup)

# --- 6. –§—É–Ω–∫—Ü–∏–∏-–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (Callbacks) –¥–ª—è –ò–Ω–ª–∞–π–Ω-–ö–Ω–æ–ø–æ–∫ ---

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ñ–∏–ª–∏–∞–ª–∞ ---
async def location_contact_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª–∏–∞–ª–∞ (loc_contact_ID).
    """
    query = update.callback_query
    await query.answer() # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ñ–∏–ª–∏–∞–ª–∞ –∏–∑ callback_data (–Ω–∞–ø—Ä–∏–º–µ—Ä, "loc_contact_123")
        location_id = int(query.data.split('_')[-1])
    except (ValueError, IndexError):
        await query.edit_message_text("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ñ–∏–ª–∏–∞–ª–∞.")
        return

    db = get_db()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –æ–Ω –∏–∑ —Ç–æ–π –∂–µ –∫–æ–º–ø–∞–Ω–∏–∏
        client = await get_client_from_user_id(query.from_user.id, db)
        if not client:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start")
            return
        
        # –ù–∞—Ö–æ–¥–∏–º —Ñ–∏–ª–∏–∞–ª –≤ –ë–î
        loc = db.query(Location).filter(
            Location.id == location_id,
            Location.company_id == client.company_id
        ).first()

        if not loc:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –§–∏–ª–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–∞–∫–æ–µ –∂–µ, –∫–∞–∫ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞)
        text = f"üá∞üá¨ <b>{loc.name}</b>\n\n"
        if loc.address:
            text += f"üìç <b>–ê–¥—Ä–µ—Å:</b> {loc.address}\n"
        if loc.phone:
            text += f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{loc.phone}</code>\n"
        
        keyboard = []
        if loc.whatsapp_link:
            keyboard.append([InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp", url=loc.whatsapp_link)])
        if loc.instagram_link:
            keyboard.append([InlineKeyboardButton("üì∏ –ù–∞—à Instagram", url=loc.instagram_link)])
        if loc.map_link:
            keyboard.append([InlineKeyboardButton("üó∫Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ", url=loc.map_link)])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ñ–∏–ª–∏–∞–ª–∞", callback_data="loc_contact_back")])

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è –∫–æ–Ω—Ç–∞–∫—Ç—ã
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ location_contact_callback: {e}")
        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await context.bot.send_message(query.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.")
        except Exception:
            pass
    finally:
        db.close()

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" ---
async def location_contact_back_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "–ù–∞–∑–∞–¥" (loc_contact_back).
    –ü—Ä–æ—Å—Ç–æ –∑–∞–Ω–æ–≤–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤.
    """
    query = update.callback_query
    await query.answer()
    
    db = get_db()
    try:
        client = await get_client_from_user_id(query.from_user.id, db)
        if not client:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start")
            return
        
        # –ó–∞–Ω–æ–≤–æ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤
        locations = db.query(Location).filter(Location.company_id == client.company_id).order_by(Location.name).all()
        if not locations or len(locations) <= 1:
             # –ï—Å–ª–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤ –≤–¥—Ä—É–≥ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∏–ª–∏ –æ—Å—Ç–∞–ª—Å—è –æ–¥–∏–Ω, –ø—Ä–æ—Å—Ç–æ –ø–∏—à–µ–º
             await query.edit_message_text("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤.", reply_markup=main_menu_markup)
             return

        keyboard = []
        for loc in locations:
            keyboard.append([InlineKeyboardButton(f"üìç {loc.name}", callback_data=f"loc_contact_{loc.id}")])
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞—è —Å–ø–∏—Å–æ–∫
        await query.edit_message_text(
            "üá∞üá¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª, —á—å–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ location_contact_back_callback: {e}")
    finally:
        db.close()


# --- 7. –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (ConversationHandler) ---

# –®–∞–≥ 1: –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑"
async def add_order_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–∏–ª–∏–∞–ª."""
    db = get_db()
    try:
        client = await get_client_from_user_id(update.effective_user.id, db)
        if not client:
             await update.message.reply_text("–û—à–∏–±–∫–∞: –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start", reply_markup=main_menu_markup)
             return ConversationHandler.END

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∏–ª–∏–∞–ª—ã –∫–æ–º–ø–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
        locations = db.query(Location).filter(Location.company_id == client.company_id).order_by(Location.name).all()

        if not locations:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –í –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.", reply_markup=main_menu_markup)
            return ConversationHandler.END
        
        if len(locations) == 1:
            # –ï—Å–ª–∏ —Ñ–∏–ª–∏–∞–ª –æ–¥–∏–Ω, –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º, –∞ —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            context.user_data['location_id'] = locations[0].id
            await update.message.reply_text(
                f"üì¶ –í–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ñ–∏–ª–∏–∞–ª: {locations[0].name}.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>—Ç—Ä–µ–∫-–∫–æ–¥</b> –≤–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞.",
                reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True),
                parse_mode='HTML'
            )
            return ADD_ORDER_TRACK_CODE # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ç—Ä–µ–∫-–∫–æ–¥–∞
        
        else:
            # –ï—Å–ª–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä
            keyboard = [[KeyboardButton(loc.name)] for loc in locations]
            keyboard.append([KeyboardButton("–û—Ç–º–µ–Ω–∞")])
            
            await update.message.reply_text(
                "üì¶ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–¥–µ—Ç –≤–∞—à –∑–∞–∫–∞–∑:",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤ –≤ user_data –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            context.user_data['locations_map'] = {loc.name: loc.id for loc in locations}
            return ADD_ORDER_LOCATION # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ñ–∏–ª–∏–∞–ª–∞

    finally:
        db.close()

# –®–∞–≥ 2 (–ï—Å–ª–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤ > 1): –ü–æ–ª—É—á–µ–Ω —Ñ–∏–ª–∏–∞–ª
async def add_order_received_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç ID."""
    location_name = update.message.text
    locations_map = context.user_data.get('locations_map')

    if not locations_map or location_name not in locations_map:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.",
            # (–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—â–µ —Ä–∞–∑, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        )
        return ADD_ORDER_LOCATION # –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —ç—Ç–æ–º –∂–µ —à–∞–≥–µ

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–∏–ª–∏–∞–ª–∞ –∏ —É–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É –∏–∑ user_data
    context.user_data['location_id'] = locations_map[location_name]
    del context.user_data['locations_map']

    await update.message.reply_text(
        f"–û—Ç–ª–∏—á–Ω–æ! –ó–∞–∫–∞–∑ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤: {location_name}.\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>—Ç—Ä–µ–∫-–∫–æ–¥</b>.",
        reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True),
        parse_mode='HTML'
    )
    return ADD_ORDER_TRACK_CODE # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É

# –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω —Ç—Ä–µ–∫-–∫–æ–¥
async def add_order_received_track_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–µ–∫-–∫–æ–¥ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."""
    track_code = update.message.text
    if not track_code or len(track_code) < 3:
        await update.message.reply_text(
            "–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ç—Ä–µ–∫-–∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç—Ä–µ–∫-–∫–æ–¥.",
            reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        )
        return ADD_ORDER_TRACK_CODE # –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ
        
    context.user_data['track_code'] = track_code
    
    keyboard = [
        [KeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")],
        [KeyboardButton("–û—Ç–º–µ–Ω–∞")]
    ]
    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫—Ä–∞—Å–Ω—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏') –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return ADD_ORDER_COMMENT # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É

# –®–∞–≥ 4 (–§–∏–Ω–∞–ª—å–Ω—ã–π): –ü–æ–ª—É—á–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
async def add_order_received_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–∫–∞–∑."""
    context.user_data['comment'] = update.message.text
    await save_order_from_bot(update, context) # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥

# –®–∞–≥ 4 (–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π): –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–æ–ø—É—â–µ–Ω
async def add_order_skip_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–∫–∞–∑."""
    context.user_data['comment'] = None
    await save_order_from_bot(update, context) # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ add_order_received_comment –∏ add_order_skip_comment)
async def save_order_from_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§–∏–Ω–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—é—â–∞—è –∑–∞–∫–∞–∑ –≤ –ë–î."""
    db = get_db()
    try:
        client = await get_client_from_user_id(update.effective_user.id, db)
        if not client:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start", reply_markup=main_menu_markup)
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ user_data
        track_code = context.user_data.get('track_code')
        comment = context.user_data.get('comment')
        location_id = context.user_data.get('location_id')
        company_id = client.company_id
        
        if not track_code or not location_id or not company_id:
             await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–Ω–µ –Ω–∞–π–¥–µ–Ω —Ç—Ä–µ–∫-–∫–æ–¥ –∏–ª–∏ —Ñ–∏–ª–∏–∞–ª). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_menu_markup)
             return

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç —Ç—Ä–µ–∫-–∫–æ–¥–∞ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ ---
        existing_order = db.query(Order).filter(
            Order.company_id == company_id,
            Order.track_code == track_code
        ).first()
        
        if existing_order:
            await update.message.reply_html(
                f"‚ùóÔ∏è <b>–û—à–∏–±–∫–∞!</b>\n\n"
                f"–ó–∞–∫–∞–∑ —Å —Ç—Ä–µ–∫-–∫–æ–¥–æ–º <code>{track_code}</code> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ.",
                reply_markup=main_menu_markup
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        new_order = Order(
            track_code=track_code,
            comment=comment,
            client_id=client.id,
            company_id=company_id,
            location_id=location_id,
            purchase_type="–î–æ—Å—Ç–∞–≤–∫–∞", # –ó–∞–∫–∞–∑—ã –∏–∑ –±–æ—Ç–∞ - –≤—Å–µ–≥–¥–∞ "–î–æ—Å—Ç–∞–≤–∫–∞"
            status="–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
        )
        db.add(new_order)
        db.commit()
        
        await update.message.reply_html(
            f"‚úÖ –ì–æ—Ç–æ–≤–æ! –í–∞—à –∑–∞–∫–∞–∑ —Å —Ç—Ä–µ–∫-–∫–æ–¥–æ–º <code>{track_code}</code> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.",
            reply_markup=main_menu_markup
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ save_order_from_bot: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.", reply_markup=main_menu_markup)
    finally:
        context.user_data.clear() # –û—á–∏—â–∞–µ–º user_data
        db.close()

# –û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞
async def cancel_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –ª—é–±–æ–π –¥–∏–∞–ª–æ–≥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_markup)
    context.user_data.clear()
    return ConversationHandler.END


# --- 8. –î–∏–∞–ª–æ–≥ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ---

# –®–∞–≥ 2 (–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è): –ü–æ–ª—É—á–µ–Ω–æ –∏–º—è
async def register_get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –§–ò–û –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."""
    full_name = update.message.text
    phone = context.user_data.get('phone_to_register')
    user = update.effective_user

    if not phone or not full_name:
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (–Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –∏–º—è). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /start –∏ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
            reply_markup=main_menu_markup
        )
        return ConversationHandler.END

    db = get_db()
    try:
        # --- –ó–ê–ü–†–û–° –ö API –î–õ–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ---
        # –ú—ã –ù–ï —Å–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–æ—Ç–µ, –º—ã –ø—Ä–æ—Å–∏–º API (main.py) –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å.
        # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ (client_code_num) –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ.
        
        payload = {
            "full_name": full_name,
            "phone": phone,
            # (API —Å–∞–º –Ω–∞–∑–Ω–∞—á–∏—Ç –ø—Ä–µ—Ñ–∏–∫—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        }
        
        new_client_data = None
        async with httpx.AsyncClient() as http_client:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç /api/clients (POST)
            response = await http_client.post(f"{ADMIN_API_URL}/api/clients", json=payload)
            
            if response.status_code == 200:
                new_client_data = response.json()
            elif response.status_code == 400: # –î—É–±–ª–∏–∫–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                error_data = response.json()
                raise Exception(error_data.get("detail", "–ö–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."))
            else: # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ API
                error_data = response.json()
                raise Exception(error_data.get("detail", f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API (–°—Ç–∞—Ç—É—Å {response.status_code})"))

        if not new_client_data or 'id' not in new_client_data:
            raise Exception("API –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.")

        # 2. –ù–∞—Ö–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ë–î, —á—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å Telegram ID
        client_to_update = db.query(Client).filter(Client.id == new_client_data['id']).first()
        if client_to_update:
            client_to_update.telegram_chat_id = str(user.id)
            db.commit()
            
            await update.message.reply_html(
                f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, <b>{full_name}</b>!\n\n"
                f"–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <b>{client_to_update.client_code_prefix}{client_to_update.client_code_num}</b>\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.",
                reply_markup=main_menu_markup
            )
        else:
             raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ë–î –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Telegram.")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ register_get_name: {e}")
        await update.message.reply_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=main_menu_markup
        )
    finally:
        context.user_data.clear()
        db.close()

    return ConversationHandler.END


# --- 9. –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[int]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏–ª–∏ —á–∞—Å—Ç—å—é –¥–∏–∞–ª–æ–≥–∞."""
    user = update.effective_user
    text = update.message.text
    db = get_db()

    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        client_already_linked = await get_client_from_user_id(user.id, db)
        
        if client_already_linked:
            # --- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≤—è–∑–∞–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é ---
            if text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
                await profile(update, context, client_already_linked)
            elif text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã":
                await my_orders(update, context, client_already_linked)
            elif text == "üá®üá≥ –ê–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–æ–≤":
                # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï ---
                await china_addresses(update, context, client_already_linked, db)
            elif text == "üá∞üá¨ –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã":
                # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï ---
                await bishkek_contacts(update, context, client_already_linked, db)
            else:
                # –û—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
                await update.message.reply_text(
                    "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
                    reply_markup=main_menu_markup
                )
            return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)

        # --- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –ø—Ä–∏–≤—è–∑–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ –Ω–∞–π—Ç–∏ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å ---
        
        # 2. –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        normalized_phone = normalize_phone_number(text)
        
        if not normalized_phone or len(normalized_phone) < 9:
            # –¢–µ–∫—Å—Ç –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0555123456 –∏–ª–∏ 996555123456)."
            )
            return None # –û—Å—Ç–∞–µ–º—Å—è –≤ –æ–∂–∏–¥–∞–Ω–∏–∏

        # 3. –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –æ—á–∏—â–µ–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
        client_found = db.query(Client).filter(Client.phone == normalized_phone).first()
        
        if client_found:
            # --- –ö–ª–∏–µ–Ω—Ç –ù–ê–ô–î–ï–ù ---
            if client_found.telegram_chat_id:
                # ... –Ω–æ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É Telegram
                await update.message.reply_text(
                    "–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É Telegram-–∞–∫–∫–∞—É–Ω—Ç—É. "
                    "–ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                return ConversationHandler.END
            
            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Telegram ID –∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
            client_found.telegram_chat_id = str(user.id)
            db.commit()
            
            await update.message.reply_html(
                f"üéâ –û—Ç–ª–∏—á–Ω–æ, <b>{client_found.full_name}</b>! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω.\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ üëá",
                reply_markup=main_menu_markup
            )
            return ConversationHandler.END
        
        else:
            # --- –ö–ª–∏–µ–Ω—Ç –ù–ï –ù–ê–ô–î–ï–ù ---
            # –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            context.user_data['phone_to_register'] = normalized_phone
            await update.message.reply_text(
                f"–ö–ª–∏–µ–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º {text} –Ω–µ –Ω–∞–π–¥–µ–Ω. –•–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û), —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –≤–∞—Å –∑–∞–ø–∏—Å–∞—Ç—å."
            )
            return REGISTER_GET_NAME # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_text_message: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start", reply_markup=main_menu_markup)
        return ConversationHandler.END
    finally:
        db.close()


# --- 10. –ó–∞–ø—É—Å–∫ –ë–æ—Ç–∞ ---

def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # --- –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ---
    add_order_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑$'), add_order_start)],
        states={
            ADD_ORDER_LOCATION: [
                MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel_dialog),
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_order_received_location)
            ],
            ADD_ORDER_TRACK_CODE: [
                MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel_dialog),
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_order_received_track_code)
            ],
            ADD_ORDER_COMMENT: [
                MessageHandler(filters.Regex('^‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å$'), add_order_skip_comment),
                MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel_dialog),
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_order_received_comment)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel_dialog), MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel_dialog)],
    )
    
    # --- –î–∏–∞–ª–æ–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ / –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ---
    registration_conv = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message)
        ],
        states={
            REGISTER_GET_NAME: [
                MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel_dialog),
                MessageHandler(filters.TEXT & ~filters.COMMAND, register_get_name)
            ],
        },
        fallbacks=[
            CommandHandler('cancel', cancel_dialog),
            MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel_dialog)
        ],
    )

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –°–ù–ê–ß–ê–õ–ê –¥–∏–∞–ª–æ–≥–∏ (–±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –∫–∞–∫ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑")
    application.add_handler(add_order_conv)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ü–û–¢–û–ú /start –∏ –æ–±—â–∏–π —Ç–µ–∫—Å—Ç (–º–µ–Ω–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ)
    application.add_handler(registration_conv)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ (–æ–Ω–∏ –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—Ç)
    application.add_handler(CallbackQueryHandler(location_contact_callback, pattern=r'^loc_contact_\d+$'))
    application.add_handler(CallbackQueryHandler(location_contact_back_callback, pattern=r'^loc_contact_back$'))

    print(f"–ë–æ—Ç {ADMIN_API_URL} –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
    application.run_polling()

if __name__ == "__main__":
    main()
