#!/usr/bin/env python
# -*- coding: utf-8 -*-
# bot_template.py (–í–µ—Ä—Å–∏—è 6.0 - –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ API + –§—É–Ω–∫—Ü–∏–∏ –í–ª–∞–¥–µ–ª—å—Ü–∞)

import os
import httpx # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
import re    # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
import sys  # –î–ª—è sys.exit()
import logging
import asyncio
import html # –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
from typing import Optional, Dict, Any, List
from dotenv import load_dotenv

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    filters,
    ContextTypes
)
from telegram.constants import ParseMode # –î–ª—è HTML –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ú–æ–¥–µ–ª–∏ –∏ –ë–î –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã –±–æ—Ç—É ---
# from models import Client, Order, Location, Setting
# from sqlalchemy import create_engine
# from sqlalchemy.orm import sessionmaker, joinedload

# --- –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø (–†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø) ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# --- 1. –ù–ê–°–¢–†–û–ô–ö–ê ---
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
# DATABASE_URL = os.getenv("DATABASE_URL") # <-- –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
ADMIN_API_URL = os.getenv('ADMIN_API_URL')

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è ID –∫–æ–º–ø–∞–Ω–∏–∏ ---
# –û–Ω–∏ –±—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ—É–Ω–∫—Ü–∏–µ–π identify_bot_company()
COMPANY_ID_FOR_BOT: int = 0
COMPANY_NAME_FOR_BOT: str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è"

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã
if not TELEGRAM_BOT_TOKEN or not ADMIN_API_URL: # <-- –£–±—Ä–∞–ª–∏ DATABASE_URL
    logger.critical("="*50)
    logger.critical("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: bot_template.py")
    logger.critical("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: TELEGRAM_BOT_TOKEN –∏–ª–∏ ADMIN_API_URL.")
    logger.critical("="*50)
    sys.exit(1)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ---
# engine = create_engine(DATABASE_URL, pool_recycle=1800, pool_pre_ping=True) # <-- –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
# SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine) # <-- –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω

# --- 2. –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–ú–µ–Ω—é) ---
client_main_menu_keyboard = [
    ["üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã"],
    ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", "üá®üá≥ –ê–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–æ–≤"],
    ["üá∞üá¨ –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã"]
]
client_main_menu_markup = ReplyKeyboardMarkup(client_main_menu_keyboard, resize_keyboard=True)

# --- –ù–û–í–ê–Ø –ö–õ–ê–í–ò–ê–¢–£–†–ê –í–õ–ê–î–ï–õ–¨–¶–ê ---
owner_main_menu_keyboard = [
    ["üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "üì¶ –í—Å–µ –ó–∞–∫–∞–∑—ã"], # <
    ["üë• –ö–ª–∏–µ–Ω—Ç—ã", "üè¢ –§–∏–ª–∏–∞–ª—ã"], # <
    ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", "üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ"], # <
    ["üá®üá≥ –ê–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–æ–≤", "üá∞üá¨ –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã"]
]
owner_main_menu_markup = ReplyKeyboardMarkup(owner_main_menu_keyboard, resize_keyboard=True)
# --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –ö–õ–ê–í–ò–ê–¢–£–†–´ ---

# --- 3. –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ (ConversationHandler) ---
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∞–≥–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
(
    # –î–∏–∞–ª–æ–≥ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    ASK_PHONE, GET_NAME,

    # –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    ADD_ORDER_LOCATION,
    ADD_ORDER_TRACK_CODE,
    ADD_ORDER_COMMENT,

    # --- –ù–û–í–´–ï –î–ò–ê–õ–û–ì–ò –í–õ–ê–î–ï–õ–¨–¶–ê ---
    OWNER_ASK_ORDER_SEARCH,
    OWNER_ASK_CLIENT_SEARCH,
    OWNER_ASK_BROADCAST_TEXT,
    OWNER_CONFIRM_BROADCAST

) = range(9) # –¢–µ–ø–µ—Ä—å 9 —Å–æ—Å—Ç–æ—è–Ω–∏–π

# --- 4. –§—É–Ω–∫—Ü–∏–∏-–ø–æ–º–æ—â–Ω–∏–∫–∏ ---

# def get_db() -> Session: # <-- –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
#     """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
#     return SessionLocal()

def normalize_phone_number(phone_str: str) -> str:
    """–û—á–∏—â–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —Ñ–æ—Ä–º–∞—Ç—É 996XXXXXXXXX."""
    # (–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤–∑—è—Ç–∞ –∏–∑ v5.0, –æ–Ω–∞ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞)
    if not phone_str: return "" 
    digits = "".join(filter(str.isdigit, phone_str))
    
    # 996555123456 (12 —Ü–∏—Ñ—Ä)
    if len(digits) == 12 and digits.startswith("996"):
        return digits 
    # 0555123456 (10 —Ü–∏—Ñ—Ä)
    if len(digits) == 10 and digits.startswith("0"):
        return "996" + digits[1:] 
    # 555123456 (9 —Ü–∏—Ñ—Ä)
    if len(digits) == 9:
        return "996" + digits 
        
    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä: {phone_str} -> {digits}")
    return "" # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω

# async def get_client_from_user_id(user_id: int, db: Session) -> Optional[Client]: # <-- –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
#     """..."""
#     return db.query(Client).filter(Client.telegram_chat_id == str(user_id)).first()

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø API REQUEST (–ò–∑ v5.0) ---
async def api_request(
    method: str, 
    endpoint: str, 
    employee_id: Optional[int] = None, 
    **kwargs
) -> Optional[Dict[str, Any]]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –±—ç–∫–µ–Ω–¥–∞.
    (–í–ï–†–°–ò–Ø 6.0 - —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π X-Employee-ID –∏ COMPANY_ID_FOR_BOT)
    """
    global ADMIN_API_URL, COMPANY_ID_FOR_BOT
    if not ADMIN_API_URL:
        logger.error("ADMIN_API_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å API –∑–∞–ø—Ä–æ—Å.")
        return {"error": "URL API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.", "status_code": 500}
    
    url = f"{ADMIN_API_URL}{endpoint}"
    
    params_dict = kwargs.pop('params', {}) 
    headers = kwargs.pop('headers', {'Content-Type': 'application/json'})

    # –î–æ–±–∞–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –í–ª–∞–¥–µ–ª—å—Ü–∞, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω ID
    if employee_id:
        headers['X-Employee-ID'] = str(employee_id)

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º COMPANY_ID_FOR_BOT ---
    if method.upper() == 'GET':
        if 'company_id' not in params_dict:
            params_dict['company_id'] = COMPANY_ID_FOR_BOT
        kwargs['params'] = params_dict

    elif method.upper() in ['POST', 'PATCH', 'PUT']:
        json_data = kwargs.get('json') 
        if json_data is not None: 
            if 'company_id' not in json_data:
                json_data['company_id'] = COMPANY_ID_FOR_BOT
            kwargs['json'] = json_data
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
    
    try:
        async with httpx.AsyncClient(timeout=15.0) as client: 
            logger.debug(f"API Request: {method} {url} | Headers: {headers} | Data/Params: {kwargs}")
            response = await client.request(method, url, headers=headers, **kwargs)
            logger.debug(f"API Response: {response.status_code} for {method} {url}")
            response.raise_for_status()

            if response.status_code == 204:
                return {"status": "ok"} 

            if response.content:
                try:
                    return response.json()
                except Exception as json_err:
                    logger.error(f"API Error: Failed to decode JSON from {url}. Status: {response.status_code}. Content: {response.text[:200]}...", exc_info=True)
                    return {"error": "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.", "status_code": 500}
            else:
                return {"status": "ok"}

    except httpx.HTTPStatusError as e:
        error_detail = f"–û—à–∏–±–∫–∞ API ({e.response.status_code})"
        try:
            error_data = e.response.json()
            error_detail = error_data.get("detail", str(error_data))
        except Exception:
            error_detail = e.response.text or str(e)
        logger.error(f"API Error ({e.response.status_code}) for {method} {url}: {error_detail}")
        return {"error": error_detail, "status_code": e.response.status_code}
    except httpx.RequestError as e:
        logger.error(f"Network Error for {method} {url}: {e}")
        return {"error": "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", "status_code": 503}
    except Exception as e:
        logger.error(f"Unexpected Error during API request to {url}: {e}", exc_info=True) 
        return {"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.", "status_code": 500}
# --- –ö–û–ù–ï–¶ API REQUEST ---


# --- –§—É–Ω–∫—Ü–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–æ—Ç–∞ (–û–°–¢–ê–ï–¢–°–Ø) ---
def identify_bot_company() -> None:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ.
    –û–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ API, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫ –∫–∞–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —ç—Ç–æ—Ç –±–æ—Ç.
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ COMPANY_ID_FOR_BOT –∏ COMPANY_NAME_FOR_BOT.
    """
    global COMPANY_ID_FOR_BOT, COMPANY_NAME_FOR_BOT
    
    print("[Startup] –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ API...")
    payload = {"token": TELEGRAM_BOT_TOKEN}
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –°–ò–ù–•–†–û–ù–ù–´–ô –∫–ª–∏–µ–Ω—Ç httpx, —Ç–∞–∫ –∫–∞–∫ main() - –Ω–µ async
        with httpx.Client(timeout=10.0) as client:
            response = client.post(f"{ADMIN_API_URL}/api/bot/identify_company", json=payload)
            response.raise_for_status() 
            
            data = response.json()
            COMPANY_ID_FOR_BOT = data.get("company_id")
            COMPANY_NAME_FOR_BOT = data.get("company_name", "–û—à–∏–±–∫–∞ –∏–º–µ–Ω–∏")

            if not COMPANY_ID_FOR_BOT:
                raise Exception("API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π ID –∫–æ–º–ø–∞–Ω–∏–∏.")
                
            print(f"[Startup] –£–°–ü–ï–•: –ë–æ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ '{COMPANY_NAME_FOR_BOT}' (ID: {COMPANY_ID_FOR_BOT})")

    except httpx.HTTPStatusError as e:
        print("="*50)
        print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ (–°—Ç–∞—Ç—É—Å: {e.response.status_code}).")
        try:
            print(f"–û—Ç–≤–µ—Ç API: {e.response.json().get('detail')}")
        except Exception:
            print(f"–û—Ç–≤–µ—Ç API (raw): {e.response.text}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–∫–µ–Ω —ç—Ç–æ–≥–æ –±–æ—Ç–∞ (TELEGRAM_BOT_TOKEN) –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω –≤ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (main.py) –¥–ª—è –Ω—É–∂–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.")
        print("="*50)
        sys.exit(1)
    
    except httpx.RequestError as e:
        print("="*50)
        print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API –ø–æ –∞–¥—Ä–µ—Å—É {ADMIN_API_URL}.")
        print(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API-—Å–µ—Ä–≤–µ—Ä (main.py) –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω.")
        print("="*50)
        sys.exit(1)
    
    except Exception as e:
        print("="*50)
        print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–æ—Ç–∞.")
        print(f"–û—à–∏–±–∫–∞: {e}")
        print("="*50)
        sys.exit(1)


# --- 5. –î–∏–∞–ª–æ–≥ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–ü–ò–°–ê–ù) ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Chat ID.
    –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω - –≤—Ö–æ–¥–∏—Ç.
    –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω.
    """
    user = update.effective_user
    chat_id = str(user.id) 
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç {user.full_name} (ID: {chat_id}) –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {COMPANY_ID_FOR_BOT}")

    api_response = await api_request(
        "POST",
        "/api/bot/identify_user", 
        json={"telegram_chat_id": chat_id, "company_id": COMPANY_ID_FOR_BOT} 
    )

    if api_response and "error" not in api_response:
        # --- –£–°–ü–ï–•: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ Chat ID ---
        client_data = api_response.get("client")
        is_owner = api_response.get("is_owner", False) 

        if not client_data or not client_data.get("id"):
             logger.error(f"–û—à–∏–±–∫–∞ API /identify_user: –ù–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞. –û—Ç–≤–µ—Ç: {api_response}")
             await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è.", reply_markup=ReplyKeyboardRemove())
             return ConversationHandler.END 

        # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ –≤ user_data ---
        context.user_data['client_id'] = client_data.get("id")
        context.user_data['is_owner'] = is_owner
        context.user_data['full_name'] = client_data.get("full_name")
        context.user_data['employee_id'] = api_response.get("employee_id") # <-- –í–ê–ñ–ù–û –î–õ–Ø –í–õ–ê–î–ï–õ–¨–¶–ê
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ ClientID: {client_data.get('id')}, IsOwner: {is_owner}, EID: {api_response.get('employee_id')}")

        markup = owner_main_menu_markup if is_owner else client_main_menu_markup
        role_text = " (–í–ª–∞–¥–µ–ª–µ—Ü)" if is_owner else ""
        await update.message.reply_html(
            f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{client_data.get('full_name')}</b>{role_text}!\n\n–†–∞–¥ –≤–∞—Å —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.",
            reply_markup=markup
        )
        return ConversationHandler.END

    elif api_response and api_response.get("status_code") == 404:
        # --- –û–®–ò–ë–ö–ê 404: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ Chat ID ---
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω.")
        await update.message.reply_text(
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üåü\n\n–ü–æ—Ö–æ–∂–µ, –º—ã –µ—â–µ –Ω–µ –∑–Ω–∞–∫–æ–º—ã –∏–ª–∏ –≤–∞—à Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω."
            "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ç–æ—Ç, —á—Ç–æ –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –∫–∞—Ä–≥–æ), –Ω–∞—á–∏–Ω–∞—è —Å 0 –∏–ª–∏ 996.",
            reply_markup=ReplyKeyboardRemove() 
        )
        return ASK_PHONE # <-- –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞

    else:
        # --- –î–†–£–ì–ê–Ø –û–®–ò–ë–ö–ê API ---
        error_msg = api_response.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.") if api_response else "–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ /api/bot/identify_user (Chat ID): {error_msg}")
        await update.message.reply_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö: {error_msg}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –Ω–∞–∂–∞–≤ /start.",
            reply_markup=ReplyKeyboardRemove() 
        )
        return ConversationHandler.END

async def handle_phone_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –í–í–ï–î–ï–ù–ù–û–ì–û –¢–ï–ö–°–¢–û–ú.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ API.
    –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω - –≤—Ö–æ–¥–∏—Ç.
    –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –§–ò–û –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    """
    user = update.effective_user
    chat_id = str(user.id)
    phone_number_text = update.message.text 
    normalized_phone = normalize_phone_number(phone_number_text)
    
    if not normalized_phone:
         await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä: {phone_number_text}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞—á–∏–Ω–∞—è —Å 0 –∏–ª–∏ 996).", reply_markup=ReplyKeyboardRemove())
         return ASK_PHONE 

    logger.info(f"–ü–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–∫—Å—Ç–æ–º –æ—Ç {user.full_name} (ID: {chat_id}): {phone_number_text} -> {normalized_phone}")

    api_response = await api_request(
        "POST",
        "/api/bot/identify_user", 
        json={"telegram_chat_id": chat_id, "phone_number": normalized_phone, "company_id": COMPANY_ID_FOR_BOT}
    )

    if api_response and "error" not in api_response:
        # --- –£–°–ü–ï–•: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ –¢–µ–ª–µ—Ñ–æ–Ω—É ---
        client_data = api_response.get("client")
        is_owner = api_response.get("is_owner", False)
        
        if not client_data or not client_data.get("id"):
             logger.error(f"–û—à–∏–±–∫–∞ API /identify_user (Phone): –ù–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞. –û—Ç–≤–µ—Ç: {api_response}")
             await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.", reply_markup=ReplyKeyboardRemove())
             return ConversationHandler.END

        # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ –≤ user_data ---
        context.user_data['client_id'] = client_data.get("id")
        context.user_data['is_owner'] = is_owner
        context.user_data['full_name'] = client_data.get("full_name")
        context.user_data['employee_id'] = api_response.get("employee_id") # <-- –í–ê–ñ–ù–û –î–õ–Ø –í–õ–ê–î–ï–õ–¨–¶–ê
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ ClientID: {client_data.get('id')}, IsOwner: {is_owner}, EID: {api_response.get('employee_id')}")

        markup = owner_main_menu_markup if is_owner else client_main_menu_markup
        role_text = " (–í–ª–∞–¥–µ–ª–µ—Ü)" if is_owner else ""
        await update.message.reply_html(
            f"üéâ –û—Ç–ª–∏—á–Ω–æ, <b>{client_data.get('full_name')}</b>{role_text}! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.",
            reply_markup=markup
        )
        return ConversationHandler.END

    elif api_response and api_response.get("status_code") == 404:
        # --- –û–®–ò–ë–ö–ê 404: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –¢–µ–ª–µ—Ñ–æ–Ω—É ---
        logger.info(f"–ö–ª–∏–µ–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º {normalized_phone} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        context.user_data['phone_to_register'] = normalized_phone
        
        await update.message.reply_html( 
            f"–ö–ª–∏–µ–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º <code>{normalized_phone}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω. –•–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ <b>–ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û)</b>.",
            reply_markup=ReplyKeyboardRemove() 
        )
        return GET_NAME # <-- –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏

    else:
        # --- –î–†–£–ì–ê–Ø –û–®–ò–ë–ö–ê API ---
        error_msg = api_response.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.") if api_response else "–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ /api/bot/identify_user (Phone): {error_msg}")
        await update.message.reply_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–º–µ—Ä–∞: {error_msg}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –Ω–∞–∂–∞–≤ /start.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

async def register_get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    (–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –∏–∑ register_via_name)
    –ü–æ–ª—É—á–∞–µ—Ç –§–ò–û –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –ü–£–ë–õ–ò–ß–ù–´–ô API —ç–Ω–¥–ø–æ–∏–Ω—Ç.
    """
    full_name = update.message.text
    phone_to_register = context.user_data.get('phone_to_register')
    user = update.effective_user
    chat_id = str(user.id)

    if not phone_to_register:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è {chat_id}: –ù–µ –Ω–∞–π–¥–µ–Ω phone_to_register –≤ user_data.")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ —Å /start.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    if not full_name or len(full_name) < 2:
         await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û).")
         return GET_NAME 

    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: –ò–º—è='{full_name}', –¢–µ–ª–µ—Ñ–æ–Ω='{phone_to_register}', –ö–æ–º–ø–∞–Ω–∏—è={COMPANY_ID_FOR_BOT}, ChatID={chat_id}")
    
    payload = {
        "full_name": full_name,
        "phone": phone_to_register,
        "company_id": COMPANY_ID_FOR_BOT, # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º ID, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        "telegram_chat_id": chat_id   # <-- –°—Ä–∞–∑—É –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Telegram
    }
    
    # --- –í—ã–∑–æ–≤ API –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ---
    api_response = await api_request("POST", "/api/bot/register_client", json=payload)

    if api_response and "error" not in api_response and "id" in api_response:
        # --- –£–°–ü–ï–•: –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω ---
        client_data = api_response 
        
        # --- –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ user_data ---
        context.user_data['client_id'] = client_data.get("id")
        context.user_data['is_owner'] = False # –ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –í–ª–∞–¥–µ–ª—å—Ü–∞–º–∏
        context.user_data['full_name'] = client_data.get("full_name")
        context.user_data['employee_id'] = None
        context.user_data.pop('phone_to_register', None)
        logger.info(f"–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ID={client_data.get('id')}")

        client_code = f"{client_data.get('client_code_prefix', 'TG')}{client_data.get('client_code_num', '?')}"
        
        await update.message.reply_html(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, <b>{full_name}</b>!\n\n"
            f"–í–∞—à –∫–æ–¥: <b>{client_code}</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.",
            reply_markup=client_main_menu_markup # –ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞—é—Ç –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞
        )
        return ConversationHandler.END
    else:
        # --- –û–®–ò–ë–ö–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ---
        error_msg = api_response.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.") if api_response else "–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ POST /api/bot/register_client: {error_msg}")
        await update.message.reply_text(
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {error_msg}\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start —Å–Ω–æ–≤–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

# --- 6. –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–ü–ï–†–ï–ü–ò–°–ê–ù –ù–ê API) ---

async def add_order_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–∏–ª–∏–∞–ª (—á–µ—Ä–µ–∑ API)."""
    client_id = context.user_data.get('client_id')
    if not client_id:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ /start.")
        return ConversationHandler.END 

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {client_id} –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {COMPANY_ID_FOR_BOT}.")

    # --- –ó–∞–ø—Ä–æ—Å –∫ API ---
    api_response = await api_request("GET", "/api/locations", params={'company_id': COMPANY_ID_FOR_BOT})

    if not api_response or "error" in api_response or not isinstance(api_response, list) or not api_response:
        error_msg = api_response.get("error", "–§–∏–ª–∏–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.") if api_response else "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞."
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤ –¥–ª—è company_id={COMPANY_ID_FOR_BOT}: {error_msg}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {error_msg}")
        return ConversationHandler.END 

    locations = api_response 
    context.user_data['available_locations'] = {loc['id']: loc['name'] for loc in locations}

    if len(locations) == 1:
        # --- –ï—Å–ª–∏ —Ñ–∏–ª–∏–∞–ª –æ–¥–∏–Ω ---
        loc = locations[0]
        context.user_data['location_id'] = loc['id']
        logger.info(f"–ù–∞–π–¥–µ–Ω 1 —Ñ–∏–ª–∏–∞–ª, –≤—ã–±—Ä–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {loc['name']}")
        await update.message.reply_text(
            f"üì¶ –í–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ñ–∏–ª–∏–∞–ª: {loc['name']}.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>—Ç—Ä–µ–∫-–∫–æ–¥</b> –≤–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞.",
            reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True),
            parse_mode=ParseMode.HTML
        )
        return ADD_ORDER_TRACK_CODE
    else:
        # --- –ï—Å–ª–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ ---
        keyboard = [
            [InlineKeyboardButton(loc['name'], callback_data=f"loc_{loc['id']}") for loc in locations[i:i+2]]
            for i in range(0, len(locations), 2)
        ]
        keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_add_order")])
        
        await update.message.reply_text(
            "–®–∞–≥ 1/3: –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∑–∞–∫–∞–∑:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ADD_ORDER_LOCATION

async def add_order_received_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª–∏–∞–ª–∞ (–Ω–∞–∂–∞—Ç–∏–µ Inline –∫–Ω–æ–ø–∫–∏)."""
    query = update.callback_query 
    await query.answer() 
    location_id_str = query.data.split('_')[1]

    try:
        chosen_location_id = int(location_id_str) 
        available_locations = context.user_data.get('available_locations', {})
        if chosen_location_id not in available_locations:
             logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤—ã–±—Ä–∞–ª –Ω–µ–≤–µ—Ä–Ω—ã–π location_id: {chosen_location_id}")
             await query.edit_message_text(text="–û—à–∏–±–∫–∞: –í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–∏–ª–∏–∞–ª.")
             return ConversationHandler.END 

        context.user_data['location_id'] = chosen_location_id
        location_name = available_locations.get(chosen_location_id, f"ID {chosen_location_id}")

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤—ã–±—Ä–∞–ª —Ñ–∏–ª–∏–∞–ª {location_name} (ID: {chosen_location_id})")

        await query.edit_message_text(text=f"–§–∏–ª–∏–∞–ª '{location_name}' –≤—ã–±—Ä–∞–Ω.")
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–®–∞–≥ 2/3: –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫-–∫–æ–¥ –∑–∞–∫–∞–∑–∞:",
            reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True, one_time_keyboard=True)
        )
        return ADD_ORDER_TRACK_CODE
    except (ValueError, IndexError, KeyError) as e: 
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª–∏–∞–ª–∞: {e}. Callback data: {query.data}", exc_info=True)
        await query.edit_message_text(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∏–ª–∏–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END 

async def add_order_received_track_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω —Ç—Ä–µ–∫-–∫–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    track_code = update.message.text.strip() 
    if not track_code or len(track_code) < 3: 
        await update.message.reply_text("–¢—Ä–µ–∫-–∫–æ–¥ –∫–∞–∂–µ—Ç—Å—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑:")
        return ADD_ORDER_TRACK_CODE 

    context.user_data['track_code'] = track_code
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤–≤–µ–ª —Ç—Ä–µ–∫-–∫–æ–¥: {track_code}")

    keyboard = [["‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"], ["–û—Ç–º–µ–Ω–∞"]]
    await update.message.reply_text(
        "–®–∞–≥ 3/3: –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫—Ä–∞—Å–Ω—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏') –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return ADD_ORDER_COMMENT

async def add_order_received_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    comment = update.message.text 
    context.user_data['comment'] = comment 
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤–≤–µ–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
    return await save_order_from_bot(update, context)

async def add_order_skip_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –Ω–∞ —à–∞–≥–µ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è."""
    context.user_data['comment'] = None 
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≤–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.")
    return await save_order_from_bot(update, context)

async def save_order_from_bot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ API."""
    client_id = context.user_data.get('client_id')
    location_id = context.user_data.get('location_id')
    track_code = context.user_data.get('track_code')
    comment = context.user_data.get('comment') 
    is_owner = context.user_data.get('is_owner', False)
    markup = owner_main_menu_markup if is_owner else client_main_menu_markup

    if not all([client_id, location_id, track_code]):
         await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ —Å–Ω–æ–≤–∞.", reply_markup=markup)
         logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö. client={client_id}, loc={location_id}, track={track_code}")
         # –û—á–∏—Å—Ç–∫–∞
         context.user_data.pop('location_id', None)
         context.user_data.pop('track_code', None)
         context.user_data.pop('comment', None)
         context.user_data.pop('available_locations', None)
         return ConversationHandler.END 

    payload = {
        "client_id": client_id,
        "location_id": location_id, 
        "track_code": track_code,
        "comment": comment, 
        "purchase_type": "–î–æ—Å—Ç–∞–≤–∫–∞", 
        "company_id": COMPANY_ID_FOR_BOT # <--- –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π ID
    }
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞: {payload}")
    
    # --- –í—ã–∑–æ–≤ API ---
    api_response = await api_request("POST", "/api/orders", json=payload)

    if api_response and "error" not in api_response and "id" in api_response:
        logger.info(f"–ó–∞–∫–∞–∑ ID {api_response.get('id')} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")
        await update.message.reply_html(
            f"‚úÖ –ì–æ—Ç–æ–≤–æ! –í–∞—à –∑–∞–∫–∞–∑ —Å —Ç—Ä–µ–∫-–∫–æ–¥–æ–º <code>{track_code}</code> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.",
            reply_markup=markup 
        )
    else:
        error_msg = api_response.get("error", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑.") if api_response else "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞."
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}: {error_msg}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {error_msg}", reply_markup=markup)

    # –û—á–∏—Å—Ç–∫–∞
    context.user_data.pop('location_id', None)
    context.user_data.pop('track_code', None)
    context.user_data.pop('comment', None)
    context.user_data.pop('available_locations', None)
    return ConversationHandler.END


# --- 7. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ú–ê–†–®–†–£–¢–ò–ó–ê–¢–û–†) ---

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é).
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è, –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω (–ø—Ä–æ—à–µ–ª /start).
    """
    user = update.effective_user
    text = update.message.text
    client_id = context.user_data.get('client_id')
    is_owner = context.user_data.get('is_owner', False)
    chat_id = update.effective_chat.id

    if not client_id:
        logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ '{text}' –æ—Ç –Ω–µ–∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}.")
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å. –ù–∞–∂–º–∏—Ç–µ /start.", reply_markup=ReplyKeyboardRemove())
        return

    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –æ—Ç {user.full_name} (ClientID: {client_id}, IsOwner: {is_owner}): '{text}'")
    markup = owner_main_menu_markup if is_owner else client_main_menu_markup

    # --- –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã ---
    if text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        await profile(update, context)
    elif text == "üá®üá≥ –ê–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–æ–≤":
        await china_addresses(update, context)
    elif text == "üá∞üá¨ –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã":
        await bishkek_contacts(update, context)
    
    # --- –ö–æ–º–∞–Ω–¥—ã –ö–ª–∏–µ–Ω—Ç–∞ ---
    elif text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã" and not is_owner: 
        await my_orders(update, context)

    # --- –ö–æ–º–∞–Ω–¥—ã –í–ª–∞–¥–µ–ª—å—Ü–∞ ---
    elif is_owner:
        # (–ö–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑" –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –¥–∏–∞–ª–æ–≥–æ–º)
        if text == "üì¶ –í—Å–µ –ó–∞–∫–∞–∑—ã":
            await owner_all_orders(update, context)
        elif text == "üë• –ö–ª–∏–µ–Ω—Ç—ã":
            await owner_clients(update, context)
        elif text == "üè¢ –§–∏–ª–∏–∞–ª—ã":
            await owner_locations(update, context)
        elif text == "üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ":
            await owner_broadcast_start(update, context)
        else:
             logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –í–ª–∞–¥–µ–ª—å—Ü–∞: '{text}' –æ—Ç {client_id}")
             await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", reply_markup=markup)
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ö–ª–∏–µ–Ω—Ç–∞: '{text}' –æ—Ç {client_id}")
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", reply_markup=markup)


# --- 8. –§—É–Ω–∫—Ü–∏–∏ –º–µ–Ω—é (–ü–ï–†–ï–ü–ò–°–ê–ù–´ –ù–ê API) ---

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ (–∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞), –∑–∞–ø—Ä–∞—à–∏–≤–∞—è –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API."""
    client_id = context.user_data.get('client_id')
    is_owner = context.user_data.get('is_owner', False)
    markup = owner_main_menu_markup if is_owner else client_main_menu_markup

    if not client_id:
         await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.", reply_markup=markup)
         return

    logger.info(f"–ó–∞–ø—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")
    api_response_client = await api_request("GET", f"/api/clients/{client_id}", params={'company_id': COMPANY_ID_FOR_BOT})

    if not api_response_client or "error" in api_response_client:
        error_msg = api_response_client.get("error", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.") if api_response_client else "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞."
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: {error_msg}")
        return 

    client = api_response_client 
    role_text = " (–í–ª–∞–¥–µ–ª–µ—Ü)" if is_owner else ""
    text = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>{role_text}\n\n"
        f"<b>‚ú® –§–ò–û:</b> {client.get('full_name', '?')}\n"
        f"<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</b> {client.get('phone', '?')}\n"
        f"<b>‚≠êÔ∏è –í–∞—à –∫–æ–¥:</b> {client.get('client_code_prefix', '')}{client.get('client_code_num', '–ù–µ—Ç –∫–æ–¥–∞')}\n"
        f"<b>üìä –°—Ç–∞—Ç—É—Å:</b> {client.get('status', '–†–æ–∑–Ω–∏—Ü–∞')}\n"
    )
    await update.message.reply_html(text, reply_markup=markup) 

    logger.info(f"–ó–∞–ø—Ä–æ—Å —Å—Å—ã–ª–∫–∏ –õ–ö –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")
    # (–í main.py /generate_lk_link —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –í–ª–∞–¥–µ–ª—å—Ü–∞, 
    # —ç—Ç–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤ main.py, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –µ–µ –≤—ã–∑—ã–≤–∞—Ç—å,
    # –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è –Ω–µ–µ –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç /api/bot/generate_lk)
    #
    # –ü–û–ö–ê –ú–´ –ò–°–ü–û–õ–¨–ó–£–ï–ú API v5.0, –≥–¥–µ /generate_lk_link –ü–£–ë–õ–ò–ß–ù–´–ô
    # –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç client_id.
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: /generate_lk_link - —ç—Ç–æ POST ---
    api_response_link = await api_request("POST", f"/api/clients/{client_id}/generate_lk_link", json={'company_id': COMPANY_ID_FOR_BOT})
    lk_url = None
    if api_response_link and "error" not in api_response_link:
        lk_url = api_response_link.get("link")
    else:
        error_msg_link = api_response_link.get("error", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞") if api_response_link else "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –õ–ö –¥–ª—è {client_id}: {error_msg_link}")

    if lk_url:
        keyboard = [[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç", url=lk_url)]]
        await update.message.reply_text("–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç:", reply_markup=InlineKeyboardMarkup(keyboard))


async def my_orders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –û–ë–´–ß–ù–û–ì–û –ö–õ–ò–ï–ù–¢–ê —á–µ—Ä–µ–∑ API."""
    client_id = context.user_data.get('client_id')
    markup = client_main_menu_markup # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤

    logger.info(f"–ó–∞–ø—Ä–æ—Å '–ú–æ–∏ –∑–∞–∫–∞–∑—ã' –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")
    
    # –°—Ç–∞—Ç—É—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è "–∞–∫—Ç–∏–≤–Ω—ã–º–∏"
    active_statuses = ["–í –æ–±—Ä–∞–±–æ—Ç–∫–µ", "–û–∂–∏–¥–∞–µ—Ç –≤—ã–∫—É–ø–∞", "–í—ã–∫—É–ø–ª–µ–Ω", "–ù–∞ —Å–∫–ª–∞–¥–µ –≤ –ö–∏—Ç–∞–µ", "–í –ø—É—Ç–∏", "–ù–∞ —Å–∫–ª–∞–¥–µ –≤ –ö–†", "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ"]
    
    params = {
        'client_id': client_id,
        'statuses': active_statuses,
        'company_id': COMPANY_ID_FOR_BOT
    }
    api_response = await api_request("GET", "/api/orders", params=params)

    if not api_response or "error" in api_response or not isinstance(api_response, list):
        error_msg = api_response.get("error", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã.") if api_response else "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞."
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {error_msg}")
        return

    active_orders = api_response 
    if not active_orders:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤. üöö", reply_markup=markup)
        return

    message = "üì¶ <b>–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã:</b>\n\n"
    for order in sorted(active_orders, key=lambda o: o.get('id', 0), reverse=True):
        message += f"<b>–¢—Ä–µ–∫:</b> <code>{order.get('track_code', '?')}</code>\n"
        message += f"<b>–°—Ç–∞—Ç—É—Å:</b> {order.get('status', '?')}\n"
        comment = order.get('comment')
        if comment:
            message += f"<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> {html.escape(comment)}\n"
        
        # –ü–æ–∫–∞–∑ —Ä–∞—Å—á–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        calc_weight = order.get('calculated_weight_kg')
        calc_cost = order.get('calculated_final_cost_som')
        if calc_weight is not None and calc_cost is not None:
            message += f"<b>–†–∞—Å—á–µ—Ç:</b> {calc_weight:.3f} –∫–≥ / {calc_cost:.0f} —Å–æ–º\n"
            
        message += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

    if len(message) > 4000:
         message = message[:4000] + "\n... (—Å–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π)"

    await update.message.reply_html(message, reply_markup=markup)


async def china_addresses(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ, (—á–µ—Ä–µ–∑ API)."""
    client_id = context.user_data.get('client_id')
    is_owner = context.user_data.get('is_owner', False)
    markup = owner_main_menu_markup if is_owner else client_main_menu_markup

    logger.info(f"–ó–∞–ø—Ä–æ—Å –∞–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–∞ –ö–∏—Ç–∞—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")
    
    client_unique_code = "–í–ê–®_–ö–û–î"
    address_text_template = "–ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ."
    instruction_link = None 

    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞
        api_client = await api_request("GET", f"/api/clients/{client_id}", params={})
        if api_client and "error" not in api_client:
            client_code_num = api_client.get('client_code_num')
            client_code_prefix = api_client.get('client_code_prefix', 'PREFIX')
            if client_code_num:
                client_unique_code = f"{client_code_prefix}-{client_code_num}"
        else:
             logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –¥–ª—è –∫–æ–¥–∞.")

        # 2. –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥—Ä–µ—Å–∞ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        keys_to_fetch = ['china_warehouse_address', 'address_instruction_pdf_link'] 
        api_settings = await api_request("GET", "/api/settings", params={'keys': keys_to_fetch})

        if api_settings and "error" not in api_settings and isinstance(api_settings, list):
            settings_dict = {s.get('key'): s.get('value') for s in api_settings}
            
            address_value = settings_dict.get('china_warehouse_address')
            if address_value:
                address_text_template = address_value
            instruction_link = settings_dict.get('address_instruction_pdf_link')
        
        # 3. –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        final_address = address_text_template.replace("{{client_code}}", client_unique_code).replace("{client_code}", client_unique_code)

        text = (
            f"üá®üá≥ <b>–ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ</b>\n\n"
            f"‚ùóÔ∏è –í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥: <pre>{client_unique_code}</pre>\n" 
            f"<i>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –µ–≥–æ –ü–û–õ–ù–û–°–¢–¨–Æ!</i>\n\n"
            f"üëá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–¥—Ä–µ—Å –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å:\n\n"
            f"<code>{final_address}</code>" 
        )

        inline_keyboard = []
        if instruction_link:
            inline_keyboard.append([InlineKeyboardButton("üìÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é", url=instruction_link)])
        
        reply_markup_inline = InlineKeyboardMarkup(inline_keyboard) if inline_keyboard else None
        
        await update.message.reply_html(text, reply_markup=reply_markup_inline)
        if reply_markup_inline:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ china_addresses (API): {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–∞.", reply_markup=markup)


async def bishkek_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ñ–∏—Å–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞—è —Ñ–∏–ª–∏–∞–ª—ã (—á–µ—Ä–µ–∑ API)."""
    is_owner = context.user_data.get('is_owner', False)
    markup = owner_main_menu_markup if is_owner else client_main_menu_markup

    logger.info(f"–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (–≤—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞) –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {COMPANY_ID_FOR_BOT}")

    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤ (Locations)
        api_locations = await api_request("GET", "/api/locations", params={})
        if not api_locations or "error" in api_locations or not isinstance(api_locations, list) or not api_locations:
             error_msg = api_locations.get("error", "–§–∏–ª–∏–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã") if isinstance(api_locations, dict) else "–§–∏–ª–∏–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
             await update.message.reply_text(f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤. {error_msg}")
             return

        locations = api_locations

        # 2. –ü–æ–ª—É—á–∞–µ–º –û–ë–©–ò–ï –∫–æ–Ω—Ç–∞–∫—Ç—ã (WhatsApp/Instagram)
        keys_to_fetch = ['whatsapp_link', 'instagram_link', 'map_link']
        api_settings = await api_request("GET", "/api/settings", params={'keys': keys_to_fetch})
        
        settings_dict = {}
        if api_settings and "error" not in api_settings and isinstance(api_settings, list):
            settings_dict = {s.get('key'): s.get('value') for s in api_settings}

        # 3. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        keyboard = []
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
        for loc in locations:
            keyboard.append([InlineKeyboardButton(f"üìç {loc.get('name', '–§–∏–ª–∏–∞–ª')}", callback_data=f"contact_loc_{loc.get('id')}")])

        # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
        if settings_dict.get('whatsapp_link'): 
            keyboard.append([InlineKeyboardButton("üí¨ WhatsApp", url=settings_dict.get('whatsapp_link'))])
        if settings_dict.get('instagram_link'): 
            keyboard.append([InlineKeyboardButton("üì∏ Instagram", url=settings_dict.get('instagram_link'))])
        if settings_dict.get('map_link'): 
            keyboard.append([InlineKeyboardButton("üó∫Ô∏è –û–±—â–∞—è –ö–∞—Ä—Ç–∞", url=settings_dict.get('map_link'))])

        reply_markup_inline = InlineKeyboardMarkup(keyboard) if keyboard else None
        
        await update.message.reply_text(
            "üá∞üá¨ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –æ–±—â–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏:", 
            reply_markup=reply_markup_inline
        )
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ bishkek_contacts: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.", reply_markup=markup)

# --- 9. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ (–ü–ï–†–ï–ü–ò–°–ê–ù–´ –ù–ê API) ---
async def location_contact_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    (–ò–°–ü–†–ê–í–õ–ï–ù–û) –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥—Ä–µ—Å –∏ –ò–ù–õ–ê–ô–ù-–ö–ù–û–ü–ö–ò –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞.
    """
    query = update.callback_query
    await query.answer()
    
    chat_id = update.effective_chat.id
    is_owner = context.user_data.get('is_owner', False)
    markup = owner_main_menu_markup if is_owner else client_main_menu_markup

    try:
        location_id_str = query.data.split('_')[-1] # 'contact_loc_1' -> '1'
        location_id = int(location_id_str)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç—ã —Ñ–∏–ª–∏–∞–ª–∞ ID: {location_id}")

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¢–û–õ–¨–ö–û –≠–¢–û–ì–û —Ñ–∏–ª–∏–∞–ª–∞
        api_response = await api_request("GET", f"/api/locations/{location_id}", params={})

        if not api_response or "error" in api_response or not api_response.get('id'):
            error_msg = api_response.get("error", "–§–∏–ª–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.") if api_response else "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"
            logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ñ–∏–ª–∏–∞–ª–∞ {location_id}: {error_msg}")
            await query.edit_message_text(f"–û—à–∏–±–∫–∞: {error_msg}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é, —Ç–∞–∫ –∫–∞–∫ –∏–Ω–ª–∞–π–Ω-—Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–æ–º–∞–Ω–æ
            await context.bot.send_message(chat_id=chat_id, text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)
            return

        location = api_response
        
        # --- –§–û–†–ú–ò–†–£–ï–ú –¢–ï–ö–°–¢ ---
        text = (
            f"üìç <b>{location.get('name', '–§–∏–ª–∏–∞–ª')}</b>\n\n"
        )
        if location.get('address'):
             text += f"üó∫Ô∏è <b>–ê–¥—Ä–µ—Å:</b>\n{location.get('address')}\n\n"
        if location.get('phone'):
             text += f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{location.get('phone')}</code>\n"

        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ ---
        keyboard = []
        if location.get('whatsapp_link'):
            keyboard.append([InlineKeyboardButton("üí¨ WhatsApp", url=location.get('whatsapp_link'))])
        if location.get('instagram_link'):
            keyboard.append([InlineKeyboardButton("üì∏ Instagram", url=location.get('instagram_link'))])
        if location.get('map_link'):
            keyboard.append([InlineKeyboardButton("üó∫Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ", url=location.get('map_link'))])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥", –µ—Å–ª–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤ –±—ã–ª–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ
        # (–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å client_id, —É –Ω–µ–≥–æ –µ—Å—Ç—å –∏ user_data)
        if context.user_data.get('client_id'):
             keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data="contact_list_back")])

        reply_markup_inline = InlineKeyboardMarkup(keyboard) if keyboard else None
        # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è –∞–¥—Ä–µ—Å –ò –ö–ù–û–ü–ö–ò
        await query.edit_message_text(
            text, 
            parse_mode=ParseMode.HTML, 
            reply_markup=reply_markup_inline # <-- –ò–°–ü–û–õ–¨–ó–£–ï–ú –ö–ù–û–ü–ö–ò
        )
        
        # (–ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é" –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)

    except (ValueError, IndexError, KeyError, TypeError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback'–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}. Callback data: {query.data}", exc_info=True)
        try:
            await query.edit_message_text(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞–∂–∞—Ç—å 'üá∞üá¨ –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã'.")
        except:
            pass # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        await context.bot.send_message(chat_id=chat_id, text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)

# (–§—É–Ω–∫—Ü–∏—è location_contact_back_callback —É–¥–∞–ª–µ–Ω–∞, —Ç.–∫. –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º API v5.0, –≥–¥–µ –æ–Ω–∞ –Ω–µ –Ω—É–∂–Ω–∞)

async def location_contact_back_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    (–ù–û–í–ê–Ø) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª–∏–∞–ª–æ–≤ (–∫–∞–∫ –≤ bishkek_contacts).
    """
    query = update.callback_query
    await query.answer()
    
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ —Å—É—Ç–∏ –∑–∞–Ω–æ–≤–æ –≤—ã–∑—ã–≤–∞–µ—Ç bishkek_contacts,
    # –Ω–æ –Ω–∞–º –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ–µ.
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} –Ω–∞–∂–∞–ª '–ù–∞–∑–∞–¥' –∫ —Å–ø–∏—Å–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
    
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤ (Locations)
        api_locations = await api_request("GET", "/api/locations", params={})
        if not api_locations or "error" in api_locations or not isinstance(api_locations, list) or not api_locations:
             await query.edit_message_text("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤.")
             return

        locations = api_locations

        # 2. –ü–æ–ª—É—á–∞–µ–º –û–ë–©–ò–ï –∫–æ–Ω—Ç–∞–∫—Ç—ã (WhatsApp/Instagram)
        keys_to_fetch = ['whatsapp_link', 'instagram_link', 'map_link']
        api_settings = await api_request("GET", "/api/settings", params={'keys': keys_to_fetch})
        
        settings_dict = {}
        if api_settings and "error" not in api_settings and isinstance(api_settings, list):
            settings_dict = {s.get('key'): s.get('value') for s in api_settings}

        # 3. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (—Ç–∞–∫–æ–µ –∂–µ, –∫–∞–∫ –≤ bishkek_contacts)
        keyboard = []
        for loc in locations:
            keyboard.append([InlineKeyboardButton(f"üìç {loc.get('name', '–§–∏–ª–∏–∞–ª')}", callback_data=f"contact_loc_{loc.get('id')}")])

        if settings_dict.get('whatsapp_link'): 
            keyboard.append([InlineKeyboardButton("üí¨ WhatsApp", url=settings_dict.get('whatsapp_link'))])
        if settings_dict.get('instagram_link'): 
            keyboard.append([InlineKeyboardButton("üì∏ Instagram", url=settings_dict.get('instagram_link'))])
        if settings_dict.get('map_link'): 
            keyboard.append([InlineKeyboardButton("üó∫Ô∏è –û–±—â–∞—è –ö–∞—Ä—Ç–∞", url=settings_dict.get('map_link'))])

        reply_markup_inline = InlineKeyboardMarkup(keyboard) if keyboard else None
        
        # 4. –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(
            "üá∞üá¨ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –æ–±—â–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏:", 
            reply_markup=reply_markup_inline
        )
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ location_contact_back_callback: {e}", exc_info=True)
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

# --- 10. –ù–û–í–´–ï –§—É–Ω–∫—Ü–∏–∏ –í–ª–∞–¥–µ–ª—å—Ü–∞ ---

async def owner_all_orders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """(–í–ª–∞–¥–µ–ª–µ—Ü) –ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–∏—Å–∫–∞ '–í—Å–µ –ó–∞–∫–∞–∑—ã'."""
    logger.info(f"–í–ª–∞–¥–µ–ª–µ—Ü {context.user_data.get('client_id')} –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∑–∞–∫–∞–∑–∞–º.")
    await update.message.reply_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫-–∫–æ–¥, –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞:",
        reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True, one_time_keyboard=True)
    )
    return OWNER_ASK_ORDER_SEARCH # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞

async def handle_owner_order_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """(–í–ª–∞–¥–µ–ª–µ—Ü) –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ –∑–∞–∫–∞–∑–∞–º."""
    search_term = update.message.text
    employee_id = context.user_data.get('employee_id')
    markup = owner_main_menu_markup

    if not employee_id:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω employee_id –¥–ª—è –í–ª–∞–¥–µ–ª—å—Ü–∞ {context.user_data.get('client_id')}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –í–ª–∞–¥–µ–ª—å—Ü–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start", reply_markup=markup)
        return ConversationHandler.END

    logger.info(f"–í–ª–∞–¥–µ–ª–µ—Ü (EID: {employee_id}) –∏—â–µ—Ç –∑–∞–∫–∞–∑—ã: '{search_term}'")
    await update.message.reply_text(f"–ò—â—É –∑–∞–∫–∞–∑—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{search_term}'...", reply_markup=markup)

    # –í—ã–∑—ã–≤–∞–µ–º API —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –í–ª–∞–¥–µ–ª—å—Ü–∞
    api_response = await api_request(
        "GET", 
        "/api/orders",
        employee_id=employee_id, # <--- –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        params={'q': search_term, 'company_id': COMPANY_ID_FOR_BOT, 'limit': 20}
    )

    if not api_response or "error" in api_response or not isinstance(api_response, list):
        error_msg = api_response.get("error", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞") if api_response else "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"
        logger.error(f"–û—à–∏–±–∫–∞ API (–í–ª–∞–¥–µ–ª–µ—Ü /api/orders?q=...): {error_msg}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {error_msg}")
        return ConversationHandler.END

    if not api_response:
        await update.message.reply_text(f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}' –∑–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=markup)
        return ConversationHandler.END

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    text = f"üì¶ <b>–ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ ({len(api_response)} —à—Ç.):</b>\n\n"
    for order in api_response:
        client_info = order.get('client', {})
        client_name = client_info.get('full_name', '–ö–ª–∏–µ–Ω—Ç ?')
        client_code = f"{client_info.get('client_code_prefix', '')}{client_info.get('client_code_num', '')}"
        
        text += f"<b>–¢—Ä–µ–∫:</b> <code>{order.get('track_code', '?')}</code>\n"
        text += f"<b>–ö–ª–∏–µ–Ω—Ç:</b> {html.escape(client_name)} ({client_code})\n"
        text += f"<b>–°—Ç–∞—Ç—É—Å:</b> {order.get('status', '?')}\n"
        
        location = order.get('location') 
        if location:
            text += f"<b>–§–∏–ª–∏–∞–ª:</b> {location.get('name', '?')}\n"

        calc_weight = order.get('calculated_weight_kg')
        calc_cost = order.get('calculated_final_cost_som')
        if calc_weight is not None and calc_cost is not None:
            text += f"<b>–†–∞—Å—á–µ—Ç:</b> {calc_weight:.3f} –∫–≥ / {calc_cost:.0f} —Å–æ–º\n"
        
        text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    
    if len(text) > 4000:
        text = text[:4000] + "\n... (—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)"

    await update.message.reply_html(text, reply_markup=markup)
    return ConversationHandler.END

async def owner_clients(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """(–í–ª–∞–¥–µ–ª–µ—Ü) –ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–∏—Å–∫–∞ '–ö–ª–∏–µ–Ω—Ç—ã'."""
    logger.info(f"–í–ª–∞–¥–µ–ª–µ—Ü {context.user_data.get('client_id')} –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º.")
    await update.message.reply_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ –§–ò–û, –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True, one_time_keyboard=True)
    )
    return OWNER_ASK_CLIENT_SEARCH

async def handle_owner_client_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """(–í–ª–∞–¥–µ–ª–µ—Ü) –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º."""
    search_term = update.message.text
    employee_id = context.user_data.get('employee_id')
    markup = owner_main_menu_markup

    if not employee_id:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω employee_id –¥–ª—è –í–ª–∞–¥–µ–ª—å—Ü–∞ {context.user_data.get('client_id')}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –í–ª–∞–¥–µ–ª—å—Ü–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start", reply_markup=markup)
        return ConversationHandler.END
        
    logger.info(f"–í–ª–∞–¥–µ–ª–µ—Ü (EID: {employee_id}) –∏—â–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤: '{search_term}'")
    await update.message.reply_text(f"–ò—â—É –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{search_term}'...", reply_markup=markup)

    api_response = await api_request(
        "GET", 
        "/api/clients/search", 
        employee_id=employee_id, 
        params={'q': search_term, 'company_id': COMPANY_ID_FOR_BOT}
    )
    
    if not api_response or "error" in api_response or not isinstance(api_response, list):
        error_msg = api_response.get("error", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞") if api_response else "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"
        logger.error(f"–û—à–∏–±–∫–∞ API (–í–ª–∞–¥–µ–ª–µ—Ü /api/clients/search?q=...): {error_msg}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {error_msg}")
        return ConversationHandler.END

    if not api_response:
        await update.message.reply_text(f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}' –∫–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=markup)
        return ConversationHandler.END

    text = f"üë• <b>–ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ ({len(api_response)} —à—Ç.):</b>\n\n"
    for client in api_response:
        client_name = client.get('full_name', '–ö–ª–∏–µ–Ω—Ç ?')
        client_code = f"{client.get('client_code_prefix', '')}{client.get('client_code_num', '')}"
        tg_status = "–ü—Ä–∏–≤—è–∑–∞–Ω" if client.get('telegram_chat_id') else "–ù–µ—Ç"
        
        text += f"<b>–§–ò–û:</b> {html.escape(client_name)}\n"
        text += f"<b>–ö–æ–¥:</b> {client_code}\n"
        text += f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{client.get('phone', '?')}</code>\n"
        text += f"<b>–°—Ç–∞—Ç—É—Å:</b> {client.get('status', '–†–æ–∑–Ω–∏—Ü–∞')}\n"
        text += f"<b>Telegram:</b> {tg_status}\n"
        text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

    await update.message.reply_html(text, reply_markup=markup)
    return ConversationHandler.END

async def owner_locations(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """(–í–ª–∞–¥–µ–ª–µ—Ü) –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –µ–≥–æ —Ñ–∏–ª–∏–∞–ª–æ–≤."""
    client_id = context.user_data.get('client_id')
    employee_id = context.user_data.get('employee_id')
    markup = owner_main_menu_markup

    # –î–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –í–ª–∞–¥–µ–ª—å—Ü—É –Ω—É–∂–µ–Ω employee_id –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if not employee_id:
         await update.message.reply_text("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –í–ª–∞–¥–µ–ª—å—Ü–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start", reply_markup=markup)
         return

    api_response = await api_request("GET", "/api/locations", employee_id=employee_id, params={'company_id': COMPANY_ID_FOR_BOT})

    if not api_response or "error" in api_response or not isinstance(api_response, list):
        error_msg = api_response.get("error", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞") if api_response else "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤ –¥–ª—è –í–ª–∞–¥–µ–ª—å—Ü–∞ {client_id}: {error_msg}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤: {error_msg}")
        return

    if not api_response:
        await update.message.reply_text("üè¢ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞.")
        return

    text = "üè¢ <b>–í–∞—à–∏ —Ñ–∏–ª–∏–∞–ª—ã:</b>\n\n"
    for i, loc in enumerate(api_response, 1):
        text += f"<b>{i}. {loc.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}</b>\n"
        if loc.get('address'):
            text += f"   <b>–ê–¥—Ä–µ—Å:</b> {loc.get('address')}\n"
        if loc.get('phone'):
            text += f"   <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{loc.get('phone')}</code>\n"
        text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    
    await update.message.reply_html(text, reply_markup=markup)

async def owner_broadcast_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """(–í–ª–∞–¥–µ–ª–µ—Ü) –ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ '–û–±—ä—è–≤–ª–µ–Ω–∏–µ' (–†–∞—Å—Å—ã–ª–∫–∞)."""
    logger.info(f"–í–ª–∞–¥–µ–ª–µ—Ü {context.user_data.get('client_id')} –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É.")
    await update.message.reply_text(
        "üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å <b>HTML</b>-—Ç–µ–≥–∏ (<code>&lt;b&gt;</code>, <code>&lt;i&gt;</code>, <code>&lt;code&gt;</code>).\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'.",
        reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True, one_time_keyboard=True),
        parse_mode=ParseMode.HTML
    )
    return OWNER_ASK_BROADCAST_TEXT

async def handle_broadcast_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """(–í–ª–∞–¥–µ–ª–µ—Ü) –ü–æ–ª—É—á–∏–ª —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–≤—å—é –∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    broadcast_text = update.message.text
    # (–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –µ—Å–ª–∏ –Ω—É–∂–µ–Ω HTML, –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å update.message.text_html)
    context.user_data['broadcast_text'] = update.message.text_html # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å HTML

    preview_message = (
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n"
        "-----------------------------------\n"
        f"{broadcast_text}\n" # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –≤ –ø—Ä–µ–≤—å—é
        "-----------------------------------\n\n"
        "<b>–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º) –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º?</b>"
    )
    
    keyboard = [["–î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å"], ["–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å"]]
    await update.message.reply_html(
        preview_message,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return OWNER_CONFIRM_BROADCAST

async def handle_broadcast_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """(–í–ª–∞–¥–µ–ª–µ—Ü) –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏."""
    answer = update.message.text
    employee_id = context.user_data.get('employee_id')
    markup = owner_main_menu_markup
    
    if answer != "–î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å":
        await update.message.reply_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=markup)
        context.user_data.pop('broadcast_text', None)
        return ConversationHandler.END

    if not employee_id:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: –Ω–µ –Ω–∞–π–¥–µ–Ω employee_id –¥–ª—è –í–ª–∞–¥–µ–ª—å—Ü–∞ {context.user_data.get('client_id')}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –í–ª–∞–¥–µ–ª—å—Ü–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start", reply_markup=markup)
        return ConversationHandler.END

    broadcast_text_html = context.user_data.get('broadcast_text')
    if not broadcast_text_html:
        await update.message.reply_text("–û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Ç–µ—Ä—è–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=markup)
        return ConversationHandler.END

    await update.message.reply_text("‚è≥ –ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—Å—ã–ª–∫—É... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.", reply_markup=markup)
    
    api_response = await api_request(
        "POST", 
        "/api/bot/broadcast",
        employee_id=employee_id, # <--- –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        json={'text': broadcast_text_html, 'company_id': COMPANY_ID_FOR_BOT}
    )
    
    context.user_data.pop('broadcast_text', None)

    if not api_response or "error" in api_response:
        error_msg = api_response.get("error", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞") if api_response else "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"
        logger.error(f"–û—à–∏–±–∫–∞ API (–í–ª–∞–¥–µ–ª–µ—Ü /api/bot/broadcast): {error_msg}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {error_msg}")
    else:
        sent_count = api_response.get('sent_to_clients', 0)
        logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –í–ª–∞–¥–µ–ª—å—Ü–∞ (EID: {employee_id}) –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}")
        await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {sent_count} –∫–ª–∏–µ–Ω—Ç–∞–º.")
        
    return ConversationHandler.END


# --- 11. –û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞ ---

async def cancel_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –ª—é–±–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ ConversationHandler."""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–º–µ–Ω–∏–ª –¥–∏–∞–ª–æ–≥.")
    
    is_owner = context.user_data.get('is_owner', False)
    markup = owner_main_menu_markup if is_owner else client_main_menu_markup
    message_text = "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."

    if update.callback_query:
        await update.callback_query.answer()
        try:
            await update.callback_query.edit_message_text(message_text, reply_markup=None)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ callback'–∞: {e}")
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=markup)
    else:
        await update.message.reply_text(message_text, reply_markup=markup)

    # –û—á–∏—Å—Ç–∫–∞ –í–°–ï–• –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    keys_to_clear = [
        'location_id', 'track_code', 'comment', 'available_locations', 
        'phone_to_register', 'broadcast_text'
    ]
    for key in keys_to_clear:
        context.user_data.pop(key, None)
    
    return ConversationHandler.END


# bot_template.py

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –í–´–•–û–î–ê ---
async def logout(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /logout.
    –û—Ç–≤—è–∑—ã–≤–∞–µ—Ç Telegram ID –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ API –∏ –æ—á–∏—â–∞–µ—Ç user_data.
    """
    user = update.effective_user
    chat_id = str(user.id)
    client_id = context.user_data.get('client_id')

    if not client_id:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —É–∂–µ –≤—ã—à–µ–ª (/logout)")
        await update.message.reply_text(
            "–í—ã —É–∂–µ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} (ClientID: {client_id}) –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ —Å–∏—Å—Ç–µ–º—ã...")

    # 1. –í—ã–∑—ã–≤–∞–µ–º API, —á—Ç–æ–±—ã –æ—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
    api_response = await api_request(
        "POST",
        "/api/bot/unlink",
        json={"telegram_chat_id": chat_id, "company_id": COMPANY_ID_FOR_BOT}
    )

    if not api_response or "error" in api_response:
        error_msg = api_response.get("error", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞") if api_response else "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"
        logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –≤—ã–∑–æ–≤–µ /api/bot/unlink: {error_msg}")
        # (–î–∞–∂–µ –µ—Å–ª–∏ API –æ—Ç–≤–µ—Ç–∏–ª –æ—à–∏–±–∫–æ–π, –º—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –æ—á–∏—Å—Ç–∏–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞)
    
    # 2. –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
    context.user_data.clear()
    
    await update.message.reply_text(
        "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n\n"
        "–ß—Ç–æ–±—ã –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞, –Ω–∞–∂–º–∏—Ç–µ /start –∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –±—ã–ª–∏ –≤ –Ω–∏—Ö
    return ConversationHandler.END
# --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –§–£–ù–ö–¶–ò–ò ---


# --- 12. –ó–∞–ø—É—Å–∫ –ë–æ—Ç–∞ ---

def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    
    # --- –ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –±–æ—Ç–∞ –ü–ï–†–ï–î –∑–∞–ø—É—Å–∫–æ–º ---
    identify_bot_company()
    # (–ï—Å–ª–∏ –æ—à–∏–±–∫–∞, sys.exit(1) —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –ø—Ä–æ–≥—Ä–∞–º–º—É)

    logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ '{COMPANY_NAME_FOR_BOT}' (ID: {COMPANY_ID_FOR_BOT})...")
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # --- –î–∏–∞–ª–æ–≥ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ ---
    registration_conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)], 
        states={
            ASK_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_phone_input)],
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_get_name)],
        },
        fallbacks=[CommandHandler('cancel', cancel_dialog), MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel_dialog)],
        per_user=True, per_chat=True, name="registration",
    )
    
    # --- –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ---
    add_order_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑$'), add_order_start)],
        states={
            ADD_ORDER_LOCATION: [CallbackQueryHandler(add_order_received_location, pattern=r'^loc_')],
            ADD_ORDER_TRACK_CODE: [
                MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel_dialog),
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_order_received_track_code)
            ],
            ADD_ORDER_COMMENT: [
                MessageHandler(filters.Regex('^‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å$'), add_order_skip_comment),
                MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel_dialog),
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_order_received_comment)
            ],
        },
        fallbacks=[
            CommandHandler('cancel', cancel_dialog), 
            MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel_dialog),
            CallbackQueryHandler(cancel_dialog, pattern='^cancel_add_order$')
        ],
        per_user=True, per_chat=True, name="add_order",
    )
    
    # --- –ù–û–í–´–ï –î–ò–ê–õ–û–ì–ò –í–õ–ê–î–ï–õ–¨–¶–ê ---
    owner_all_orders_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^üì¶ –í—Å–µ –ó–∞–∫–∞–∑—ã$'), owner_all_orders)],
        states={
            OWNER_ASK_ORDER_SEARCH: [
                MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel_dialog),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_owner_order_search)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel_dialog), MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel_dialog)],
        per_user=True, per_chat=True, name="owner_search_orders",
    )

    owner_clients_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^üë• –ö–ª–∏–µ–Ω—Ç—ã$'), owner_clients)],
        states={
            OWNER_ASK_CLIENT_SEARCH: [
                MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel_dialog),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_owner_client_search)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel_dialog), MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel_dialog)],
        per_user=True, per_chat=True, name="owner_search_clients",
    )

    owner_broadcast_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ$'), owner_broadcast_start)],
        states={
            OWNER_ASK_BROADCAST_TEXT: [
                MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel_dialog),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_broadcast_text)
            ],
            OWNER_CONFIRM_BROADCAST: [
                MessageHandler(filters.Regex('^–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å$'), cancel_dialog),
                MessageHandler(filters.Regex('^–î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å$'), handle_broadcast_confirm)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel_dialog), MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel_dialog)],
        per_user=True, per_chat=True, name="owner_broadcast",
    )
    
    # --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
    
    # –°–Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∏ (–æ–Ω–∏ –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    application.add_handler(registration_conv)
    application.add_handler(add_order_conv)
    application.add_handler(owner_all_orders_conv)
    application.add_handler(owner_clients_conv)
    application.add_handler(owner_broadcast_conv)

    # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    application.add_handler(CallbackQueryHandler(location_contact_callback, pattern=r'^contact_loc_'))
    application.add_handler(CallbackQueryHandler(location_contact_back_callback, pattern=r'^contact_list_back$'))
    application.add_handler(CommandHandler('logout', logout))
    # (–£–±—Ä–∞–ª–∏ back_callback, —Ç.–∫. –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω)

    # –ö–æ–º–∞–Ω–¥–∞ /cancel –≤–Ω–µ –¥–∏–∞–ª–æ–≥–æ–≤
    application.add_handler(CommandHandler('cancel', cancel_dialog))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –í–°–ï–• –û–°–¢–ê–õ–¨–ù–´–• —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–º–µ–Ω—é)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))

    logger.info(f"–ë–æ—Ç (ID: {COMPANY_ID_FOR_BOT}) –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
    application.run_polling()
    

if __name__ == "__main__":
    main()

